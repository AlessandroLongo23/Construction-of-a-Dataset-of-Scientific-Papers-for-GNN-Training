[
    {
        "content": "4",
        "page_index": 0,
        "bbox": [
            16.34,
            571.96,
            36.34,
            581.96
        ],
        "match": 4
    },
    {
        "content": "2",
        "page_index": 0,
        "bbox": [
            16.34,
            561.96,
            36.34,
            571.96
        ],
        "match": 4
    },
    {
        "content": "0",
        "page_index": 0,
        "bbox": [
            16.34,
            551.96,
            36.34,
            561.96
        ],
        "match": 4
    },
    {
        "content": "2",
        "page_index": 0,
        "bbox": [
            16.34,
            541.96,
            36.34,
            551.96
        ],
        "match": 4
    },
    {
        "content": "r",
        "page_index": 0,
        "bbox": [
            16.34,
            530.3,
            36.34,
            536.9599999999999
        ],
        "match": 4
    },
    {
        "content": "Ap",
        "page_index": 0,
        "bbox": [
            16.34,
            505.86,
            36.34,
            530.3
        ],
        "match": 50
    },
    {
        "content": "3",
        "page_index": 0,
        "bbox": [
            16.34,
            490.86,
            36.34,
            500.86
        ],
        "match": 4
    },
    {
        "content": "2",
        "page_index": 0,
        "bbox": [
            16.34,
            480.86,
            36.34,
            490.86
        ],
        "match": 4
    },
    {
        "content": "]",
        "page_index": 0,
        "bbox": [
            16.34,
            464.2,
            36.34,
            470.86
        ],
        "match": 27
    },
    {
        "content": "C",
        "page_index": 0,
        "bbox": [
            16.34,
            450.86,
            36.34,
            464.2
        ],
        "match": 4
    },
    {
        "content": "D",
        "page_index": 0,
        "bbox": [
            16.34,
            436.41999999999996,
            36.34,
            450.85999999999996
        ],
        "match": 5
    },
    {
        "content": ".",
        "page_index": 0,
        "bbox": [
            16.34,
            431.41999999999996,
            36.34,
            436.41999999999996
        ],
        "match": 4
    },
    {
        "content": "s",
        "page_index": 0,
        "bbox": [
            16.34,
            423.64,
            36.34,
            431.41999999999996
        ],
        "match": 4
    },
    {
        "content": "[c",
        "page_index": 0,
        "bbox": [
            16.34,
            408.1,
            36.34,
            423.64
        ],
        "match": null
    },
    {
        "content": "1",
        "page_index": 0,
        "bbox": [
            16.34,
            388.1,
            36.34,
            398.1
        ],
        "match": 4
    },
    {
        "content": "v",
        "page_index": 0,
        "bbox": [
            16.34,
            378.1,
            36.34,
            388.1
        ],
        "match": 5
    },
    {
        "content": "6",
        "page_index": 0,
        "bbox": [
            16.34,
            368.1,
            36.34,
            378.1
        ],
        "match": 4
    },
    {
        "content": "4",
        "page_index": 0,
        "bbox": [
            16.34,
            358.1,
            36.34,
            368.1
        ],
        "match": 4
    },
    {
        "content": "2",
        "page_index": 0,
        "bbox": [
            16.34,
            348.1,
            36.34,
            358.1
        ],
        "match": 4
    },
    {
        "content": "5",
        "page_index": 0,
        "bbox": [
            16.34,
            338.1,
            36.34,
            348.1
        ],
        "match": 5
    },
    {
        "content": "1",
        "page_index": 0,
        "bbox": [
            16.34,
            328.1,
            36.34,
            338.1
        ],
        "match": 4
    },
    {
        "content": ".",
        "page_index": 0,
        "bbox": [
            16.34,
            323.1,
            36.34,
            328.1
        ],
        "match": 4
    },
    {
        "content": "4",
        "page_index": 0,
        "bbox": [
            16.34,
            313.1,
            36.34,
            323.1
        ],
        "match": 4
    },
    {
        "content": "0",
        "page_index": 0,
        "bbox": [
            16.34,
            303.1,
            36.34,
            313.1
        ],
        "match": 4
    },
    {
        "content": "4",
        "page_index": 0,
        "bbox": [
            16.34,
            293.1,
            36.34,
            303.1
        ],
        "match": 4
    },
    {
        "content": "2",
        "page_index": 0,
        "bbox": [
            16.34,
            283.1,
            36.34,
            293.1
        ],
        "match": 4
    },
    {
        "content": ":",
        "page_index": 0,
        "bbox": [
            16.34,
            277.54,
            36.34,
            283.1
        ],
        "match": 5
    },
    {
        "content": "v",
        "page_index": 0,
        "bbox": [
            16.34,
            267.54,
            36.34,
            277.54
        ],
        "match": 5
    },
    {
        "content": "i",
        "page_index": 0,
        "bbox": [
            16.34,
            261.98,
            36.34,
            267.54
        ],
        "match": 4
    },
    {
        "content": "X",
        "page_index": 0,
        "bbox": [
            16.34,
            247.54,
            36.34,
            261.98
        ],
        "match": 3
    },
    {
        "content": "r",
        "page_index": 0,
        "bbox": [
            16.34,
            240.88,
            36.34,
            247.54
        ],
        "match": 4
    },
    {
        "content": "a",
        "page_index": 0,
        "bbox": [
            16.34,
            232.0,
            36.34,
            240.88
        ],
        "match": 4
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic",
        "page_index": 0,
        "bbox": [
            66.981,
            692.329381,
            545.0182271999998,
            709.544781
        ],
        "match": 0
    },
    {
        "content": "Models",
        "page_index": 0,
        "bbox": [
            277.457,
            672.4043810000001,
            334.54326639999994,
            689.619781
        ],
        "match": 0
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp",
        "page_index": 0,
        "bbox": [
            142.97799999999998,
            656.5850896000001,
            223.79515199999997,
            668.5402896
        ],
        "match": 1
    },
    {
        "content": "pal.andras.papp@huawei.com",
        "page_index": 0,
        "bbox": [
            122.42499999999998,
            644.6340748,
            244.34729879999998,
            654.5966748
        ],
        "match": 1
    },
    {
        "content": "Computing Systems Lab",
        "page_index": 0,
        "bbox": [
            133.92199999999997,
            632.6790748,
            232.85061799999997,
            642.6416747999999
        ],
        "match": 1
    },
    {
        "content": "Huawei Zurich Research Center",
        "page_index": 0,
        "bbox": [
            118.24099999999997,
            620.7240747999999,
            248.7211722,
            630.6866747999999
        ],
        "match": 1
    },
    {
        "content": "Zurich, Switzerland",
        "page_index": 0,
        "bbox": [
            143.31099999999998,
            608.7680747999999,
            223.46011699999997,
            618.7306747999999
        ],
        "match": null
    },
    {
        "content": "Aikaterini Karanasiou",
        "page_index": 0,
        "bbox": [
            128.83900000000006,
            587.2660895999998,
            236.5194864000001,
            599.2212895999997
        ],
        "match": 3
    },
    {
        "content": "aikaterini.karanasiou@huawei.com",
        "page_index": 0,
        "bbox": [
            110.91300000000005,
            575.3150747999997,
            254.86260740000006,
            585.2776747999997
        ],
        "match": 3
    },
    {
        "content": "Computing Systems Lab",
        "page_index": 0,
        "bbox": [
            133.42400000000006,
            563.3600747999997,
            232.35261800000004,
            573.3226747999996
        ],
        "match": 3
    },
    {
        "content": "Huawei Zurich Research Center",
        "page_index": 0,
        "bbox": [
            117.74200000000006,
            551.4050747999996,
            248.2221722000001,
            561.3676747999996
        ],
        "match": 3
    },
    {
        "content": "Zurich, Switzerland",
        "page_index": 0,
        "bbox": [
            142.81300000000007,
            539.4490747999996,
            222.9621170000001,
            549.4116747999996
        ],
        "match": null
    },
    {
        "content": "Georg Anegg",
        "page_index": 0,
        "bbox": [
            397.038,
            656.5850896,
            462.18188480000003,
            668.5402895999999
        ],
        "match": 2
    },
    {
        "content": "georg.anegg@huawei.com",
        "page_index": 0,
        "bbox": [
            375.732,
            644.6340747999999,
            483.4874816,
            654.5966747999998
        ],
        "match": 2
    },
    {
        "content": "Computing Systems Lab",
        "page_index": 0,
        "bbox": [
            380.146,
            632.6790747999999,
            479.07461800000004,
            642.6416747999998
        ],
        "match": 2
    },
    {
        "content": "Huawei Zurich Research Center",
        "page_index": 0,
        "bbox": [
            364.46500000000003,
            620.7240747999998,
            494.94517220000006,
            630.6866747999998
        ],
        "match": 2
    },
    {
        "content": "Zurich, Switzerland",
        "page_index": 0,
        "bbox": [
            389.53600000000006,
            608.7680747999998,
            469.68511700000005,
            618.7306747999997
        ],
        "match": null
    },
    {
        "content": "Albert\u2212Jan N. Yzelman",
        "page_index": 0,
        "bbox": [
            374.3040000000001,
            587.2660895999996,
            483.5027968000001,
            599.2212895999996
        ],
        "match": 4
    },
    {
        "content": "albertjan.yzelman@huawei.com",
        "page_index": 0,
        "bbox": [
            363.81200000000007,
            575.3150747999996,
            494.4117234000001,
            585.2776747999995
        ],
        "match": 4
    },
    {
        "content": "Computing Systems Lab",
        "page_index": 0,
        "bbox": [
            379.6480000000001,
            563.3600747999996,
            478.5766180000001,
            573.3226747999995
        ],
        "match": 4
    },
    {
        "content": "Huawei Zurich Research Center",
        "page_index": 0,
        "bbox": [
            363.9670000000001,
            551.4050747999995,
            494.4471722000001,
            561.3676747999995
        ],
        "match": 4
    },
    {
        "content": "Zurich, Switzerland",
        "page_index": 0,
        "bbox": [
            389.0370000000001,
            539.4490747999995,
            469.1861170000001,
            549.4116747999994
        ],
        "match": null
    },
    {
        "content": "ABSTRACT",
        "page_index": 0,
        "bbox": [
            53.798000000000116,
            517.9859978999995,
            111.94350300000013,
            528.8950978999995
        ],
        "match": null
    },
    {
        "content": "1 INTRODUCTION",
        "page_index": 0,
        "bbox": [
            317.955,
            517.9859978999999,
            420.6859947,
            528.8950979
        ],
        "match": 7
    },
    {
        "content": "We study the problem of efficiently scheduling a computational",
        "page_index": 0,
        "bbox": [
            53.368,
            506.78906720000003,
            294.0469780480001,
            515.7554672
        ],
        "match": 5
    },
    {
        "content": "The optimal scheduling of complex computational workloads on",
        "page_index": 0,
        "bbox": [
            317.686,
            506.78906720000003,
            558.2003549440001,
            515.7554672
        ],
        "match": 8
    },
    {
        "content": "DAG on multiple processors. The majority of previous works have",
        "page_index": 0,
        "bbox": [
            53.798,
            495.83006720000003,
            294.0445196096001,
            504.7964672
        ],
        "match": 5
    },
    {
        "content": "multiple processors has been extensively studied since the early",
        "page_index": 0,
        "bbox": [
            317.955,
            495.83006720000003,
            558.432772032,
            504.7964672
        ],
        "match": 8
    },
    {
        "content": "developed and compared algorithms for this problem in relatively",
        "page_index": 0,
        "bbox": [
            53.798,
            484.8710672,
            294.2749919552001,
            493.8374672
        ],
        "match": 5
    },
    {
        "content": "days of computing. As the different subtasks in a computation usu\u2212",
        "page_index": 0,
        "bbox": [
            317.955,
            484.8710672,
            559.7211361152,
            493.8374672
        ],
        "match": 8
    },
    {
        "content": "simple models; in contrast to this, we analyze this problem in a",
        "page_index": 0,
        "bbox": [
            53.798,
            473.9120672,
            294.0471288320001,
            482.8784672
        ],
        "match": 5
    },
    {
        "content": "ally have precedence constraints between them (one subtask can",
        "page_index": 0,
        "bbox": [
            317.955,
            473.9120672,
            558.1996635648001,
            482.8784672
        ],
        "match": 8
    },
    {
        "content": "more realistic model that captures many real\u2212world aspects, such as",
        "page_index": 0,
        "bbox": [
            53.798,
            462.9530672,
            294.0453355520001,
            471.9194672
        ],
        "match": 5
    },
    {
        "content": "only be started after another one has been finished), the computa\u2212",
        "page_index": 0,
        "bbox": [
            317.955,
            462.9530672,
            559.7154693503999,
            471.9194672
        ],
        "match": 8
    },
    {
        "content": "communication costs, synchronization costs, and the hierarchical",
        "page_index": 0,
        "bbox": [
            53.798,
            451.9940672,
            294.04601699840003,
            460.9604672
        ],
        "match": 5
    },
    {
        "content": "tions in these applications are often modeled as Directed Acyclic",
        "page_index": 0,
        "bbox": [
            317.955,
            451.9940672,
            558.1996635648001,
            460.9604672
        ],
        "match": 8
    },
    {
        "content": "structure of modern processing architectures. For this we extend the",
        "page_index": 0,
        "bbox": [
            53.798,
            441.0360672,
            294.0453355520001,
            450.00246719999996
        ],
        "match": 5
    },
    {
        "content": "Graphs (DAGs), with the directed edges representing these depen\u2212",
        "page_index": 0,
        "bbox": [
            317.955,
            441.0360672,
            559.7148596352,
            450.00246719999996
        ],
        "match": 8
    },
    {
        "content": "well\u2212established BSP model of parallel computing with non\u2212uniform",
        "page_index": 0,
        "bbox": [
            53.467,
            430.07706720000004,
            294.04824428800003,
            439.0434672
        ],
        "match": 5
    },
    {
        "content": "dencies.",
        "page_index": 0,
        "bbox": [
            317.955,
            430.07706720000004,
            347.10476639999996,
            439.0434672
        ],
        "match": 8
    },
    {
        "content": "memory access (NUMA) effects. We then develop a range of new",
        "page_index": 0,
        "bbox": [
            53.798,
            419.11806720000004,
            294.3803561216001,
            428.0844672
        ],
        "match": 5
    },
    {
        "content": "Besides the structure of the DAG representing the computation,",
        "page_index": 0,
        "bbox": [
            327.918,
            419.11806720000004,
            559.1861763648001,
            428.0844672
        ],
        "match": 9
    },
    {
        "content": "scheduling algorithms to minimize the scheduling cost in this more",
        "page_index": 0,
        "bbox": [
            53.798,
            408.15906720000004,
            294.045335552,
            417.1254672
        ],
        "match": 5
    },
    {
        "content": "the other main ingredient of a scheduling problem is the machine",
        "page_index": 0,
        "bbox": [
            317.955,
            408.15906720000004,
            558.1986324288,
            417.1254672
        ],
        "match": 9
    },
    {
        "content": "complex setting: several initialization heuristics, a hill\u2212climbing",
        "page_index": 0,
        "bbox": [
            53.798,
            397.20006720000003,
            294.047128832,
            406.1664672
        ],
        "match": 5
    },
    {
        "content": "model assumed. DAG scheduling has been studied in a very wide",
        "page_index": 0,
        "bbox": [
            317.955,
            397.20006720000003,
            558.200676768,
            406.1664672
        ],
        "match": 9
    },
    {
        "content": "local search method, and several approaches that formulate (and",
        "page_index": 0,
        "bbox": [
            53.798,
            386.24106720000003,
            294.0471288320001,
            395.2074672
        ],
        "match": 5
    },
    {
        "content": "range of models in the past decades, differing in e.g. the numbers",
        "page_index": 0,
        "bbox": [
            317.955,
            386.24106720000003,
            558.203321856,
            395.2074672
        ],
        "match": 9
    },
    {
        "content": "solve) the scheduling problem as an Integer Linear Program (ILP).",
        "page_index": 0,
        "bbox": [
            53.798,
            375.28206720000003,
            295.4278109696001,
            384.2484672
        ],
        "match": 5
    },
    {
        "content": "and types of processors, the modelling of communication costs, or",
        "page_index": 0,
        "bbox": [
            317.955,
            375.28206720000003,
            558.3690029952002,
            384.2484672
        ],
        "match": 9
    },
    {
        "content": "We combine these algorithms into a single framework, and conduct",
        "page_index": 0,
        "bbox": [
            53.368,
            364.3230672,
            294.0459020800001,
            373.2894672
        ],
        "match": 5
    },
    {
        "content": "other properties of the system such as synchronization or preemp\u2212",
        "page_index": 0,
        "bbox": [
            317.955,
            364.3230672,
            559.7171908992,
            373.2894672
        ],
        "match": 9
    },
    {
        "content": "experiments on a diverse set of real\u2212world computational DAGs to",
        "page_index": 0,
        "bbox": [
            53.798,
            353.3640672,
            294.04361400320005,
            362.3304672
        ],
        "match": 5
    },
    {
        "content": "tion. However, for arbitrary computational workloads (i.e. general",
        "page_index": 0,
        "bbox": [
            317.955,
            353.3640672,
            558.2039046720001,
            362.3304672
        ],
        "match": 9
    },
    {
        "content": "show that the resulting scheduler significantly outperforms both",
        "page_index": 0,
        "bbox": [
            53.798,
            342.4050672,
            294.0426635648,
            351.3714672
        ],
        "match": 5
    },
    {
        "content": "DAGs), finding an optimal or close\u2212to\u2212optimal schedule is already",
        "page_index": 0,
        "bbox": [
            317.955,
            342.4050672,
            558.4325209728001,
            351.3714672
        ],
        "match": 9
    },
    {
        "content": "academic and practical baselines. In particular, even without NUMA",
        "page_index": 0,
        "bbox": [
            53.798,
            331.4460672,
            294.36167014400013,
            340.4124672
        ],
        "match": 5
    },
    {
        "content": "very challenging in the simplest possible models, e.g. with uniform",
        "page_index": 0,
        "bbox": [
            317.731,
            331.4460672,
            558.1980123520001,
            340.4124672
        ],
        "match": 9
    },
    {
        "content": "effects, our scheduler finds solutions of 24% \u2212 44% smaller cost on",
        "page_index": 0,
        "bbox": [
            53.798,
            319.1431072,
            294.0449910912,
            329.45446719999995
        ],
        "match": 5
    },
    {
        "content": "average than the baselines, and in case of NUMA effects, it achieves",
        "page_index": 0,
        "bbox": [
            53.798,
            309.52906720000004,
            294.04533555200004,
            318.4954672
        ],
        "match": 5
    },
    {
        "content": "up to a factor 2.5\u00d7 improvement compared to the baselines. Finally,",
        "page_index": 0,
        "bbox": [
            53.798,
            297.2251072,
            295.0337442559999,
            307.5364672
        ],
        "match": 5
    },
    {
        "content": "we also develop a multilevel scheduling algorithm, which provides",
        "page_index": 0,
        "bbox": [
            53.467,
            287.61106720000004,
            294.0447653248,
            296.5774672
        ],
        "match": 5
    },
    {
        "content": "up to almost a factor 5\u00d7 improvement in the special case when the",
        "page_index": 0,
        "bbox": [
            53.798,
            275.3071072,
            294.0431075839999,
            285.6184672
        ],
        "match": 5
    },
    {
        "content": "problem is dominated by very high communication costs.",
        "page_index": 0,
        "bbox": [
            53.798,
            265.69306720000003,
            264.08697920000003,
            274.6594672
        ],
        "match": 5
    },
    {
        "content": "CCS CONCEPTS",
        "page_index": 0,
        "bbox": [
            53.798,
            239.7599979,
            134.81988570000001,
            250.6690979
        ],
        "match": null
    },
    {
        "content": "\u2022 Theory of computation \u2192 Scheduling algorithms; Parallel",
        "page_index": 0,
        "bbox": [
            53.798,
            226.5107616,
            294.0491662208,
            237.5304672
        ],
        "match": 10
    },
    {
        "content": "computing models; Integer programming.",
        "page_index": 0,
        "bbox": [
            53.798,
            217.60506719999998,
            206.63028800000004,
            226.5714672
        ],
        "match": 10
    },
    {
        "content": "KEYWORDS",
        "page_index": 0,
        "bbox": [
            53.798,
            191.67199789999998,
            115.66350609999999,
            202.58109789999997
        ],
        "match": null
    },
    {
        "content": "DAG scheduling; BSP model; Integer Linear Programming; Multi\u2212",
        "page_index": 0,
        "bbox": [
            53.798,
            180.47506719999998,
            295.55897146880005,
            189.4414672
        ],
        "match": 5
    },
    {
        "content": "level scheduling",
        "page_index": 0,
        "bbox": [
            53.798,
            169.51606719999998,
            112.7789792,
            178.4824672
        ],
        "match": 5
    },
    {
        "content": "\u00a9P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou and Albert\u2212Jan N. Yzelman,",
        "page_index": 0,
        "bbox": [
            54.296,
            116.77005240000001,
            294.81338880119995,
            123.74385240000001
        ],
        "match": null
    },
    {
        "content": "2024. This is the author\u2019s full version of the work, posted here for personal use. Not",
        "page_index": 0,
        "bbox": [
            53.798,
            108.8000524,
            294.0418673096001,
            115.7738524
        ],
        "match": 9
    },
    {
        "content": "for redistribution. The definitive version (extended abstract) was published in the",
        "page_index": 0,
        "bbox": [
            53.798,
            100.8300524,
            294.041783624,
            107.8038524
        ],
        "match": 9
    },
    {
        "content": "36th ACM Symposium on Parallelism in Algorithms and Architectures (SPAA 2024),",
        "page_index": 0,
        "bbox": [
            53.798,
            92.8600524,
            294.81420171199994,
            99.8338524
        ],
        "match": null
    },
    {
        "content": "https://doi.org/10.1145/3626183.3659972.",
        "page_index": 0,
        "bbox": [
            53.798,
            84.63905240000001,
            168.47516720000004,
            91.61285240000001
        ],
        "match": null
    },
    {
        "content": "1",
        "page_index": 0,
        "bbox": [
            304.298,
            72.68305240000001,
            307.540817,
            79.6568524
        ],
        "match": 4
    },
    {
        "content": "processors and very simple models of communication (or even no",
        "page_index": 0,
        "bbox": [
            317.955,
            320.4880672,
            558.2007216000001,
            329.45446719999995
        ],
        "match": 9
    },
    {
        "content": "communication costs at all).",
        "page_index": 0,
        "bbox": [
            317.955,
            309.5290672,
            420.4230192,
            318.49546719999995
        ],
        "match": 9
    },
    {
        "content": "Due to this, previous research has mostly focused on variants",
        "page_index": 0,
        "bbox": [
            327.918,
            298.57006720000004,
            558.198285312,
            307.5364672
        ],
        "match": 10
    },
    {
        "content": "of the scheduling problem where either the set of input DAGs or",
        "page_index": 0,
        "bbox": [
            317.955,
            287.61106720000004,
            558.368751936,
            296.5774672
        ],
        "match": 10
    },
    {
        "content": "the scheduling model is heavily restricted or simplified. Theoretical",
        "page_index": 0,
        "bbox": [
            317.955,
            276.65206720000003,
            558.202335552,
            285.6184672
        ],
        "match": 10
    },
    {
        "content": "work has almost exclusively studied very restricted models, where",
        "page_index": 0,
        "bbox": [
            317.623,
            265.69306720000003,
            558.2055892480001,
            274.6594672
        ],
        "match": 10
    },
    {
        "content": "it is still manageable to analyze approximation algorithms or hard\u2212",
        "page_index": 0,
        "bbox": [
            317.955,
            254.7340672,
            559.7205981312001,
            263.7004672
        ],
        "match": 10
    },
    {
        "content": "ness results; however, these models are usually far from realistic.",
        "page_index": 0,
        "bbox": [
            317.955,
            243.7750672,
            559.5851337600001,
            252.74146720000002
        ],
        "match": 10
    },
    {
        "content": "Experimental research has developed several scheduling heuristics",
        "page_index": 0,
        "bbox": [
            317.955,
            232.8160672,
            558.200452608,
            241.7824672
        ],
        "match": 10
    },
    {
        "content": "based on natural ideas such as locality, that generally deliver good",
        "page_index": 0,
        "bbox": [
            317.955,
            221.8570672,
            558.2038598400002,
            230.8234672
        ],
        "match": 10
    },
    {
        "content": "empirical results in simpler models; however, these heuristics are",
        "page_index": 0,
        "bbox": [
            317.955,
            210.8990672,
            558.2006767680001,
            219.8654672
        ],
        "match": 10
    },
    {
        "content": "completely impervious to the parameters of real\u2212world systems,",
        "page_index": 0,
        "bbox": [
            317.955,
            199.9400672,
            559.1918674560002,
            208.9064672
        ],
        "match": 10
    },
    {
        "content": "and hence it is unclear how their performance carries over to more",
        "page_index": 0,
        "bbox": [
            317.955,
            188.98106719999998,
            558.2023355520001,
            197.9474672
        ],
        "match": 10
    },
    {
        "content": "complex models. On the practical side, the parallel computing com\u2212",
        "page_index": 0,
        "bbox": [
            317.955,
            178.02206719999998,
            559.7137119360001,
            186.9884672
        ],
        "match": 10
    },
    {
        "content": "munity has developed more sophisticated models, such as the Bulk",
        "page_index": 0,
        "bbox": [
            317.955,
            167.06306719999998,
            558.4372910976,
            176.0294672
        ],
        "match": 10
    },
    {
        "content": "Synchronous Parallel (BSP) or the LogP model, that capture many",
        "page_index": 0,
        "bbox": [
            317.955,
            156.1040672,
            558.4352198592002,
            165.07046720000002
        ],
        "match": 10
    },
    {
        "content": "aspects of a real\u2212world system; however, due to their complexity,",
        "page_index": 0,
        "bbox": [
            317.955,
            145.1450672,
            559.1929165248,
            154.11146720000002
        ],
        "match": 10
    },
    {
        "content": "these models have mostly been used for developing and analyzing",
        "page_index": 0,
        "bbox": [
            317.955,
            134.1860672,
            558.2017886016,
            143.15246720000002
        ],
        "match": 10
    },
    {
        "content": "parallel implementations of concrete computations (i.e. specific",
        "page_index": 0,
        "bbox": [
            317.955,
            123.22706720000001,
            558.2041288320002,
            132.19346720000001
        ],
        "match": 10
    },
    {
        "content": "DAGs), instead of general computational tasks. As such, while each",
        "page_index": 0,
        "bbox": [
            317.955,
            112.2680672,
            558.202335552,
            121.2344672
        ],
        "match": 10
    },
    {
        "content": "of these directions offers valuable insight, we still lack a proper",
        "page_index": 0,
        "bbox": [
            317.955,
            101.3090672,
            558.3687519360001,
            110.2754672
        ],
        "match": 10
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 1,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": 4
    },
    {
        "content": "understanding of how to devise efficient scheduling algorithms for",
        "page_index": 1,
        "bbox": [
            53.798,
            698.3330672,
            294.211258784,
            707.2994672
        ],
        "match": 10
    },
    {
        "content": "[12, 18, 30, 35, 38]. On the other hand, the topic of developing ap\u2212",
        "page_index": 1,
        "bbox": [
            317.955,
            698.3330672,
            559.7134227648,
            707.2994672
        ],
        "match": 15
    },
    {
        "content": "arbitrary DAGs in a realistic machine model.",
        "page_index": 1,
        "bbox": [
            53.798,
            687.3740672,
            217.31823680000005,
            696.3404672
        ],
        "match": 10
    },
    {
        "content": "proximation algorithms in these models is still extensively studied",
        "page_index": 1,
        "bbox": [
            317.955,
            687.3740672,
            558.20385984,
            696.3404672
        ],
        "match": 15
    },
    {
        "content": "Our goal in this paper is to develop and analyze scheduling al\u2212",
        "page_index": 1,
        "bbox": [
            63.761,
            676.4150672,
            295.561628096,
            685.3814672
        ],
        "match": 11
    },
    {
        "content": "in recent years [16, 20\u201322].",
        "page_index": 1,
        "bbox": [
            317.955,
            676.4150672,
            416.82749279999996,
            685.3814672
        ],
        "match": 15
    },
    {
        "content": "gorithms for this more general case: we consider the scheduling",
        "page_index": 1,
        "bbox": [
            53.798,
            665.4560672,
            294.0471288320001,
            674.4224672
        ],
        "match": 11
    },
    {
        "content": "On the experimental side, researchers have developed a range",
        "page_index": 1,
        "bbox": [
            327.918,
            665.4560672,
            558.198285312,
            674.4224672
        ],
        "match": 16
    },
    {
        "content": "problem for general DAGs, in a model that captures many of the",
        "page_index": 1,
        "bbox": [
            53.798,
            654.4980671999999,
            294.047128832,
            663.4644672
        ],
        "match": 11
    },
    {
        "content": "of different scheduling heuristics, and evaluated their performance",
        "page_index": 1,
        "bbox": [
            317.955,
            654.4980671999999,
            558.203590848,
            663.4644672
        ],
        "match": 16
    },
    {
        "content": "most important aspects of real computations. In particular, we begin",
        "page_index": 1,
        "bbox": [
            53.798,
            643.5390672,
            294.0453355520001,
            652.5054672
        ],
        "match": 11
    },
    {
        "content": "empirically. Recent surveys [41] have classified these heuristics",
        "page_index": 1,
        "bbox": [
            317.955,
            643.5390672,
            558.204529088,
            652.5054672
        ],
        "match": 16
    },
    {
        "content": "from the BSP model which already accounts for communication",
        "page_index": 1,
        "bbox": [
            53.798,
            632.5800671999999,
            294.04712883200006,
            641.5464671999999
        ],
        "match": 11
    },
    {
        "content": "into two groups: list\u2212based [2, 13, 26, 32, 36] and cluster\u2212based",
        "page_index": 1,
        "bbox": [
            317.955,
            632.5800671999999,
            558.19899488,
            641.5464671999999
        ],
        "match": 16
    },
    {
        "content": "volume and latency, and we extend this with a simple model of",
        "page_index": 1,
        "bbox": [
            53.574,
            621.6210672,
            294.042626304,
            630.5874672
        ],
        "match": 11
    },
    {
        "content": "[14, 17, 42] methods. To our knowledge, there is very little previous",
        "page_index": 1,
        "bbox": [
            317.955,
            621.6210672,
            558.2007015680001,
            630.5874672
        ],
        "match": 16
    },
    {
        "content": "non\u2212uniform memory access (NUMA) effects, which also have a",
        "page_index": 1,
        "bbox": [
            53.798,
            610.6620671999999,
            294.0471288320001,
            619.6284671999999
        ],
        "match": 11
    },
    {
        "content": "work on evaluating these heuristics in more realistic models (with",
        "page_index": 1,
        "bbox": [
            317.623,
            610.6620671999999,
            558.2008549888,
            619.6284671999999
        ],
        "match": 16
    },
    {
        "content": "defining role in modern manycore architectures. We then develop",
        "page_index": 1,
        "bbox": [
            53.798,
            599.7030672,
            294.04532658560015,
            608.6694672
        ],
        "match": 11
    },
    {
        "content": "the exception of [27], which is discussed separately below).",
        "page_index": 1,
        "bbox": [
            317.955,
            599.7030672,
            534.2783664000001,
            608.6694672
        ],
        "match": 16
    },
    {
        "content": "a framework of scheduling algorithms in this more realistic model,",
        "page_index": 1,
        "bbox": [
            53.798,
            588.7440671999999,
            295.02685149440003,
            597.7104671999999
        ],
        "match": 11
    },
    {
        "content": "On the more practical side, BSP is one of the prominent models of",
        "page_index": 1,
        "bbox": [
            327.918,
            588.7440671999999,
            558.2007959040001,
            597.7104671999999
        ],
        "match": 17
    },
    {
        "content": "and compare this against several state\u2212of\u2212the\u2212art scheduling algo\u2212",
        "page_index": 1,
        "bbox": [
            53.798,
            577.7850672,
            295.55897146880005,
            586.7514672
        ],
        "match": 11
    },
    {
        "content": "parallel computing, and has been studied extensively from various",
        "page_index": 1,
        "bbox": [
            317.955,
            577.7850672,
            558.2006140032,
            586.7514672
        ],
        "match": 17
    },
    {
        "content": "rithms from previous research and from applications, on a set of",
        "page_index": 1,
        "bbox": [
            53.798,
            566.8260672,
            294.0471288320001,
            575.7924672
        ],
        "match": 11
    },
    {
        "content": "perspectives [4, 23, 34, 39, 40]. The BSP model accounts for several",
        "page_index": 1,
        "bbox": [
            317.955,
            566.8260672,
            558.1987641984001,
            575.7924672
        ],
        "match": 17
    },
    {
        "content": "DAGs representing a wide range of actual computational tasks.",
        "page_index": 1,
        "bbox": [
            53.798,
            555.8670672,
            284.71866560000007,
            564.8334672
        ],
        "match": 11
    },
    {
        "content": "important real\u2212world aspects such as communication volume and",
        "page_index": 1,
        "bbox": [
            317.955,
            555.8670672,
            558.1984620672001,
            564.8334672
        ],
        "match": 17
    },
    {
        "content": "Our first contribution in the paper is a database of computational",
        "page_index": 1,
        "bbox": [
            63.761,
            544.9090672,
            294.04379590400004,
            553.8754672
        ],
        "match": 12
    },
    {
        "content": "latency, but it conveniently captures all these in a relatively simple",
        "page_index": 1,
        "bbox": [
            317.955,
            544.9090672,
            558.2062269696,
            553.8754672
        ],
        "match": 17
    },
    {
        "content": "DAGs, which offers a diverse benchmark to evaluate different sched\u2212",
        "page_index": 1,
        "bbox": [
            53.798,
            533.9500671999999,
            295.5567119360001,
            542.9164671999999
        ],
        "match": 12
    },
    {
        "content": "cost function; as such, it is also used in various applications via",
        "page_index": 1,
        "bbox": [
            317.955,
            533.9500671999999,
            558.204128832,
            542.9164671999999
        ],
        "match": 17
    },
    {
        "content": "uling algorithms in the future. Then in terms of algorithms, we",
        "page_index": 1,
        "bbox": [
            53.798,
            522.9910672,
            294.0471288320001,
            531.9574672
        ],
        "match": 12
    },
    {
        "content": "the BSPlib library and its implementations [11, 43, 44]. However,",
        "page_index": 1,
        "bbox": [
            317.955,
            522.9910672,
            559.1896703360001,
            531.9574672
        ],
        "match": 17
    },
    {
        "content": "first present some heuristic methods to develop initial schedules",
        "page_index": 1,
        "bbox": [
            53.798,
            512.0320671999999,
            294.047128832,
            520.9984671999999
        ],
        "match": 12
    },
    {
        "content": "most of the previous works on BSP (and on similar models with",
        "page_index": 1,
        "bbox": [
            317.955,
            512.0320671999999,
            558.204128832,
            520.9984671999999
        ],
        "match": 17
    },
    {
        "content": "(similar to heuristics from previous works, but tuned towards our",
        "page_index": 1,
        "bbox": [
            53.529,
            501.0730672,
            294.21900672000015,
            510.0394672
        ],
        "match": 12
    },
    {
        "content": "more parameters, such as LogP [6]) focus on the scheduling of",
        "page_index": 1,
        "bbox": [
            317.955,
            501.0730672,
            558.199831424,
            510.0394672
        ],
        "match": 17
    },
    {
        "content": "realistic model). We then develop more advanced scheduling algo\u2212",
        "page_index": 1,
        "bbox": [
            53.798,
            490.1140672,
            295.5587383424001,
            499.0804672
        ],
        "match": 12
    },
    {
        "content": "specific DAGs that describe a concrete computation [8, 24, 25].",
        "page_index": 1,
        "bbox": [
            317.955,
            490.1140672,
            559.5829393280001,
            499.0804672
        ],
        "match": 17
    },
    {
        "content": "rithms that take a different approach: instead of making heuristic",
        "page_index": 1,
        "bbox": [
            53.798,
            479.1550672,
            294.04601699840003,
            488.1214672
        ],
        "match": 12
    },
    {
        "content": "One exception to this is a recent theoretical work that studies the",
        "page_index": 1,
        "bbox": [
            317.955,
            479.1550672,
            558.2034563520001,
            488.1214672
        ],
        "match": 17
    },
    {
        "content": "decisions based on e.g. locality, they consider the actual cost of",
        "page_index": 1,
        "bbox": [
            53.798,
            468.1960672,
            294.0471288320001,
            477.1624672
        ],
        "match": 12
    },
    {
        "content": "computational complexity of BSP scheduling for given subclasses",
        "page_index": 1,
        "bbox": [
            317.955,
            468.1960672,
            558.203456352,
            477.1624672
        ],
        "match": 17
    },
    {
        "content": "each solution in our complex model (with all its parameters), and",
        "page_index": 1,
        "bbox": [
            53.798,
            457.2370672,
            294.04367676800007,
            466.2034672
        ],
        "match": 12
    },
    {
        "content": "of DAGs, and also presents a naive ILP formulation to capture the",
        "page_index": 1,
        "bbox": [
            317.955,
            457.2370672,
            558.2007216000002,
            466.2034672
        ],
        "match": 17
    },
    {
        "content": "directly optimize for minimizing this cost. In particular, we develop",
        "page_index": 1,
        "bbox": [
            53.798,
            446.2780672,
            294.0453355520001,
            455.2444672
        ],
        "match": 12
    },
    {
        "content": "BSP scheduling problem on general DAGs [28].",
        "page_index": 1,
        "bbox": [
            317.955,
            446.2780672,
            490.68372960000005,
            455.2444672
        ],
        "match": 17
    },
    {
        "content": "(i) a local search algorithm that iteratively improves a solution by",
        "page_index": 1,
        "bbox": [
            53.529,
            435.3190672,
            294.2820853440001,
            444.28546719999997
        ],
        "match": 12
    },
    {
        "content": "The impact of NUMA in an algorithmic context has also been",
        "page_index": 1,
        "bbox": [
            327.918,
            435.3190672,
            558.198285312,
            444.28546719999997
        ],
        "match": 18
    },
    {
        "content": "making small modifications to a schedule as long as this decreases",
        "page_index": 1,
        "bbox": [
            53.798,
            424.36106720000004,
            294.0407357888,
            433.3274672
        ],
        "match": 12
    },
    {
        "content": "studied before on e.g. different variants of the (hyper)graph parti\u2212",
        "page_index": 1,
        "bbox": [
            317.955,
            424.36106720000004,
            559.7159714688,
            433.3274672
        ],
        "match": 18
    },
    {
        "content": "its total cost, and (ii) several different ways to model the problem",
        "page_index": 1,
        "bbox": [
            53.798,
            413.40206720000003,
            294.046321856,
            422.3684672
        ],
        "match": 12
    },
    {
        "content": "tioning problem [9, 29, 33].",
        "page_index": 1,
        "bbox": [
            317.955,
            413.40206720000003,
            416.80059359999996,
            422.3684672
        ],
        "match": 18
    },
    {
        "content": "as an Integer Linear Program (ILP), and use an ILP solver to find",
        "page_index": 1,
        "bbox": [
            53.798,
            402.44306720000003,
            294.04712883200006,
            411.4094672
        ],
        "match": 12
    },
    {
        "content": "Numerous other variants of the scheduling problem have also",
        "page_index": 1,
        "bbox": [
            327.918,
            402.44306720000003,
            558.198285312,
            411.4094672
        ],
        "match": 19
    },
    {
        "content": "(sub)schedules of small cost. Finally, we also present a multilevel",
        "page_index": 1,
        "bbox": [
            53.529,
            391.4840672,
            294.04335494400016,
            400.4504672
        ],
        "match": 12
    },
    {
        "content": "been studied extensively, e.g. with separate deadlines for nodes or",
        "page_index": 1,
        "bbox": [
            317.955,
            391.4840672,
            558.3739345152,
            400.4504672
        ],
        "match": 19
    },
    {
        "content": "scheduling approach that is superior in the case when our schedul\u2212",
        "page_index": 1,
        "bbox": [
            53.798,
            380.5250672,
            295.5564160448,
            389.4914672
        ],
        "match": 12
    },
    {
        "content": "with node duplication [3, 19].",
        "page_index": 1,
        "bbox": [
            317.623,
            380.5250672,
            425.5246576,
            389.4914672
        ],
        "match": 19
    },
    {
        "content": "ing problem is substantially dominated by communication costs.",
        "page_index": 1,
        "bbox": [
            53.798,
            369.5660672,
            289.49775680000005,
            378.5324672
        ],
        "match": 12
    },
    {
        "content": "The closest result our work is the work of \u00d6zkaya et al. [27],",
        "page_index": 1,
        "bbox": [
            327.918,
            369.5660672,
            559.187939328,
            378.5324672
        ],
        "match": 20
    },
    {
        "content": "Unsurprisingly, our more complex algorithms require notably",
        "page_index": 1,
        "bbox": [
            63.761,
            358.6070672,
            294.2790742400001,
            367.5734672
        ],
        "match": 13
    },
    {
        "content": "who conduct a similar experimental study with the same goal of",
        "page_index": 1,
        "bbox": [
            317.623,
            358.6070672,
            558.2013750400001,
            367.5734672
        ],
        "match": 20
    },
    {
        "content": "more running time than lightweight heuristics, and hence their",
        "page_index": 1,
        "bbox": [
            53.798,
            347.6480672,
            294.211751936,
            356.6144672
        ],
        "match": 13
    },
    {
        "content": "analyzing sophisticated scheduling algorithms in a more realistic",
        "page_index": 1,
        "bbox": [
            317.955,
            347.6480672,
            558.1981392768001,
            356.6144672
        ],
        "match": 20
    },
    {
        "content": "study is not viable on very large graphs. On the other hand, in",
        "page_index": 1,
        "bbox": [
            53.798,
            336.6890672,
            294.04712883200006,
            345.6554672
        ],
        "match": 13
    },
    {
        "content": "model. Our work differs from their approach in several aspects.",
        "page_index": 1,
        "bbox": [
            317.955,
            336.6890672,
            559.5851337600001,
            345.6554672
        ],
        "match": 20
    },
    {
        "content": "the domain where they are applicable, our results show that they",
        "page_index": 1,
        "bbox": [
            53.798,
            325.7300672,
            294.27706319360016,
            334.6964672
        ],
        "match": 13
    },
    {
        "content": "Firstly, the work of [27] introduces a custom model (named duplex",
        "page_index": 1,
        "bbox": [
            317.955,
            325.7300672,
            558.416041792,
            334.6964672
        ],
        "match": 20
    },
    {
        "content": "significantly outperform the baseline heuristics. In particular, even",
        "page_index": 1,
        "bbox": [
            53.798,
            314.77206720000004,
            294.0434526080001,
            323.7384672
        ],
        "match": 13
    },
    {
        "content": "single\u2212port model) that only extends classical scheduling models",
        "page_index": 1,
        "bbox": [
            317.955,
            314.77206720000004,
            558.204128832,
            323.7384672
        ],
        "match": 20
    },
    {
        "content": "without NUMA effects, our scheduler achieves a cost reduction of",
        "page_index": 1,
        "bbox": [
            53.467,
            303.81306720000003,
            294.04575162880013,
            312.7794672
        ],
        "match": 13
    },
    {
        "content": "with communication volume; in contrast to this, our work considers",
        "page_index": 1,
        "bbox": [
            317.623,
            303.81306720000003,
            558.204244288,
            312.7794672
        ],
        "match": 20
    },
    {
        "content": "32%\u201351% compared to a simpler, and 13%\u201340% compared to a more",
        "page_index": 1,
        "bbox": [
            53.798,
            292.85406720000003,
            294.04716531199995,
            301.8204672
        ],
        "match": 13
    },
    {
        "content": "BSP, a well\u2212established parallel computing model in both theory",
        "page_index": 1,
        "bbox": [
            317.955,
            292.85406720000003,
            558.4327720319999,
            301.8204672
        ],
        "match": 20
    },
    {
        "content": "sophisticated baseline, depending on the number of processors",
        "page_index": 1,
        "bbox": [
            53.798,
            281.8950672,
            294.0471288320001,
            290.8614672
        ],
        "match": 13
    },
    {
        "content": "and practice which also captures further aspects such as latency,",
        "page_index": 1,
        "bbox": [
            317.955,
            281.8950672,
            559.1918674560002,
            290.8614672
        ],
        "match": 20
    },
    {
        "content": "and the parameters of the model, on DAGs up to 10 000 nodes.",
        "page_index": 1,
        "bbox": [
            53.798,
            270.9360672,
            295.427224448,
            279.9024672
        ],
        "match": 13
    },
    {
        "content": "and we further extend this with NUMA effects. Moreover, while the",
        "page_index": 1,
        "bbox": [
            317.955,
            270.9360672,
            558.202335552,
            279.9024672
        ],
        "match": 20
    },
    {
        "content": "In case of NUMA effects, the improvement is even larger: 48%\u2013",
        "page_index": 1,
        "bbox": [
            53.798,
            259.9770672,
            295.030858944,
            268.9434672
        ],
        "match": 13
    },
    {
        "content": "main idea of [27] is to extend modern list schedulers with a acyclic",
        "page_index": 1,
        "bbox": [
            317.955,
            259.9770672,
            558.19819648,
            268.9434672
        ],
        "match": 20
    },
    {
        "content": "71% to the simpler, and 27%\u201358% to the stronger baseline, or with",
        "page_index": 1,
        "bbox": [
            53.592,
            249.0180672,
            294.0470334848,
            257.9844672
        ],
        "match": 13
    },
    {
        "content": "partitioner, we take an entirely different approach, and focus on",
        "page_index": 1,
        "bbox": [
            317.955,
            249.0180672,
            558.204128832,
            257.9844672
        ],
        "match": 20
    },
    {
        "content": "the multilevel algorithm, even up to 79% (i.e. almost a factor 5\u00d7",
        "page_index": 1,
        "bbox": [
            53.798,
            236.7141072,
            294.04463039999996,
            247.0254672
        ],
        "match": 13
    },
    {
        "content": "improvement) to the stronger baseline in some cases. This shows",
        "page_index": 1,
        "bbox": [
            53.798,
            227.10006719999998,
            294.0485006912,
            236.0664672
        ],
        "match": 13
    },
    {
        "content": "that in realistic scheduling models, our approach can indeed return",
        "page_index": 1,
        "bbox": [
            53.798,
            216.14106719999998,
            294.0453355520001,
            225.1074672
        ],
        "match": 13
    },
    {
        "content": "drastically better solutions than the baseline algorithms.",
        "page_index": 1,
        "bbox": [
            53.798,
            205.18206719999998,
            259.48721600000005,
            214.1484672
        ],
        "match": 13
    },
    {
        "content": "2 RELATED WORK",
        "page_index": 1,
        "bbox": [
            53.798,
            161.5849979,
            157.58717740000003,
            172.49409789999999
        ],
        "match": 14
    },
    {
        "content": "Different variants of the DAG scheduling problem have been stud\u2212",
        "page_index": 1,
        "bbox": [
            53.798,
            150.3880672,
            295.5612310016,
            159.35446720000002
        ],
        "match": 15
    },
    {
        "content": "methods that aim to directly minimize the cost function (such as",
        "page_index": 1,
        "bbox": [
            317.955,
            238.0590672,
            558.204128832,
            247.0254672
        ],
        "match": 20
    },
    {
        "content": "local search and ILP representations).",
        "page_index": 1,
        "bbox": [
            317.955,
            227.10006719999998,
            454.7194992,
            236.0664672
        ],
        "match": 20
    },
    {
        "content": "3 PROBLEM DEFINITION AND BACKGROUND",
        "page_index": 1,
        "bbox": [
            317.955,
            199.1939979,
            558.2032955335,
            210.1030979
        ],
        "match": 21
    },
    {
        "content": "3.1 Preliminaries",
        "page_index": 1,
        "bbox": [
            317.955,
            183.5019979,
            410.2132587,
            194.4110979
        ],
        "match": 22
    },
    {
        "content": "We assume that our computation is represented by Directed Acyclic",
        "page_index": 1,
        "bbox": [
            317.525,
            172.3060672,
            558.2029020800001,
            181.27246720000002
        ],
        "match": 23
    },
    {
        "content": "Graph (DAG) \ud835\udc3a (\ud835\udc49 , \ud835\udc38). The nodes of the DAG correspond to subtasks",
        "page_index": 1,
        "bbox": [
            317.955,
            160.0021072,
            558.201771136,
            170.31346720000002
        ],
        "match": 23
    },
    {
        "content": "or operations we need to execute, and the directed edges correspond",
        "page_index": 1,
        "bbox": [
            317.955,
            150.3880672,
            558.2023355520001,
            159.35446720000002
        ],
        "match": 23
    },
    {
        "content": "ied thoroughly since the 1960s. In the first decades, research has",
        "page_index": 1,
        "bbox": [
            53.798,
            139.4290672,
            294.0471288320001,
            148.3954672
        ],
        "match": 15
    },
    {
        "content": "to dependencies between these operations: an edge from node \ud835\udc62",
        "page_index": 1,
        "bbox": [
            317.955,
            139.3483696,
            557.6594944000001,
            148.3954672
        ],
        "match": 23
    },
    {
        "content": "mostly focused on very simple settings that either do not consider",
        "page_index": 1,
        "bbox": [
            53.798,
            128.4700672,
            294.2139576704,
            137.4364672
        ],
        "match": 15
    },
    {
        "content": "to node \ud835\udc63 implies that the execution of \ud835\udc62 has to be finished before",
        "page_index": 1,
        "bbox": [
            317.955,
            128.3893696,
            558.2036242816,
            137.4364672
        ],
        "match": 23
    },
    {
        "content": "communication costs (motivated by the PRAM model), or only cap\u2212",
        "page_index": 1,
        "bbox": [
            53.798,
            117.5110672,
            295.55671193600006,
            126.47746719999999
        ],
        "match": 15
    },
    {
        "content": "the execution of \ud835\udc63 begins, because the output of \ud835\udc62 is required as an",
        "page_index": 1,
        "bbox": [
            317.955,
            117.43036959999999,
            558.2052585216,
            126.47746719999999
        ],
        "match": 23
    },
    {
        "content": "ture it as a fixed delay, independently of communication volume.",
        "page_index": 1,
        "bbox": [
            53.798,
            106.5520672,
            295.4281337600001,
            115.51846719999999
        ],
        "match": 15
    },
    {
        "content": "input for \ud835\udc63. We denote the number of nodes by \ud835\udc5b.",
        "page_index": 1,
        "bbox": [
            317.955,
            106.47136959999999,
            497.74460799999997,
            115.51846719999999
        ],
        "match": 23
    },
    {
        "content": "In terms of theoretical results, scheduling is known to be already",
        "page_index": 1,
        "bbox": [
            53.798,
            95.59306720000001,
            294.280075904,
            104.5594672
        ],
        "match": 15
    },
    {
        "content": "Besides the structure of the DAG, our computation is described",
        "page_index": 1,
        "bbox": [
            327.918,
            95.59306720000001,
            558.199540608,
            104.5594672
        ],
        "match": 24
    },
    {
        "content": "NP\u2212hard in these simple models, and on special subclasses of DAGs",
        "page_index": 1,
        "bbox": [
            53.798,
            84.63506720000001,
            294.0453355519999,
            93.6014672
        ],
        "match": 15
    },
    {
        "content": "by two parameters for each node \ud835\udc63: the computation weight \ud835\udc64 (\ud835\udc63)",
        "page_index": 1,
        "bbox": [
            317.955,
            83.29010720000001,
            557.7538111999999,
            93.6014672
        ],
        "match": 24
    },
    {
        "content": "2",
        "page_index": 1,
        "bbox": [
            304.3789999999999,
            72.68305240000001,
            307.6218169999999,
            79.6568524
        ],
        "match": 15
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 2,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "(also called work weight) is the amount of time required to execute",
        "page_index": 2,
        "bbox": [
            53.529,
            696.2528624,
            294.0417985792,
            707.2994672
        ],
        "match": 24
    },
    {
        "content": "operation \ud835\udc63 on a processor, and the communication weight \ud835\udc50 (\ud835\udc63) is",
        "page_index": 2,
        "bbox": [
            53.798,
            685.2938624000001,
            294.044692256,
            696.3404672
        ],
        "match": 24
    },
    {
        "content": "the amount of communication required to send the output of \ud835\udc63 to",
        "page_index": 2,
        "bbox": [
            53.798,
            676.3343696,
            294.044915136,
            685.3814672
        ],
        "match": 24
    },
    {
        "content": "computation communication",
        "page_index": 2,
        "bbox": [
            355.75896494,
            682.009020831954,
            470.987880812602,
            690.069435704954
        ],
        "match": 55
    },
    {
        "content": "computation",
        "page_index": 2,
        "bbox": [
            497.97435693,
            682.822781681954,
            535.497531461094,
            690.069435704954
        ],
        "match": 24
    },
    {
        "content": "superstep 1",
        "page_index": 2,
        "bbox": [
            393.90934651,
            699.368810200687,
            431.222368074427,
            706.615464223687
        ],
        "match": 30
    },
    {
        "content": "superstep 2",
        "page_index": 2,
        "bbox": [
            516.19623536,
            699.368810200687,
            553.509256924427,
            706.615464223687
        ],
        "match": 33
    },
    {
        "content": "another processor (e.g. its size in bytes). These weights can differ",
        "page_index": 2,
        "bbox": [
            53.798,
            665.4560672,
            294.2158944128001,
            674.4224672
        ],
        "match": 24
    },
    {
        "content": "significantly between the different nodes, so they are both crucial",
        "page_index": 2,
        "bbox": [
            53.798,
            654.4980671999999,
            294.04499482880004,
            663.4644672
        ],
        "match": 24
    },
    {
        "content": "to include in our model. Note that we consider the communication",
        "page_index": 2,
        "bbox": [
            53.798,
            643.5390672,
            294.04659084800005,
            652.5054672
        ],
        "match": 24
    },
    {
        "content": "weight \ud835\udc50 (\ud835\udc63) to be a property of each node of the DAG (in contrast",
        "page_index": 2,
        "bbox": [
            53.467,
            631.2351071999999,
            294.04745504000005,
            641.5464671999999
        ],
        "match": 24
    },
    {
        "content": "to e.g. [27], where it is assigned to the edges). For simplicity, we",
        "page_index": 2,
        "bbox": [
            53.798,
            621.6210672,
            294.047342464,
            630.5874672
        ],
        "match": 24
    },
    {
        "content": "assume that node weights are integers.",
        "page_index": 2,
        "bbox": [
            53.798,
            610.6620671999999,
            196.02303680000003,
            619.6284671999999
        ],
        "match": 24
    },
    {
        "content": "1",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            655.353962413707,
            326.900998619313,
            659.078742581529
        ],
        "match": 18
    },
    {
        "content": ".",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            651.774115326345,
            326.900998619313,
            653.542298907957
        ],
        "match": 24
    },
    {
        "content": "c",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            648.469641091857,
            326.900998619313,
            651.774115326345
        ],
        "match": 24
    },
    {
        "content": "ro",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            641.382413457363,
            326.900998619313,
            648.418914513696
        ],
        "match": 24
    },
    {
        "content": "p",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            637.17210747,
            326.900998619313,
            641.382413457363
        ],
        "match": 24
    },
    {
        "content": "2",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            610.062488423707,
            326.900998619313,
            613.787268591529
        ],
        "match": 27
    },
    {
        "content": ".",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            606.4826413363451,
            326.900998619313,
            608.2508249179571
        ],
        "match": 24
    },
    {
        "content": "c",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            603.1781671018571,
            326.900998619313,
            606.4826413363451
        ],
        "match": 24
    },
    {
        "content": "ro",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            596.090939467363,
            326.900998619313,
            603.127440523696
        ],
        "match": 24
    },
    {
        "content": "p",
        "page_index": 2,
        "bbox": [
            319.654344596313,
            591.88063348,
            326.900998619313,
            596.090939467363
        ],
        "match": 24
    },
    {
        "content": "3.2 The BSP model",
        "page_index": 2,
        "bbox": [
            53.798,
            568.0599978999999,
            153.5289922,
            578.9690979
        ],
        "match": 26
    },
    {
        "content": "The BSP model assumes that the computational steps are organized",
        "page_index": 2,
        "bbox": [
            53.529,
            556.8640671999999,
            294.0487347840001,
            565.8304671999999
        ],
        "match": 26
    },
    {
        "content": "into so\u2212called supersteps. Each superstep consists of the following",
        "page_index": 2,
        "bbox": [
            53.798,
            543.8248624,
            294.046747008,
            554.8714672
        ],
        "match": 26
    },
    {
        "content": "two phases:",
        "page_index": 2,
        "bbox": [
            53.798,
            534.9460672,
            96.7111904,
            543.9124672
        ],
        "match": 26
    },
    {
        "content": "(1) Computation phase: each processor can execute an arbitrary",
        "page_index": 2,
        "bbox": [
            67.93,
            517.9218624,
            294.27452832000006,
            528.9684672000001
        ],
        "match": 27
    },
    {
        "content": "amount of computation, but no communication is allowed.",
        "page_index": 2,
        "bbox": [
            82.425,
            509.0430672,
            295.34558173440007,
            518.0094672
        ],
        "match": 27
    },
    {
        "content": "(2) Communication phase: processors can communicate any",
        "page_index": 2,
        "bbox": [
            67.93,
            491.0228624,
            294.27625216,
            502.06946719999996
        ],
        "match": 27
    },
    {
        "content": "number of values to each other, but no computation hap\u2212",
        "page_index": 2,
        "bbox": [
            82.425,
            482.1440672,
            295.557045312,
            491.11046719999996
        ],
        "match": 27
    },
    {
        "content": "pens.",
        "page_index": 2,
        "bbox": [
            82.425,
            471.1850672,
            101.47859999999999,
            480.15146719999996
        ],
        "match": 27
    },
    {
        "content": "Figure 1: Example BSP scheduling of a DAG.",
        "page_index": 2,
        "bbox": [
            348.688,
            562.4767616,
            527.4690496,
            571.4431616
        ],
        "match": 34
    },
    {
        "content": "An example for a BSP scheduling of a DAG is illustrated in Figure",
        "page_index": 2,
        "bbox": [
            327.918,
            535.5930672,
            558.200795904,
            544.5594672
        ],
        "match": 33
    },
    {
        "content": "1. In the computation phase, processors 1 and 2 execute 4 and 5",
        "page_index": 2,
        "bbox": [
            317.749,
            524.6340672,
            558.20176352,
            533.6004672
        ],
        "match": 33
    },
    {
        "content": "operations (nodes), respectively; then in the communication phase,",
        "page_index": 2,
        "bbox": [
            317.955,
            513.6750672,
            559.1845777728001,
            522.6414672
        ],
        "match": 33
    },
    {
        "content": "processor 1 needs to send one value to processor 2, while processor",
        "page_index": 2,
        "bbox": [
            317.955,
            502.71706720000003,
            558.3707777919999,
            511.6834672
        ],
        "match": 33
    },
    {
        "content": "2 needs to send two values to processor 1 (to make these available",
        "page_index": 2,
        "bbox": [
            317.955,
            491.7580672,
            558.2024855167999,
            500.7244672
        ],
        "match": 33
    },
    {
        "content": "on the given processors for superstep 2). After this, the computation",
        "page_index": 2,
        "bbox": [
            317.955,
            480.7990672,
            558.20325952,
            489.7654672
        ],
        "match": 33
    },
    {
        "content": "phase of superstep 2 can begin.",
        "page_index": 2,
        "bbox": [
            317.955,
            469.8400672,
            432.07922399999995,
            478.8064672
        ],
        "match": 33
    },
    {
        "content": "Intuitively, supersteps correspond to larger batches of computa\u2212",
        "page_index": 2,
        "bbox": [
            63.761,
            456.24106720000003,
            295.5623185088001,
            465.2074672
        ],
        "match": 28
    },
    {
        "content": "tions that are executed consecutively on a single processor, without",
        "page_index": 2,
        "bbox": [
            53.798,
            445.28206720000003,
            294.045335552,
            454.2484672
        ],
        "match": 28
    },
    {
        "content": "3.3 Cost in BSP",
        "page_index": 2,
        "bbox": [
            317.955,
            445.9819979,
            400.03506839999994,
            456.89109790000003
        ],
        "match": 36
    },
    {
        "content": "any interruption for communication. Dividing the computations",
        "page_index": 2,
        "bbox": [
            53.798,
            434.3230672,
            294.04712883200006,
            443.2894672
        ],
        "match": 28
    },
    {
        "content": "Another advantage of BSP is that in contrast to classical models,",
        "page_index": 2,
        "bbox": [
            317.641,
            434.7850672,
            559.1888222080001,
            443.7514672
        ],
        "match": 36
    },
    {
        "content": "into such batches is often beneficial in practice, since the communi\u2212",
        "page_index": 2,
        "bbox": [
            53.798,
            423.3640672,
            295.556711936,
            432.3304672
        ],
        "match": 28
    },
    {
        "content": "BSP assigns a simple cost metric to each superstep, and the total",
        "page_index": 2,
        "bbox": [
            317.955,
            423.8260672,
            558.204128832,
            432.7924672
        ],
        "match": 36
    },
    {
        "content": "cation often comes with a significant overhead that is independent",
        "page_index": 2,
        "bbox": [
            53.798,
            412.4050672,
            294.04659084800005,
            421.3714672
        ],
        "match": 28
    },
    {
        "content": "time required (i.e. total cost of a schedule) can be obtained by simply",
        "page_index": 2,
        "bbox": [
            317.955,
            412.8670672,
            558.4307994239999,
            421.8334672
        ],
        "match": 36
    },
    {
        "content": "of the number of communicated values, due to e.g. synchronization",
        "page_index": 2,
        "bbox": [
            53.798,
            401.4460672,
            294.0453355520001,
            410.4124672
        ],
        "match": 28
    },
    {
        "content": "summing up the costs of the individual supersteps.",
        "page_index": 2,
        "bbox": [
            317.955,
            401.9080672,
            503.7567408,
            410.87446719999997
        ],
        "match": 36
    },
    {
        "content": "or network initialization.",
        "page_index": 2,
        "bbox": [
            53.798,
            390.4880672,
            145.300112,
            399.45446719999995
        ],
        "match": 28
    },
    {
        "content": "In the computation phase of each superstep, the subtasks as\u2212",
        "page_index": 2,
        "bbox": [
            327.918,
            390.95006720000003,
            559.7164761600001,
            399.9164672
        ],
        "match": 37
    },
    {
        "content": "Our computing architecture in BSP is described by three parame\u2212",
        "page_index": 2,
        "bbox": [
            63.761,
            379.52906720000004,
            295.56395936000007,
            388.4954672
        ],
        "match": 29
    },
    {
        "content": "signed to each processor are executed by the processors simulta\u2212",
        "page_index": 2,
        "bbox": [
            317.955,
            379.99106720000003,
            559.7131739520001,
            388.9574672
        ],
        "match": 37
    },
    {
        "content": "ters: the number \ud835\udc43 of processors available, the time cost \ud835\udc54 of sending",
        "page_index": 2,
        "bbox": [
            53.798,
            368.48936960000003,
            294.044850688,
            377.5364672
        ],
        "match": 29
    },
    {
        "content": "neously; as such, the cost of a computation phase is defined as the",
        "page_index": 2,
        "bbox": [
            317.955,
            369.03206720000003,
            558.2017886016,
            377.9984672
        ],
        "match": 37
    },
    {
        "content": "a single unit of data between processors, and a fixed overhead cost",
        "page_index": 2,
        "bbox": [
            53.798,
            357.61106720000004,
            294.0465908480001,
            366.5774672
        ],
        "match": 29
    },
    {
        "content": "maximum work assigned to any processor in the superstep, i.e.",
        "page_index": 2,
        "bbox": [
            317.955,
            358.0730672,
            548.1673200000001,
            367.0394672
        ],
        "match": 37
    },
    {
        "content": "\u2113 (called the latency) incurred by each superstep.",
        "page_index": 2,
        "bbox": [
            53.762,
            344.57186240000004,
            231.59678880000004,
            355.6184672
        ],
        "match": 29
    },
    {
        "content": "When applying the BSP model to DAG scheduling, our schedule",
        "page_index": 2,
        "bbox": [
            63.761,
            335.69306720000003,
            294.043795904,
            344.6594672
        ],
        "match": 30
    },
    {
        "content": "must respect the dependencies described by the edges of the DAG.",
        "page_index": 2,
        "bbox": [
            53.798,
            324.7340672,
            295.4275419776,
            333.7004672
        ],
        "match": 30
    },
    {
        "content": "This means that a node \ud835\udc63 can only be computed on processor \ud835\udc5d",
        "page_index": 2,
        "bbox": [
            53.529,
            313.6943696,
            293.41256960000004,
            322.7414672
        ],
        "match": 30
    },
    {
        "content": "in superstep \ud835\udc60 if the output values from all its direct predecessors",
        "page_index": 2,
        "bbox": [
            53.798,
            302.7353696,
            294.04800192000005,
            311.7824672
        ],
        "match": 30
    },
    {
        "content": "are already present on \ud835\udc5d: that is, they were either computed on",
        "page_index": 2,
        "bbox": [
            53.798,
            291.7763696,
            294.0414217600001,
            300.8234672
        ],
        "match": 30
    },
    {
        "content": "\ud835\udc5d in an earlier (or the same) superstep, or they were sent to \ud835\udc5d by",
        "page_index": 2,
        "bbox": [
            53.619,
            280.8183696,
            294.27789382400005,
            289.86546719999996
        ],
        "match": 30
    },
    {
        "content": "another processor before superstep \ud835\udc60. In the communication phases,",
        "page_index": 2,
        "bbox": [
            53.798,
            269.85936960000004,
            295.027282112,
            278.9064672
        ],
        "match": 30
    },
    {
        "content": "a processor \ud835\udc5d can send the output value of any node \ud835\udc63 if it is already",
        "page_index": 2,
        "bbox": [
            53.798,
            258.90036960000003,
            294.27517356799996,
            267.9474672
        ],
        "match": 30
    },
    {
        "content": "present on \ud835\udc5d, to any other processor(s).",
        "page_index": 2,
        "bbox": [
            53.798,
            247.9413696,
            196.90644000000006,
            256.9884672
        ],
        "match": 30
    },
    {
        "content": "Formally, a BSP schedule of a DAG consists of (i) an assign\u2212",
        "page_index": 2,
        "bbox": [
            63.761,
            237.06306719999998,
            295.5594761599999,
            246.0294672
        ],
        "match": 31
    },
    {
        "content": "ment of nodes to processors \ud835\udf0b : \ud835\udc49 \u2192 {1, . . . , \ud835\udc43 } and supersteps",
        "page_index": 2,
        "bbox": [
            53.798,
            224.75910720000002,
            294.045081472,
            235.07046720000002
        ],
        "match": 31
    },
    {
        "content": "\ud835\udf0f : \ud835\udc49 \u2192 N, and (ii) a communication schedule \u0393, i.e. a set of 4\u2212tuples",
        "page_index": 2,
        "bbox": [
            53.395,
            213.8001072,
            294.04473696,
            224.1294
        ],
        "match": 31
    },
    {
        "content": "(\ud835\udc63, \ud835\udc5d1, \ud835\udc5d2, \ud835\udc60), indicating that the output of node \ud835\udc63 is sent from pro\u2212",
        "page_index": 2,
        "bbox": [
            54.247,
            202.8411072,
            295.558416384,
            213.15246720000002
        ],
        "match": 31
    },
    {
        "content": "cessor \ud835\udc5d1 to processor \ud835\udc5d2 in the communication phase of superstep",
        "page_index": 2,
        "bbox": [
            53.798,
            191.8854546,
            294.04460806400004,
            202.19346720000001
        ],
        "match": 31
    },
    {
        "content": "\ud835\udc60. A valid BSP schedule then must satisfy the conditions discussed",
        "page_index": 2,
        "bbox": [
            53.44,
            182.1873696,
            294.04217942400004,
            191.2344672
        ],
        "match": 31
    },
    {
        "content": "above, i.e.",
        "page_index": 2,
        "bbox": [
            53.798,
            171.3100672,
            89.67256640000001,
            180.2764672
        ],
        "match": 31
    },
    {
        "content": "\u2022 For each edge (\ud835\udc62, \ud835\udc63) of \ud835\udc3a, in case of \ud835\udf0b (\ud835\udc62) = \ud835\udf0b (\ud835\udc63), we must",
        "page_index": 2,
        "bbox": [
            72.987,
            154.79694719999998,
            294.04281748479997,
            165.3324672
        ],
        "match": 32
    },
    {
        "content": "have \ud835\udf0f (\ud835\udc62) \u2264 \ud835\udf0f (\ud835\udc63), and in case of \ud835\udf0b (\ud835\udc62) \u2260 \ud835\udf0b (\ud835\udc63), we must",
        "page_index": 2,
        "bbox": [
            82.425,
            143.8379472,
            294.04438432,
            154.37346720000002
        ],
        "match": 32
    },
    {
        "content": "have an entry (\ud835\udc62, \ud835\udc5d1, \ud835\udf0b (\ud835\udc63), \ud835\udc60) \u2208 \u0393 for some processor \ud835\udc5d1 and",
        "page_index": 2,
        "bbox": [
            82.425,
            133.1031072,
            294.04454336,
            143.4324
        ],
        "match": 32
    },
    {
        "content": "some superstep \ud835\udc60 < \ud835\udf0f (\ud835\udc63).",
        "page_index": 2,
        "bbox": [
            82.425,
            122.14410720000001,
            173.124608,
            132.45546720000002
        ],
        "match": 32
    },
    {
        "content": "\u2022 For each (\ud835\udc63, \ud835\udc5d1, \ud835\udc5d2, \ud835\udc60) \u2208 \u0393, we must either have \ud835\udf0b (\ud835\udc63) = \ud835\udc5d1",
        "page_index": 2,
        "bbox": [
            72.98699999999998,
            104.9829472,
            293.7138055,
            115.53639999999999
        ],
        "match": 32
    },
    {
        "content": "and \ud835\udf0f (\ud835\udc63) \u2264 \ud835\udc60, or we must have another (\ud835\udc63, \ud835\udc5d\u2032, \ud835\udc5d1, \ud835\udc60\u2032) \u2208 \u0393",
        "page_index": 2,
        "bbox": [
            82.425,
            94.2481072,
            293.68630079999997,
            105.0332496
        ],
        "match": 32
    },
    {
        "content": "with \ud835\udc60\u2032 < \ud835\udc60.",
        "page_index": 2,
        "bbox": [
            82.09299999999996,
            84.5533696,
            124.13360799999995,
            94.0742496
        ],
        "match": 32
    },
    {
        "content": "\ud835\udc36\ud835\udc64\ud835\udc5c\ud835\udc5f\ud835\udc58 (\ud835\udc60) = max\ud835\udc5d \u2208 {1,...,\ud835\udc43 }",
        "page_index": 2,
        "bbox": [
            373.073,
            333.7595496,
            450.87107969999994,
            350.5594672
        ],
        "match": null
    },
    {
        "content": "\u2211\ufe01",
        "page_index": 2,
        "bbox": [
            460.18199999999996,
            345.2985632,
            472.04454719999995,
            354.2649632
        ],
        "match": null
    },
    {
        "content": "\ud835\udc64 (\ud835\udc63) .",
        "page_index": 2,
        "bbox": [
            480.488,
            340.2481072,
            502.39360800000003,
            350.47876959999996
        ],
        "match": null
    },
    {
        "content": "\ud835\udf0b (\ud835\udc63)=\ud835\udc5d",
        "page_index": 2,
        "bbox": [
            454.22399999999993,
            329.11473209999997,
            477.40171289999995,
            337.5947003
        ],
        "match": null
    },
    {
        "content": "\ud835\udf0f (\ud835\udc63)=\ud835\udc60",
        "page_index": 2,
        "bbox": [
            455.111,
            321.04973209999997,
            476.26008,
            329.5297003
        ],
        "match": null
    },
    {
        "content": "On the other hand, communication costs are measured by the so\u2212",
        "page_index": 2,
        "bbox": [
            327.918,
            308.6440672,
            559.7209593600002,
            317.61046719999996
        ],
        "match": 38
    },
    {
        "content": "called \u210e\u2212relation metric, where the cost of a communication phase",
        "page_index": 2,
        "bbox": [
            317.955,
            295.6048624,
            558.2053244416,
            306.65146719999996
        ],
        "match": 38
    },
    {
        "content": "is determined by the maximum amount of data sent or received by",
        "page_index": 2,
        "bbox": [
            317.955,
            286.72606720000005,
            558.4355157504001,
            295.6924672
        ],
        "match": 38
    },
    {
        "content": "any processor. That is, the send cost and receive cost, respectively,",
        "page_index": 2,
        "bbox": [
            317.955,
            275.76706720000004,
            559.1923875072001,
            284.7334672
        ],
        "match": 38
    },
    {
        "content": "of processor \ud835\udc5d in superstep \ud835\udc60 is",
        "page_index": 2,
        "bbox": [
            317.955,
            264.72736960000003,
            430.6977904,
            273.7744672
        ],
        "match": 38
    },
    {
        "content": "\ud835\udc36\ud835\udc60\ud835\udc52\ud835\udc5b\ud835\udc51 (\ud835\udc5d, \ud835\udc60) = \u2211\ufe01",
        "page_index": 2,
        "bbox": [
            380.04799999999994,
            246.30300030000004,
            458.2795471999999,
            261.00096320000006
        ],
        "match": 45
    },
    {
        "content": "\ud835\udc50 (\ud835\udc63) ,",
        "page_index": 2,
        "bbox": [
            476.906,
            246.98410720000004,
            495.48160800000005,
            257.2147696
        ],
        "match": null
    },
    {
        "content": "(\ud835\udc63,\ud835\udc5d1,\ud835\udc5d2,\ud835\udc601 ) \u2208\u0393\ud835\udc5d1=\ud835\udc5d\ud835\udc601=\ud835\udc60",
        "page_index": 2,
        "bbox": [
            430.95699999999994,
            223.32373210000006,
            474.0295318999999,
            244.41070000000002
        ],
        "match": null
    },
    {
        "content": "\ud835\udc36\ud835\udc5f\ud835\udc52\ud835\udc50 (\ud835\udc5d, \ud835\udc60) = \u2211\ufe01",
        "page_index": 2,
        "bbox": [
            382.40200000000004,
            206.29894720000001,
            455.9245472,
            220.53996320000005
        ],
        "match": 45
    },
    {
        "content": "\ud835\udc50 (\ud835\udc63) ,",
        "page_index": 2,
        "bbox": [
            474.5520000000001,
            206.52310720000003,
            493.12660800000003,
            216.75376960000003
        ],
        "match": null
    },
    {
        "content": "(\ud835\udc63,\ud835\udc5d1,\ud835\udc5d2,\ud835\udc601 ) \u2208\u0393\ud835\udc5d2=\ud835\udc5d\ud835\udc601=\ud835\udc60",
        "page_index": 2,
        "bbox": [
            428.603,
            182.86273210000004,
            471.6755319,
            203.9497
        ],
        "match": null
    },
    {
        "content": "and the communication cost of superstep \ud835\udc60 is",
        "page_index": 2,
        "bbox": [
            317.95500000000004,
            172.61636960000004,
            482.61779040000005,
            181.66346720000004
        ],
        "match": 39
    },
    {
        "content": "\ud835\udc36\ud835\udc50\ud835\udc5c\ud835\udc5a\ud835\udc5a (\ud835\udc60) = max\ud835\udc5d \u2208 {1,...,\ud835\udc43 }",
        "page_index": 2,
        "bbox": [
            341.759,
            149.71154960000004,
            421.8080797,
            166.51146720000006
        ],
        "match": null
    },
    {
        "content": "max (\ud835\udc36\ud835\udc60\ud835\udc52\ud835\udc5b\ud835\udc51 (\ud835\udc5d, \ud835\udc60), \ud835\udc36\ud835\udc5f\ud835\udc52\ud835\udc50 (\ud835\udc5d, \ud835\udc60)) .",
        "page_index": 2,
        "bbox": [
            425.23400000000004,
            155.51900030000004,
            533.707608,
            166.51146720000006
        ],
        "match": null
    },
    {
        "content": "The total cost of superstep \ud835\udc60 is then the sum of the work, communi\u2212",
        "page_index": 2,
        "bbox": [
            317.686,
            136.7743696,
            559.7180455680001,
            145.8214672
        ],
        "match": 40
    },
    {
        "content": "cation, and latency costs, defined as",
        "page_index": 2,
        "bbox": [
            317.955,
            125.89706720000001,
            448.6133808,
            134.8634672
        ],
        "match": 40
    },
    {
        "content": "and the cost of the whole schedule is obtained by simply summing",
        "page_index": 2,
        "bbox": [
            317.955,
            95.59306720000001,
            558.20565312,
            104.5594672
        ],
        "match": 41
    },
    {
        "content": "\ud835\udc36 (\ud835\udc60) = \ud835\udc36\ud835\udc64\ud835\udc5c\ud835\udc5f\ud835\udc58 (\ud835\udc60) + \ud835\udc54 \u00b7 \ud835\udc36\ud835\udc50\ud835\udc5c\ud835\udc5a\ud835\udc5a (\ud835\udc60) + \u2113 ,",
        "page_index": 2,
        "bbox": [
            371.726,
            108.7190003,
            503.80589280000004,
            119.63076960000001
        ],
        "match": null
    },
    {
        "content": "up \ud835\udc36 (\ud835\udc60) for all the supersteps.",
        "page_index": 2,
        "bbox": [
            317.955,
            83.29010720000001,
            426.771328,
            93.6014672
        ],
        "match": 41
    },
    {
        "content": "3",
        "page_index": 2,
        "bbox": [
            304.37899999999996,
            72.68305240000001,
            307.62181699999996,
            79.6568524
        ],
        "match": 18
    },
    {
        "content": "For more details on the properties and the different variants of",
        "page_index": 3,
        "bbox": [
            63.761,
            698.3330672,
            294.0408190592001,
            707.2994672
        ],
        "match": 42
    },
    {
        "content": "this model, we refer the reader to [28].",
        "page_index": 3,
        "bbox": [
            53.798,
            687.3740672,
            194.61531200000005,
            696.3404672
        ],
        "match": 42
    },
    {
        "content": "3.4 NUMA effects",
        "page_index": 3,
        "bbox": [
            53.798,
            657.4749979,
            147.60535090000002,
            668.3840979
        ],
        "match": 43
    },
    {
        "content": "BSP already captures communications more realistically than most",
        "page_index": 3,
        "bbox": [
            53.798,
            646.2780672,
            294.0425559680001,
            655.2444672
        ],
        "match": 44
    },
    {
        "content": "classical models. However, one significant drawback of BSP is that",
        "page_index": 3,
        "bbox": [
            53.798,
            635.3190672,
            294.04361400320005,
            644.2854672
        ],
        "match": 44
    },
    {
        "content": "it assumes a uniform communication cost between any pair of",
        "page_index": 3,
        "bbox": [
            53.798,
            624.3610672,
            294.04712883200017,
            633.3274672
        ],
        "match": 44
    },
    {
        "content": "processors. In contrast to this, today\u2019s computing architectures very",
        "page_index": 3,
        "bbox": [
            53.798,
            613.4020671999999,
            294.2737994240001,
            622.3684671999999
        ],
        "match": 44
    },
    {
        "content": "often exhibit a hierarchical structure: each processor has multiple",
        "page_index": 3,
        "bbox": [
            53.798,
            602.4430672,
            294.0480434048001,
            611.4094672
        ],
        "match": 44
    },
    {
        "content": "cores, each machine has multiple processors, and maybe multiple",
        "page_index": 3,
        "bbox": [
            53.798,
            591.4840671999999,
            294.04196418560014,
            600.4504671999999
        ],
        "match": 44
    },
    {
        "content": "machines are connected over a network. This hierarchical structure",
        "page_index": 3,
        "bbox": [
            53.798,
            580.5250672,
            294.04533555200004,
            589.4914672
        ],
        "match": 44
    },
    {
        "content": "results in a non\u2212uniform memory access setting, where the cost",
        "page_index": 3,
        "bbox": [
            53.798,
            569.5660671999999,
            294.04712883200006,
            578.5324671999999
        ],
        "match": 44
    },
    {
        "content": "of sending a piece of data heavily depends on the concrete pair",
        "page_index": 3,
        "bbox": [
            53.798,
            558.6070672,
            294.21175193600004,
            567.5734672
        ],
        "match": 44
    },
    {
        "content": "of processing units that communicate: sending a value between",
        "page_index": 3,
        "bbox": [
            53.798,
            547.6480672,
            294.04712883200017,
            556.6144672
        ],
        "match": 44
    },
    {
        "content": "two cores on the same processor is relatively low, whereas sending",
        "page_index": 3,
        "bbox": [
            53.798,
            536.6890672,
            294.0453355520001,
            545.6554672
        ],
        "match": 44
    },
    {
        "content": "the same data over the highest level of the hierarchy (e.g. over the",
        "page_index": 3,
        "bbox": [
            53.798,
            525.7300672,
            294.04608872960006,
            534.6964672
        ],
        "match": 44
    },
    {
        "content": "network) is drastically higher.",
        "page_index": 3,
        "bbox": [
            53.798,
            514.7720671999999,
            163.25981119999997,
            523.7384672
        ],
        "match": 44
    },
    {
        "content": "This asymmetry between the processors is often a defining aspect",
        "page_index": 3,
        "bbox": [
            63.761,
            503.81306720000003,
            294.043795904,
            512.7794672
        ],
        "match": 45
    },
    {
        "content": "of the scheduling problem in practice. Due to this, we also extend",
        "page_index": 3,
        "bbox": [
            53.798,
            492.85406720000003,
            294.04146206720014,
            501.8204672
        ],
        "match": 45
    },
    {
        "content": "the BSP model which such NUMA effects, and further analyze",
        "page_index": 3,
        "bbox": [
            53.798,
            481.8950672,
            294.047128832,
            490.8614672
        ],
        "match": 45
    },
    {
        "content": "the impact of this in our experiments. The BSP definition above",
        "page_index": 3,
        "bbox": [
            53.798,
            470.9360672,
            294.047128832,
            479.9024672
        ],
        "match": 45
    },
    {
        "content": "is straightforward to extend to this setting: if the cost \ud835\udf06\ud835\udc5d1,\ud835\udc5d2 of",
        "page_index": 3,
        "bbox": [
            53.798,
            457.54804099999996,
            294.04462259200005,
            468.9434672
        ],
        "match": 45
    },
    {
        "content": "communicating a single unit of data is known for each pair of",
        "page_index": 3,
        "bbox": [
            53.798,
            449.0180672,
            294.0471288320001,
            457.9844672
        ],
        "match": 45
    },
    {
        "content": "processors (\ud835\udc5d1, \ud835\udc5d2), then we can simply add \ud835\udf06\ud835\udc5d1,\ud835\udc5d2 as a further",
        "page_index": 3,
        "bbox": [
            53.798,
            435.63004099999995,
            294.21425311999997,
            447.0254672
        ],
        "match": 45
    },
    {
        "content": "factor in the formulas defining \ud835\udc36\ud835\udc60\ud835\udc52\ud835\udc5b\ud835\udc51 (\ud835\udc5d, \ud835\udc60) and \ud835\udc36\ud835\udc5f\ud835\udc52\ud835\udc50 (\ud835\udc5d, \ud835\udc60) above. The",
        "page_index": 3,
        "bbox": [
            53.798,
            425.0740003,
            294.04544,
            436.0664672
        ],
        "match": 45
    },
    {
        "content": "values \ud835\udf06\ud835\udc5d1,\ud835\udc5d2 then become further input parameters of the problem;",
        "page_index": 3,
        "bbox": [
            53.574,
            413.713041,
            294.6838995840001,
            425.1074672
        ],
        "match": 45
    },
    {
        "content": "we can specify them either directly for each pair of processors,",
        "page_index": 3,
        "bbox": [
            53.467,
            405.1820672,
            295.033113664,
            414.14846719999997
        ],
        "match": 45
    },
    {
        "content": "or implicitly through a hierarchy. Note that the default case of",
        "page_index": 3,
        "bbox": [
            53.798,
            394.22406720000004,
            294.04712883200017,
            403.1904672
        ],
        "match": 45
    },
    {
        "content": "uniform communication costs corresponds to a choice of \ud835\udf06\ud835\udc5d1,\ud835\udc5d2 = 1\nfor \ud835\udc5d1 \u2260 \ud835\udc5d2, and \ud835\udf06\ud835\udc5d1,\ud835\udc5d2 = 0 for \ud835\udc5d1 = \ud835\udc5d2.",
        "page_index": 3,
        "bbox": [
            53.798,
            369.87704099999996,
            294.251496608,
            392.2314672
        ],
        "match": 45
    },
    {
        "content": "3.5 Problem definition",
        "page_index": 3,
        "bbox": [
            53.79800000000003,
            342.40699789999996,
            172.0962804,
            353.3160979
        ],
        "match": 47
    },
    {
        "content": "Altogether, the input of our problem is (i) a DAG with node weights",
        "page_index": 3,
        "bbox": [
            53.484,
            331.2100672,
            294.04767014400005,
            340.1764672
        ],
        "match": 47
    },
    {
        "content": "\ud835\udc64 (\ud835\udc63) and \ud835\udc50 (\ud835\udc63), and (ii) a machine description with the parameters",
        "page_index": 3,
        "bbox": [
            53.368,
            318.9061072,
            294.0481571392001,
            329.2174672
        ],
        "match": 47
    },
    {
        "content": "\ud835\udc43, \ud835\udc54 and \u2113, and possibly \ud835\udf06\ud835\udc5d1,\ud835\udc5d2 for all pairs of processors \ud835\udc5d1, \ud835\udc5d2. Our",
        "page_index": 3,
        "bbox": [
            53.664,
            306.86304099999995,
            294.21523904,
            318.2584672
        ],
        "match": 47
    },
    {
        "content": "goal is to find the best valid schedule in the BSP model, minimizing",
        "page_index": 3,
        "bbox": [
            53.798,
            298.3330672,
            294.04533555200004,
            307.2994672
        ],
        "match": 47
    },
    {
        "content": "the total cost.",
        "page_index": 3,
        "bbox": [
            53.798,
            287.3740672,
            103.2566624,
            296.3404672
        ],
        "match": 47
    },
    {
        "content": "We sometimes also discuss the communication scheduling sub\u2212",
        "page_index": 3,
        "bbox": [
            63.761,
            274.3348624,
            295.56031545599996,
            285.3814672
        ],
        "match": 48
    },
    {
        "content": "problem of optimizing \u0393 when \ud835\udf0b and \ud835\udf0f are already fixed, i.e. sorting",
        "page_index": 3,
        "bbox": [
            53.798,
            265.3753696,
            294.04292876799997,
            274.4404
        ],
        "match": 48
    },
    {
        "content": "the necessary communication steps into the given communication",
        "page_index": 3,
        "bbox": [
            53.798,
            254.49806719999998,
            294.04685984,
            263.4644672
        ],
        "match": 48
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 3,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": null
    },
    {
        "content": "\u2022 Cilk: this is a simple and yet efficient scheduling heuristic",
        "page_index": 3,
        "bbox": [
            337.144,
            696.7908464,
            558.2038731648,
            707.2994672
        ],
        "match": 53
    },
    {
        "content": "[5]; different variants of the same work\u2212stealing approach",
        "page_index": 3,
        "bbox": [
            346.582,
            687.3740672,
            558.1984131648001,
            696.3404672
        ],
        "match": 53
    },
    {
        "content": "are widely used in many of today\u2019s prominent parallel pro\u2212",
        "page_index": 3,
        "bbox": [
            346.582,
            676.4150672,
            559.713507328,
            685.3814672
        ],
        "match": 53
    },
    {
        "content": "gramming libraries and frameworks. While Cilk was origi\u2212",
        "page_index": 3,
        "bbox": [
            346.582,
            663.9138464,
            559.714846912,
            674.4224672
        ],
        "match": 53
    },
    {
        "content": "nally not defined on DAGs, it is easy to adapt to this case.",
        "page_index": 3,
        "bbox": [
            346.582,
            654.4980671999999,
            559.5865700032,
            663.4644672
        ],
        "match": 53
    },
    {
        "content": "Intuitively, Cilk maintains a stack of ready tasks for each",
        "page_index": 3,
        "bbox": [
            346.582,
            641.9968464,
            558.2004047104,
            652.5054672
        ],
        "match": 53
    },
    {
        "content": "processor to work on, and if a processor is idle (its stack is",
        "page_index": 3,
        "bbox": [
            346.582,
            632.5800671999999,
            558.2038883583999,
            641.5464671999999
        ],
        "match": 53
    },
    {
        "content": "empty), it \u201csteals\u201d a subtask from the bottom of a (randomly",
        "page_index": 3,
        "bbox": [
            346.582,
            621.6210672,
            558.4383059200001,
            630.5874672
        ],
        "match": 53
    },
    {
        "content": "chosen) other processor\u2019s stack. We use Cilk to represent",
        "page_index": 3,
        "bbox": [
            346.582,
            609.1198463999999,
            558.1991680512,
            619.6284671999999
        ],
        "match": 53
    },
    {
        "content": "the baseline from the practical/application side.",
        "page_index": 3,
        "bbox": [
            346.582,
            599.7030672,
            519.9742432,
            608.6694672
        ],
        "match": 53
    },
    {
        "content": "\u2022 BL\u2212EST and ETF: recent comparison studies have found that",
        "page_index": 3,
        "bbox": [
            337.144,
            581.2248463999999,
            558.200512832,
            591.7334672
        ],
        "match": 53
    },
    {
        "content": "the best scheduling algorithms are list\u2212based schedulers",
        "page_index": 3,
        "bbox": [
            346.582,
            571.8080672,
            558.205000192,
            580.7744672
        ],
        "match": 53
    },
    {
        "content": "[27, 41]. In particular, the so\u2212called BL\u2212EST and ETF sched\u2212",
        "page_index": 3,
        "bbox": [
            346.582,
            559.3068463999999,
            559.7174351232,
            569.8154672
        ],
        "match": 53
    },
    {
        "content": "ulers were found to be most efficient in earlier experiments;",
        "page_index": 3,
        "bbox": [
            346.582,
            549.8900672,
            558.8425112320001,
            558.8564672
        ],
        "match": 53
    },
    {
        "content": "they have also already been adapted to a setting with com\u2212",
        "page_index": 3,
        "bbox": [
            346.582,
            538.9310671999999,
            559.7188423360001,
            547.8974671999999
        ],
        "match": 53
    },
    {
        "content": "munication volume [27]. When scheduling the next node,",
        "page_index": 3,
        "bbox": [
            346.582,
            527.9720672,
            559.190353664,
            536.9384672
        ],
        "match": 53
    },
    {
        "content": "both BL\u2212EST and ETF assign the node to the processor that",
        "page_index": 3,
        "bbox": [
            346.582,
            515.4708463999999,
            558.1980805312,
            525.9794671999999
        ],
        "match": 53
    },
    {
        "content": "offers the earliest start time, based on previous assignments",
        "page_index": 3,
        "bbox": [
            346.582,
            506.0540672,
            558.201054976,
            515.0204672
        ],
        "match": 53
    },
    {
        "content": "and necessary communication steps. While BL\u2212EST always",
        "page_index": 3,
        "bbox": [
            346.582,
            493.5528464,
            558.2017886719999,
            504.0614672
        ],
        "match": 53
    },
    {
        "content": "selects the next node based on the longest outgoing path,",
        "page_index": 3,
        "bbox": [
            346.582,
            484.1360672,
            559.187493472,
            493.1024672
        ],
        "match": 53
    },
    {
        "content": "ETF selects the node with the earliest starting time.",
        "page_index": 3,
        "bbox": [
            346.582,
            471.63584640000005,
            533.3608784,
            482.1444672
        ],
        "match": 53
    },
    {
        "content": "\u2022 HDagg: a more recent and more advanced state\u2212of\u2212the\u2212art",
        "page_index": 3,
        "bbox": [
            337.14399999999995,
            454.69884640000004,
            558.1989389056,
            465.2074672
        ],
        "match": 53
    },
    {
        "content": "scheduler is the HDagg algorithm of Zarebavani et. al. [46].",
        "page_index": 3,
        "bbox": [
            346.582,
            443.73984640000003,
            559.582823168,
            454.2484672
        ],
        "match": 53
    },
    {
        "content": "HDagg is presented and analyzed in [46] for the specific",
        "page_index": 3,
        "bbox": [
            346.582,
            432.78084640000003,
            558.2034629120001,
            443.2894672
        ],
        "match": 53
    },
    {
        "content": "purpose of speeding up SpTRSV computations; however,",
        "page_index": 3,
        "bbox": [
            346.582,
            423.3640672,
            559.1927388160001,
            432.3304672
        ],
        "match": 53
    },
    {
        "content": "it is in fact a scheduling algorithm that can be applied to",
        "page_index": 3,
        "bbox": [
            346.582,
            412.4050672,
            558.2050001919999,
            421.3714672
        ],
        "match": 53
    },
    {
        "content": "any computational DAG. Moreover, HDagg considers a very",
        "page_index": 3,
        "bbox": [
            346.582,
            399.9038464,
            558.4329071359999,
            410.4124672
        ],
        "match": 53
    },
    {
        "content": "similar scheduling model to ours, sorting the nodes of the",
        "page_index": 3,
        "bbox": [
            346.582,
            390.4880672,
            558.1989747712,
            399.45446719999995
        ],
        "match": 53
    },
    {
        "content": "DAG into so\u2212called wavefronts (essentially equivalent to",
        "page_index": 3,
        "bbox": [
            346.582,
            379.52906720000004,
            558.2050001919999,
            388.4954672
        ],
        "match": 53
    },
    {
        "content": "supersteps), and minimizing the amount of communication",
        "page_index": 3,
        "bbox": [
            346.582,
            368.57006720000004,
            558.201054976,
            377.5364672
        ],
        "match": 53
    },
    {
        "content": "between these wavefronts. Our experiments also show that",
        "page_index": 3,
        "bbox": [
            346.582,
            357.61106720000004,
            558.201054976,
            366.5774672
        ],
        "match": 53
    },
    {
        "content": "HDagg consistently outperforms both BL\u2212EST and ETF. Due",
        "page_index": 3,
        "bbox": [
            346.582,
            345.10984640000004,
            558.20033408,
            355.6184672
        ],
        "match": 53
    },
    {
        "content": "to this, HDagg is a very fitting baseline for our work from",
        "page_index": 3,
        "bbox": [
            346.582,
            334.15084640000003,
            558.2052503104001,
            344.6594672
        ],
        "match": 53
    },
    {
        "content": "the academic side.",
        "page_index": 3,
        "bbox": [
            346.582,
            324.7340672,
            413.01405759999994,
            333.7004672
        ],
        "match": 53
    },
    {
        "content": "Besides list\u2212based schedulers, clustering is also a prominent",
        "page_index": 3,
        "bbox": [
            327.918,
            308.79406720000003,
            558.198285312,
            317.7604672
        ],
        "match": 54
    },
    {
        "content": "method of designing state\u2212of\u2212the\u2212art heuristics; however, previous",
        "page_index": 3,
        "bbox": [
            317.955,
            297.8350672,
            558.2017886016001,
            306.8014672
        ],
        "match": 54
    },
    {
        "content": "work has found that this approach is consistently outperformed by",
        "page_index": 3,
        "bbox": [
            317.623,
            286.8760672,
            558.4310762752001,
            295.8424672
        ],
        "match": 54
    },
    {
        "content": "BL\u2212EST and ETF in models with communication cost [27].",
        "page_index": 3,
        "bbox": [
            317.955,
            274.3748464,
            528.4143088000001,
            284.8834672
        ],
        "match": 54
    },
    {
        "content": "Note that Cilk, BL\u2212EST and ETF return a \u201cclassical\u201d schedule",
        "page_index": 3,
        "bbox": [
            327.918,
            263.4158464,
            558.20517344,
            273.9244672
        ],
        "match": 55
    },
    {
        "content": "where nodes are assigned to concrete time steps; such a schedule",
        "page_index": 3,
        "bbox": [
            317.623,
            253.99906719999998,
            558.2018771584001,
            262.9654672
        ],
        "match": 55
    },
    {
        "content": "phases while minimizing the total cost of \u210e\u2212relations. With the",
        "page_index": 3,
        "bbox": [
            53.798,
            243.4583696,
            294.04541184,
            252.5054672
        ],
        "match": 48
    },
    {
        "content": "can be naturally adapted to BSP and organized into supersteps, by",
        "page_index": 3,
        "bbox": [
            317.955,
            243.0410672,
            558.4348163712,
            252.0074672
        ],
        "match": 55
    },
    {
        "content": "assignment to processors and supersteps fixed, this subproblem has",
        "page_index": 3,
        "bbox": [
            53.798,
            232.5800672,
            294.04533555200004,
            241.54646720000002
        ],
        "match": 48
    },
    {
        "content": "adding a superstep barrier (closing the current computation phase)",
        "page_index": 3,
        "bbox": [
            317.955,
            232.08206719999998,
            558.7417900416001,
            241.0484672
        ],
        "match": 55
    },
    {
        "content": "a much smaller degree of freedom; its theoretical complexity was",
        "page_index": 3,
        "bbox": [
            53.798,
            221.6210672,
            294.04056542720014,
            230.58746720000002
        ],
        "match": 48
    },
    {
        "content": "whenever communication is required. In contrast to this, schedules",
        "page_index": 3,
        "bbox": [
            317.623,
            221.12306719999998,
            558.204244288,
            230.0894672
        ],
        "match": 55
    },
    {
        "content": "studied separately in [28].",
        "page_index": 3,
        "bbox": [
            53.798,
            210.6620672,
            148.68941120000002,
            219.62846720000002
        ],
        "match": 48
    },
    {
        "content": "returned by HDagg are already in the appropriate format.",
        "page_index": 3,
        "bbox": [
            317.955,
            208.62184639999998,
            525.4910384,
            219.1304672
        ],
        "match": 55
    },
    {
        "content": "4 SCHEDULING ALGORITHMS",
        "page_index": 3,
        "bbox": [
            53.798,
            180.76299790000002,
            218.01268230000002,
            191.6720979
        ],
        "match": 50
    },
    {
        "content": "We now describe our scheduling algorithms in the BSP model. Due",
        "page_index": 3,
        "bbox": [
            53.368,
            169.5660672,
            294.04590208,
            178.5324672
        ],
        "match": 50
    },
    {
        "content": "to space constraints, we only outline the main ideas behind each",
        "page_index": 3,
        "bbox": [
            53.798,
            158.6070672,
            294.0471288320001,
            167.5734672
        ],
        "match": 50
    },
    {
        "content": "algorithm; we discuss them in more detail in Appendix A. The",
        "page_index": 3,
        "bbox": [
            53.798,
            147.64806719999999,
            294.04712883200006,
            156.6144672
        ],
        "match": 50
    },
    {
        "content": "pipeline combining the algorithms is discussed later in Section 6.",
        "page_index": 3,
        "bbox": [
            53.798,
            136.68906719999998,
            291.0668768,
            145.6554672
        ],
        "match": 50
    },
    {
        "content": "4.1 Baselines",
        "page_index": 3,
        "bbox": [
            53.798,
            106.7899979,
            125.00169570000001,
            117.6990979
        ],
        "match": 51
    },
    {
        "content": "In order to evaluate our approach, we use the following baseline",
        "page_index": 3,
        "bbox": [
            53.798,
            95.59306720000001,
            294.0471288320001,
            104.5594672
        ],
        "match": 52
    },
    {
        "content": "schedulers for comparison:",
        "page_index": 3,
        "bbox": [
            53.798,
            84.63506720000001,
            152.59876160000002,
            93.6014672
        ],
        "match": 52
    },
    {
        "content": "4",
        "page_index": 3,
        "bbox": [
            304.298,
            72.68305240000001,
            307.540817,
            79.6568524
        ],
        "match": 58
    },
    {
        "content": "4.2 Initialization heuristics",
        "page_index": 3,
        "bbox": [
            317.9549999999999,
            176.52899789999998,
            458.8023900999999,
            187.43809789999997
        ],
        "match": 56
    },
    {
        "content": "In order to develop an initial BSP schedule, we use the following",
        "page_index": 3,
        "bbox": [
            317.955,
            165.33206719999998,
            558.204128832,
            174.2984672
        ],
        "match": 57
    },
    {
        "content": "heuristic methods:",
        "page_index": 3,
        "bbox": [
            317.955,
            154.37306719999998,
            385.6333872,
            163.3394672
        ],
        "match": 57
    },
    {
        "content": "\u2022 BSPg: A BSP\u2212tailored greedy algorithm that consecutively",
        "page_index": 3,
        "bbox": [
            337.144,
            137.8868464,
            558.43671264,
            148.3954672
        ],
        "match": 58
    },
    {
        "content": "assigns nodes to processors when processors become idle.",
        "page_index": 3,
        "bbox": [
            346.582,
            128.4700672,
            559.5849650176001,
            137.4364672
        ],
        "match": 58
    },
    {
        "content": "Generally, we only allow assigning a node \ud835\udc63 to processor \ud835\udc5d",
        "page_index": 3,
        "bbox": [
            346.582,
            117.43036959999999,
            557.5695695999999,
            126.47746719999999
        ],
        "match": 58
    },
    {
        "content": "if this is possible without ending the computational phase",
        "page_index": 3,
        "bbox": [
            346.582,
            106.5520672,
            558.2013688000001,
            115.51846719999999
        ],
        "match": 58
    },
    {
        "content": "of the current superstep \ud835\udc60, i.e. if we can ensure that all of",
        "page_index": 3,
        "bbox": [
            346.582,
            95.5123696,
            558.2052028800001,
            104.5594672
        ],
        "match": 58
    },
    {
        "content": "\ud835\udc63\u2019s predecessors are already available on \ud835\udc5d by superstep",
        "page_index": 3,
        "bbox": [
            346.358,
            84.5543696,
            558.202780544,
            93.6014672
        ],
        "match": 58
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 4,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "\ud835\udc60 (that is, they were either computed on processor \ud835\udc5d or",
        "page_index": 4,
        "bbox": [
            82.066,
            698.2523696,
            294.215657728,
            707.2994672
        ],
        "match": 30
    },
    {
        "content": "cost change incurred by each potential improvement step, without",
        "page_index": 4,
        "bbox": [
            317.955,
            698.3330672,
            558.2015196096,
            707.2994672
        ],
        "match": 63
    },
    {
        "content": "in an earlier superstep). In case of multiple possible node",
        "page_index": 4,
        "bbox": [
            82.425,
            687.3740672,
            294.04380391679996,
            696.3404672
        ],
        "match": 30
    },
    {
        "content": "having to consider nodes and supersteps that are unaffected by this",
        "page_index": 4,
        "bbox": [
            317.955,
            687.3740672,
            558.202335552,
            696.3404672
        ],
        "match": 63
    },
    {
        "content": "assignments to a processor, tie\u2212breaking is done with a",
        "page_index": 4,
        "bbox": [
            82.425,
            676.4150672,
            294.048000192,
            685.3814672
        ],
        "match": 30
    },
    {
        "content": "modification.",
        "page_index": 4,
        "bbox": [
            317.955,
            676.4150672,
            366.1583664,
            685.3814672
        ],
        "match": 63
    },
    {
        "content": "heuristic that aims to minimize communication costs in the",
        "page_index": 4,
        "bbox": [
            82.425,
            665.4560672,
            294.044054976,
            674.4224672
        ],
        "match": 30
    },
    {
        "content": "Besides this algorithm, we also apply a separate, similar hill climb\u2212",
        "page_index": 4,
        "bbox": [
            327.918,
            665.4560672,
            559.72095936,
            674.4224672
        ],
        "match": 64
    },
    {
        "content": "future. Once we cannot assign further nodes to at least half",
        "page_index": 4,
        "bbox": [
            82.425,
            654.4980671999999,
            294.04405497600004,
            663.4644672
        ],
        "match": null
    },
    {
        "content": "ing method for the communication scheduling subproblem (denoted",
        "page_index": 4,
        "bbox": [
            317.955,
            654.4980671999999,
            558.2023355520001,
            663.4644672
        ],
        "match": 64
    },
    {
        "content": "of the processors without a communication requirement,",
        "page_index": 4,
        "bbox": [
            82.425,
            643.5390672,
            295.03573881600005,
            652.5054672
        ],
        "match": 30
    },
    {
        "content": "the computation phase of the current superstep is closed,",
        "page_index": 4,
        "bbox": [
            82.425,
            632.5800671999999,
            295.02830567039996,
            641.5464671999999
        ],
        "match": 30
    },
    {
        "content": "and a next superstep is started.",
        "page_index": 4,
        "bbox": [
            82.425,
            621.6210672,
            195.67063200000004,
            630.5874672
        ],
        "match": 30
    },
    {
        "content": "HCcs), which only tries to modify the communication schedule; that",
        "page_index": 4,
        "bbox": [
            317.955,
            641.9968464,
            558.2009216,
            652.5054672
        ],
        "match": 64
    },
    {
        "content": "is, it checks whether any communication step (\ud835\udc63, \ud835\udc5d1, \ud835\udc5d2, \ud835\udc60) \u2208 \u0393 can",
        "page_index": 4,
        "bbox": [
            317.955,
            631.2351071999999,
            558.2014874304,
            641.5644
        ],
        "match": 64
    },
    {
        "content": "be replaced by some other (\ud835\udc63, \ud835\udc5d1, \ud835\udc5d2, \ud835\udc60\u2032) such that the schedule is",
        "page_index": 4,
        "bbox": [
            317.955,
            620.2761072,
            558.202978432,
            631.0612496
        ],
        "match": 64
    },
    {
        "content": "\u2022 Source: A different greedy approach that in each step forms",
        "page_index": 4,
        "bbox": [
            72.987,
            602.1458464,
            294.04582758400005,
            612.6544672
        ],
        "match": null
    },
    {
        "content": "a new superstep from the next layer of source nodes in",
        "page_index": 4,
        "bbox": [
            82.425,
            592.7290671999999,
            294.0480001920001,
            601.6954671999999
        ],
        "match": 28
    },
    {
        "content": "the DAG. As a preprocessing step in the beginning, the",
        "page_index": 4,
        "bbox": [
            82.425,
            581.7700672,
            294.04800019199996,
            590.7364672
        ],
        "match": 28
    },
    {
        "content": "algorithm uses a simple rule to cluster the original source",
        "page_index": 4,
        "bbox": [
            82.425,
            570.8110671999999,
            294.0447722880001,
            579.7774671999999
        ],
        "match": null
    },
    {
        "content": "nodes of the DAG. Then in each superstep, it applies a",
        "page_index": 4,
        "bbox": [
            82.425,
            559.8520672,
            294.04800019199996,
            568.8184672
        ],
        "match": 28
    },
    {
        "content": "round\u2212robin\u2212based approach to assign the current source",
        "page_index": 4,
        "bbox": [
            82.425,
            548.8940672,
            294.0438039168001,
            557.8604672
        ],
        "match": null
    },
    {
        "content": "nodes to processors, considering the nodes in a decreasing",
        "page_index": 4,
        "bbox": [
            82.425,
            537.9350671999999,
            294.0454537344,
            546.9014672
        ],
        "match": 28
    },
    {
        "content": "order according to \ud835\udc64 (\ud835\udc63) to ensure the load balancing of",
        "page_index": 4,
        "bbox": [
            82.425,
            525.6311072,
            294.04693139200003,
            535.9424672
        ],
        "match": 28
    },
    {
        "content": "work costs between processors. Besides the current source",
        "page_index": 4,
        "bbox": [
            82.093,
            516.0170671999999,
            294.0415612096001,
            524.9834672
        ],
        "match": null
    },
    {
        "content": "nodes, the algorithm occasionally also adds some of their",
        "page_index": 4,
        "bbox": [
            82.425,
            505.05806720000004,
            294.21240810240005,
            514.0244672
        ],
        "match": 28
    },
    {
        "content": "successors to the current superstep, if this requires no extra",
        "page_index": 4,
        "bbox": [
            82.425,
            494.09906720000004,
            294.0440549760001,
            503.0654672
        ],
        "match": null
    },
    {
        "content": "communication.",
        "page_index": 4,
        "bbox": [
            82.425,
            483.14006720000003,
            141.5494416,
            492.1064672
        ],
        "match": 28
    },
    {
        "content": "\u2022 ILPinit: We also apply an ILP\u2212based initialization heuristic",
        "page_index": 4,
        "bbox": [
            72.987,
            463.66484640000004,
            294.047420864,
            474.1734672
        ],
        "match": 58
    },
    {
        "content": "that divides the nodes into smaller batches according to a",
        "page_index": 4,
        "bbox": [
            82.425,
            454.24806720000004,
            294.0438039168001,
            463.2144672
        ],
        "match": 58
    },
    {
        "content": "topological order, and consecutively finds a schedule for",
        "page_index": 4,
        "bbox": [
            82.425,
            443.2900672,
            294.212623296,
            452.2564672
        ],
        "match": 58
    },
    {
        "content": "each batch separately (given the already\u2212selected partial",
        "page_index": 4,
        "bbox": [
            82.425,
            432.3310672,
            294.0480001920001,
            441.29746719999997
        ],
        "match": 58
    },
    {
        "content": "schedules on previous batches), using an ILP\u2212formulation",
        "page_index": 4,
        "bbox": [
            82.425,
            421.3720672,
            294.04565996160005,
            430.33846719999997
        ],
        "match": 58
    },
    {
        "content": "of the subproblem. This approach also provides good initial",
        "page_index": 4,
        "bbox": [
            82.425,
            410.4130672,
            294.044054976,
            419.37946719999997
        ],
        "match": 58
    },
    {
        "content": "schedules, but it requires drastically more running time",
        "page_index": 4,
        "bbox": [
            82.425,
            399.4540672,
            294.0480001920001,
            408.42046719999996
        ],
        "match": 58
    },
    {
        "content": "than the heuristics above.",
        "page_index": 4,
        "bbox": [
            82.425,
            388.4950672,
            176.2225104,
            397.46146719999996
        ],
        "match": 58
    },
    {
        "content": "Note that the above heuristics only assign the nodes to proces\u2212",
        "page_index": 4,
        "bbox": [
            63.761,
            373.55106720000003,
            295.5600141440001,
            382.5174672
        ],
        "match": 59
    },
    {
        "content": "sors and supersteps, i.e. they only define \ud835\udf0b and \ud835\udf0f. The required",
        "page_index": 4,
        "bbox": [
            53.798,
            362.5113696,
            294.044172096,
            371.5584672
        ],
        "match": 59
    },
    {
        "content": "communication steps \u0393 are then derived from these separately af\u2212",
        "page_index": 4,
        "bbox": [
            53.798,
            351.6330672,
            295.5569973568,
            360.61740000000003
        ],
        "match": 59
    },
    {
        "content": "terwards, simply following a lazy communication schedule where",
        "page_index": 4,
        "bbox": [
            53.798,
            340.6740672,
            294.0453265856001,
            349.6404672
        ],
        "match": 59
    },
    {
        "content": "every required value is sent in the last possible communication",
        "page_index": 4,
        "bbox": [
            53.798,
            329.7150672,
            294.0471288320001,
            338.6814672
        ],
        "match": 59
    },
    {
        "content": "phase, immediately before it is needed.",
        "page_index": 4,
        "bbox": [
            53.798,
            318.7570672,
            195.9244064,
            327.72346719999996
        ],
        "match": 59
    },
    {
        "content": "4.3 Local search algorithm",
        "page_index": 4,
        "bbox": [
            53.798,
            293.0909979,
            191.75447860000003,
            304.0000979
        ],
        "match": 12
    },
    {
        "content": "Another ingredient of our framework is a hill climbing local search",
        "page_index": 4,
        "bbox": [
            53.484,
            281.8950672,
            294.04767014400005,
            290.8614672
        ],
        "match": 12
    },
    {
        "content": "method (denoted HC) that begins from an initial solution (that is,",
        "page_index": 4,
        "bbox": [
            53.798,
            269.39384640000003,
            295.03410387199995,
            279.9024672
        ],
        "match": null
    },
    {
        "content": "an already found, valid BSP schedule), and attempts to make small",
        "page_index": 4,
        "bbox": [
            53.798,
            259.9770672,
            294.0436140032001,
            268.9434672
        ],
        "match": 12
    },
    {
        "content": "improvements to this solution as long as this is possible, i.e. until",
        "page_index": 4,
        "bbox": [
            53.798,
            249.0180672,
            294.04113927680004,
            257.9844672
        ],
        "match": 12
    },
    {
        "content": "either a local minimum is found where none of the potential modi\u2212",
        "page_index": 4,
        "bbox": [
            53.798,
            238.0590672,
            295.5604419584001,
            247.0254672
        ],
        "match": null
    },
    {
        "content": "fication steps result in an improvement, or until a predefined time",
        "page_index": 4,
        "bbox": [
            53.798,
            227.10006719999998,
            294.0472364288,
            236.0664672
        ],
        "match": null
    },
    {
        "content": "limit is reached.",
        "page_index": 4,
        "bbox": [
            53.798,
            216.14106719999998,
            111.96303680000001,
            225.1074672
        ],
        "match": 12
    },
    {
        "content": "For each local improvement step, given a node \ud835\udc63 that is currently",
        "page_index": 4,
        "bbox": [
            63.761,
            205.1013696,
            294.276922368,
            214.1484672
        ],
        "match": 62
    },
    {
        "content": "assigned to processor \ud835\udc5d and superstep \ud835\udc60, we consider all the alterna\u2212",
        "page_index": 4,
        "bbox": [
            53.798,
            194.1433696,
            295.55860556799996,
            203.1904672
        ],
        "match": 62
    },
    {
        "content": "tive schedules where \ud835\udc63 is assigned to any other processor \ud835\udc5d\u2032 \u2260 \ud835\udc5d in",
        "page_index": 4,
        "bbox": [
            53.798,
            181.69594719999998,
            294.044889536,
            192.70424959999997
        ],
        "match": 62
    },
    {
        "content": "superstep \ud835\udc60, or \ud835\udc63 is assigned to any processor in supersteps (\ud835\udc60 \u2212 1)",
        "page_index": 4,
        "bbox": [
            53.798,
            170.96110720000001,
            293.5968112,
            181.27246720000002
        ],
        "match": 62
    },
    {
        "content": "or (\ud835\udc60 + 1), with the assignments of all the other nodes unchanged.",
        "page_index": 4,
        "bbox": [
            53.798,
            160.0021072,
            295.42424700160007,
            170.31346720000002
        ],
        "match": 62
    },
    {
        "content": "We consider all such modification steps (for every node \ud835\udc63), provided",
        "page_index": 4,
        "bbox": [
            53.368,
            150.30736960000002,
            294.042189056,
            159.35446720000002
        ],
        "match": 62
    },
    {
        "content": "that they yield a valid BSP schedule with smaller total cost.",
        "page_index": 4,
        "bbox": [
            53.798,
            139.4290672,
            270.19309760000004,
            148.3954672
        ],
        "match": 62
    },
    {
        "content": "Note this algorithm needs to be aware of the cost of the modified",
        "page_index": 4,
        "bbox": [
            63.761,
            128.4700672,
            294.04379590400004,
            137.4364672
        ],
        "match": 63
    },
    {
        "content": "still valid and has lower cost.",
        "page_index": 4,
        "bbox": [
            317.955,
            610.6620671999999,
            423.9109488,
            619.6284671999999
        ],
        "match": 64
    },
    {
        "content": "4.4 ILP\u2212based approach",
        "page_index": 4,
        "bbox": [
            317.955,
            539.1689978999999,
            440.027829,
            550.0780979
        ],
        "match": null
    },
    {
        "content": "As our most sophisticated approach, we represent the BSP schedul\u2212",
        "page_index": 4,
        "bbox": [
            317.641,
            527.9720672,
            559.7167728064001,
            536.9384672
        ],
        "match": 66
    },
    {
        "content": "ing task as an ILP problem, and apply a state\u2212of\u2212the\u2212art open\u2212source",
        "page_index": 4,
        "bbox": [
            317.955,
            517.0130671999999,
            558.2023355520001,
            525.9794671999999
        ],
        "match": 66
    },
    {
        "content": "ILP solver (CBC, see [7]) to find a low\u2212cost schedule. We use several",
        "page_index": 4,
        "bbox": [
            317.955,
            506.0540672,
            558.200660992,
            515.0204672
        ],
        "match": 66
    },
    {
        "content": "techniques to express (parts of) the scheduling problem as an ILP:",
        "page_index": 4,
        "bbox": [
            317.955,
            495.0950672,
            558.9180336000001,
            504.0614672
        ],
        "match": 66
    },
    {
        "content": "\u2022 ILPfull: A naive representation of BSP scheduling as an",
        "page_index": 4,
        "bbox": [
            337.144,
            480.6018464,
            558.2048960832,
            491.11046719999996
        ],
        "match": 67
    },
    {
        "content": "ILP problem has already been described before in the work",
        "page_index": 4,
        "bbox": [
            346.582,
            471.1850672,
            558.4345848640002,
            480.15146719999996
        ],
        "match": 67
    },
    {
        "content": "of [28], but only analyzed from a theoretical perspective.",
        "page_index": 4,
        "bbox": [
            346.582,
            460.22606720000005,
            559.5786699520002,
            469.1924672
        ],
        "match": 67
    },
    {
        "content": "This formulation captures the entire problem as a single ILP,",
        "page_index": 4,
        "bbox": [
            346.313,
            449.26706720000004,
            559.1886062720001,
            458.2334672
        ],
        "match": 67
    },
    {
        "content": "and hence it requires a very high number of variables. Due",
        "page_index": 4,
        "bbox": [
            346.582,
            438.30806720000004,
            558.2058878656,
            447.2744672
        ],
        "match": 67
    },
    {
        "content": "to this, even with sophisticated ILP solvers, this approach",
        "page_index": 4,
        "bbox": [
            346.582,
            427.34906720000004,
            558.1985354176002,
            436.3154672
        ],
        "match": 67
    },
    {
        "content": "is only feasible for very small DAGs in practice.",
        "page_index": 4,
        "bbox": [
            346.582,
            416.39006720000003,
            520.7363872000001,
            425.3564672
        ],
        "match": 67
    },
    {
        "content": "\u2022 ILPpart: In order to handle larger DAGs, we develop a par\u2212",
        "page_index": 4,
        "bbox": [
            337.144,
            397.91184640000006,
            559.7157972480001,
            408.42046719999996
        ],
        "match": 67
    },
    {
        "content": "tial ILP formulation as a more advanced iterative improve\u2212",
        "page_index": 4,
        "bbox": [
            346.582,
            388.4950672,
            559.7179546624001,
            397.46146719999996
        ],
        "match": 67
    },
    {
        "content": "ment method. In particular, given a starting BSP schedule",
        "page_index": 4,
        "bbox": [
            346.582,
            377.5360672,
            558.1985354175999,
            386.50246719999996
        ],
        "match": 67
    },
    {
        "content": "and two superstep indices \ud835\udc601 \u2264 \ud835\udc602, we define a partial ILP",
        "page_index": 4,
        "bbox": [
            346.582,
            365.23210720000003,
            558.1986565632,
            375.5434672
        ],
        "match": 67
    },
    {
        "content": "that only reorganizes the supersteps between \ud835\udc601 and \ud835\udc602; that",
        "page_index": 4,
        "bbox": [
            346.582,
            354.2764546,
            558.2050261119999,
            364.5844672
        ],
        "match": 67
    },
    {
        "content": "is, we only consider nodes \ud835\udc63 that are currently assigned to",
        "page_index": 4,
        "bbox": [
            346.582,
            344.57836960000003,
            558.205953248,
            353.6254672
        ],
        "match": 67
    },
    {
        "content": "one of the supersteps in the interval [\ud835\udc601, \ud835\udc602], and try to re\u2212",
        "page_index": 4,
        "bbox": [
            346.582,
            332.3561072,
            559.716183488,
            342.6674672
        ],
        "match": 67
    },
    {
        "content": "assign these differently to any processor and any superstep",
        "page_index": 4,
        "bbox": [
            346.582,
            322.7420672,
            558.201054976,
            331.7084672
        ],
        "match": 67
    },
    {
        "content": "in [\ud835\udc601, \ud835\udc602], with the rest of the schedule unchanged. This",
        "page_index": 4,
        "bbox": [
            346.582,
            310.4381072,
            558.201143424,
            320.74946719999997
        ],
        "match": 67
    },
    {
        "content": "gives a significantly smaller ILP that essentially only scales",
        "page_index": 4,
        "bbox": [
            346.582,
            300.8240672,
            558.201054976,
            309.79046719999997
        ],
        "match": 67
    },
    {
        "content": "with the number of supersteps between \ud835\udc601 and \ud835\udc602 and the",
        "page_index": 4,
        "bbox": [
            346.25,
            288.5234546,
            558.2025466688,
            298.83146719999996
        ],
        "match": 67
    },
    {
        "content": "number of nodes assigned to these supersteps. Given this",
        "page_index": 4,
        "bbox": [
            346.582,
            278.9060672,
            558.205134688,
            287.87246719999996
        ],
        "match": 67
    },
    {
        "content": "partial ILP formulation, we can then divide the range of",
        "page_index": 4,
        "bbox": [
            346.582,
            267.9470672,
            558.205000192,
            276.91346719999996
        ],
        "match": 67
    },
    {
        "content": "supersteps into disjoint intervals, and then repeatedly use",
        "page_index": 4,
        "bbox": [
            346.582,
            256.9880672,
            558.2031889792001,
            265.95446719999995
        ],
        "match": 67
    },
    {
        "content": "this approach to further polish each part of our schedule.",
        "page_index": 4,
        "bbox": [
            346.582,
            246.0290672,
            555.2570272,
            254.9954672
        ],
        "match": 67
    },
    {
        "content": "\u2022 ILPcs: We also devise and implement a separate ILP repre\u2212",
        "page_index": 4,
        "bbox": [
            337.144,
            227.55084639999998,
            559.7141349760001,
            238.0594672
        ],
        "match": 67
    },
    {
        "content": "sentation for the communication scheduling subproblem,",
        "page_index": 4,
        "bbox": [
            346.582,
            218.13406719999998,
            559.187493472,
            227.1004672
        ],
        "match": 67
    },
    {
        "content": "i.e. the scheduling of communication steps \u0393 when \ud835\udf0b and \ud835\udf0f",
        "page_index": 4,
        "bbox": [
            346.582,
            207.09436960000002,
            557.412224,
            216.1594
        ],
        "match": 67
    },
    {
        "content": "are already fixed. This problem has a significantly smaller",
        "page_index": 4,
        "bbox": [
            346.582,
            196.2160672,
            558.3696770944,
            205.18246720000002
        ],
        "match": 67
    },
    {
        "content": "degree of freedom, hence the ILP solver can often return",
        "page_index": 4,
        "bbox": [
            346.582,
            185.2570672,
            558.205000192,
            194.22346720000002
        ],
        "match": 67
    },
    {
        "content": "reasonably good solutions for it on the entire DAG, even",
        "page_index": 4,
        "bbox": [
            346.582,
            174.2980672,
            558.2050001920002,
            183.2644672
        ],
        "match": 67
    },
    {
        "content": "for DAGs of larger size. If we already have a BSP schedule",
        "page_index": 4,
        "bbox": [
            346.582,
            163.3390672,
            558.1999431424,
            172.3054672
        ],
        "match": 67
    },
    {
        "content": "with a specific \ud835\udf0b and \ud835\udf0f, we can use this ILP formulation",
        "page_index": 4,
        "bbox": [
            346.25,
            152.2993696,
            558.203739904,
            161.3464672
        ],
        "match": 67
    },
    {
        "content": "to find a more optimal scheduling of the communication",
        "page_index": 4,
        "bbox": [
            346.582,
            141.4220672,
            558.2050001919999,
            150.3884672
        ],
        "match": 67
    },
    {
        "content": "steps, hence resulting in a lower total cost.",
        "page_index": 4,
        "bbox": [
            346.582,
            130.46306719999998,
            502.26560320000004,
            139.4294672
        ],
        "match": 67
    },
    {
        "content": "solution after each potential improvement step. Recalculating this",
        "page_index": 4,
        "bbox": [
            53.798,
            117.5110672,
            294.0464473856001,
            126.47746719999999
        ],
        "match": 63
    },
    {
        "content": "When using an ILP solver in practice, we can achieve much",
        "page_index": 4,
        "bbox": [
            327.918,
            117.5110672,
            558.1982853120002,
            126.47746719999999
        ],
        "match": 68
    },
    {
        "content": "entirely for each option would be very time\u2212consuming; as such,",
        "page_index": 4,
        "bbox": [
            53.798,
            106.5520672,
            295.0348674560001,
            115.51846719999999
        ],
        "match": 63
    },
    {
        "content": "better results by starting the solver from a good initial solution;",
        "page_index": 4,
        "bbox": [
            317.955,
            106.5520672,
            558.835184064,
            115.51846719999999
        ],
        "match": 68
    },
    {
        "content": "we apply a range of sophisticated data structures to store the cur\u2212",
        "page_index": 4,
        "bbox": [
            53.467,
            95.59306720000001,
            295.5582846784001,
            104.5594672
        ],
        "match": 63
    },
    {
        "content": "this is provided by the initialization and local search algorithms",
        "page_index": 4,
        "bbox": [
            317.955,
            95.59306720000001,
            558.2041288320002,
            104.5594672
        ],
        "match": 68
    },
    {
        "content": "rent schedule, and use these to efficiently query (and update) the",
        "page_index": 4,
        "bbox": [
            53.798,
            84.63506720000001,
            294.0426635648,
            93.6014672
        ],
        "match": 63
    },
    {
        "content": "discussed before.",
        "page_index": 4,
        "bbox": [
            317.955,
            84.63506720000001,
            379.83212639999994,
            93.6014672
        ],
        "match": 68
    },
    {
        "content": "5",
        "page_index": 4,
        "bbox": [
            304.37899999999996,
            72.68305240000001,
            307.62181699999996,
            79.6568524
        ],
        "match": 1
    },
    {
        "content": "4.5 Multilevel approach",
        "page_index": 5,
        "bbox": [
            53.798,
            695.8309978999999,
            178.0090126,
            706.7400979
        ],
        "match": 71
    },
    {
        "content": "While our algorithms above perform well in general, we have found",
        "page_index": 5,
        "bbox": [
            53.368,
            684.6350672,
            294.04590208000013,
            693.6014672
        ],
        "match": 70
    },
    {
        "content": "that they are often unable to find good solutions in problems domi\u2212",
        "page_index": 5,
        "bbox": [
            53.798,
            673.6760671999999,
            295.556711936,
            682.6424671999999
        ],
        "match": 70
    },
    {
        "content": "nated by communication costs, e.g. when the weights \ud835\udc50\ud835\udc63 or some",
        "page_index": 5,
        "bbox": [
            53.798,
            661.3100003,
            294.0484922496,
            671.6834672
        ],
        "match": 70
    },
    {
        "content": "of the parameters \ud835\udc54, \u2113 or \ud835\udf06\ud835\udc5d1,\ud835\udc5d2 are excessively large. Intuitively",
        "page_index": 5,
        "bbox": [
            53.798,
            649.329041,
            294.278644736,
            660.7244671999999
        ],
        "match": 70
    },
    {
        "content": "speaking, in this case, a reasonable solution always needs to assign",
        "page_index": 5,
        "bbox": [
            53.798,
            640.7990672,
            294.04533555200004,
            649.7654672
        ],
        "match": 70
    },
    {
        "content": "a well\u2212connected cluster of nodes to the same processor, in order",
        "page_index": 5,
        "bbox": [
            53.798,
            629.8400671999999,
            294.2163785984001,
            638.8064671999999
        ],
        "match": 70
    },
    {
        "content": "to avoid too much communication. In contrast to this, both our",
        "page_index": 5,
        "bbox": [
            53.798,
            618.8810672,
            294.211751936,
            627.8474672
        ],
        "match": 70
    },
    {
        "content": "initialization heuristics and our local search algorithms attempt to",
        "page_index": 5,
        "bbox": [
            53.798,
            607.9220672,
            294.04478860160015,
            616.8884672
        ],
        "match": 70
    },
    {
        "content": "(re)schedule single nodes separately, so they do not perform well",
        "page_index": 5,
        "bbox": [
            53.529,
            596.9630672,
            294.0469056384001,
            605.9294672
        ],
        "match": 70
    },
    {
        "content": "in this case.",
        "page_index": 5,
        "bbox": [
            53.798,
            586.0040672,
            96.478064,
            594.9704672
        ],
        "match": 70
    },
    {
        "content": "In order to address this problem, we also present a multilevel",
        "page_index": 5,
        "bbox": [
            63.761,
            572.9648624,
            294.042751232,
            584.0114672
        ],
        "match": 71
    },
    {
        "content": "scheduling algorithm, inspired by the multilevel approach that",
        "page_index": 5,
        "bbox": [
            53.798,
            564.0870672,
            294.04712883200006,
            573.0534672
        ],
        "match": 71
    },
    {
        "content": "consistently provides state\u2212of\u2212the\u2212art results for hypergraph parti\u2212",
        "page_index": 5,
        "bbox": [
            53.798,
            553.1280671999999,
            295.5564967424001,
            562.0944671999999
        ],
        "match": 71
    },
    {
        "content": "tioning and other problems [15, 31, 33, 37]. When adapted to our",
        "page_index": 5,
        "bbox": [
            53.798,
            542.1690672,
            294.21166726399997,
            551.1354672
        ],
        "match": 71
    },
    {
        "content": "scheduling problem, the three main steps of the multilevel paradigm",
        "page_index": 5,
        "bbox": [
            53.798,
            531.2100671999999,
            294.0453355520001,
            540.1764671999999
        ],
        "match": 71
    },
    {
        "content": "are as follows:",
        "page_index": 5,
        "bbox": [
            53.798,
            520.2510672,
            106.0452128,
            529.2174672
        ],
        "match": 71
    },
    {
        "content": "(1) Coarsening the DAG iteratively into smaller and smaller",
        "page_index": 5,
        "bbox": [
            67.93,
            503.25376159999996,
            294.21800716800004,
            514.2734672
        ],
        "match": 72
    },
    {
        "content": "DAGs, which (ideally) retain most of the structure of the",
        "page_index": 5,
        "bbox": [
            82.425,
            494.3480672,
            294.0480001920001,
            503.31446719999997
        ],
        "match": 72
    },
    {
        "content": "original DAG. In our case, we do this by repeatedly contract\u2212",
        "page_index": 5,
        "bbox": [
            82.425,
            483.3890672,
            295.5642184320001,
            492.35546719999996
        ],
        "match": 72
    },
    {
        "content": "ing a selected edge (\ud835\udc62, \ud835\udc63) of the DAG into a single node. The",
        "page_index": 5,
        "bbox": [
            82.425,
            471.0851072,
            294.04481030399995,
            481.39646719999996
        ],
        "match": 72
    },
    {
        "content": "contracted edges are chosen in each step such that (i) the",
        "page_index": 5,
        "bbox": [
            82.425,
            461.4710672,
            294.047103552,
            470.43746719999996
        ],
        "match": 72
    },
    {
        "content": "graph still remains a DAG after the contraction, and (ii) we",
        "page_index": 5,
        "bbox": [
            82.425,
            450.5120672,
            294.044054976,
            459.47846719999995
        ],
        "match": 72
    },
    {
        "content": "prefer edges (\ud835\udc62, \ud835\udc63) where the total work weight \ud835\udc64 (\ud835\udc62) +\ud835\udc64 (\ud835\udc63)",
        "page_index": 5,
        "bbox": [
            82.425,
            438.2091072,
            293.5968112,
            448.5204672
        ],
        "match": 72
    },
    {
        "content": "is small, but the communication weight \ud835\udc50 (\ud835\udc62) is large.",
        "page_index": 5,
        "bbox": [
            82.42499999999998,
            427.2501072,
            275.4257904,
            437.5614672
        ],
        "match": 72
    },
    {
        "content": "(2) Solving the BSP scheduling problem in our coarsened DAG",
        "page_index": 5,
        "bbox": [
            67.93,
            408.6087616,
            294.04627257600004,
            419.6284672
        ],
        "match": 72
    },
    {
        "content": "with the algorithms discussed before. The coarsened DAG",
        "page_index": 5,
        "bbox": [
            82.093,
            399.7030672,
            294.0463940992001,
            408.6694672
        ],
        "match": 72
    },
    {
        "content": "is not only much smaller (and hence more viable for our",
        "page_index": 5,
        "bbox": [
            82.425,
            388.7440672,
            294.2126232960001,
            397.7104672
        ],
        "match": 72
    },
    {
        "content": "algorithms), but also naturally ensures that larger clusters",
        "page_index": 5,
        "bbox": [
            82.425,
            377.7850672,
            294.04436880000014,
            386.7514672
        ],
        "match": 72
    },
    {
        "content": "of nodes are assigned to the same processor and superstep.",
        "page_index": 5,
        "bbox": [
            82.425,
            366.8260672,
            295.4260641408,
            375.7924672
        ],
        "match": 72
    },
    {
        "content": "(3) Uncoarsening and refining this schedule iteratively. That",
        "page_index": 5,
        "bbox": [
            67.93,
            346.84076159999995,
            294.04794387199996,
            357.86046719999996
        ],
        "match": 72
    },
    {
        "content": "is, in each step, we undo the next few contraction steps in a",
        "page_index": 5,
        "bbox": [
            82.425,
            337.9350672,
            294.04405497600004,
            346.90146719999996
        ],
        "match": 72
    },
    {
        "content": "reverse order, thus obtaining a slightly larger DAG, and we",
        "page_index": 5,
        "bbox": [
            82.425,
            326.97606720000005,
            294.04405497600004,
            335.9424672
        ],
        "match": 72
    },
    {
        "content": "extend our current assignment \ud835\udf0b and \ud835\udf0f to the newly uncon\u2212",
        "page_index": 5,
        "bbox": [
            82.425,
            315.93636960000003,
            295.562305984,
            324.9834672
        ],
        "match": 72
    },
    {
        "content": "tracted nodes. We then execute a few iterative improvement",
        "page_index": 5,
        "bbox": [
            82.425,
            305.05806720000004,
            294.0440549760001,
            314.0244672
        ],
        "match": 72
    },
    {
        "content": "steps (using our local search algorithm) to ensure that the",
        "page_index": 5,
        "bbox": [
            82.425,
            294.09906720000004,
            294.04618897920005,
            303.0654672
        ],
        "match": 72
    },
    {
        "content": "schedule is further refined to fit the more delicate structure",
        "page_index": 5,
        "bbox": [
            82.425,
            283.14006720000003,
            294.0440549760001,
            292.1064672
        ],
        "match": 72
    },
    {
        "content": "of the more uncoarsened DAG.",
        "page_index": 5,
        "bbox": [
            82.425,
            272.18106720000003,
            195.6795984,
            281.1474672
        ],
        "match": 72
    },
    {
        "content": "Note that this approach is somewhat similar to the idea of com\u2212",
        "page_index": 5,
        "bbox": [
            63.761,
            257.2370672,
            295.56117977600013,
            266.2034672
        ],
        "match": 73
    },
    {
        "content": "bining an acyclic DAG partitioner with list schedulers in the work",
        "page_index": 5,
        "bbox": [
            53.798,
            246.27806719999998,
            294.2762831168001,
            255.2444672
        ],
        "match": 73
    },
    {
        "content": "of [27]. However, while most of the experiments in [27] focus on",
        "page_index": 5,
        "bbox": [
            53.798,
            235.31906719999998,
            294.04038885759996,
            244.2854672
        ],
        "match": 73
    },
    {
        "content": "creating a few (at most 4 \u00b7\ud835\udc43) larger partitions, our coarsening phase",
        "page_index": 5,
        "bbox": [
            53.798,
            223.0161072,
            294.04240288,
            233.3274672
        ],
        "match": 73
    },
    {
        "content": "sorts the DAG into a larger number of smaller clusters. Even more",
        "page_index": 5,
        "bbox": [
            53.798,
            213.40206719999998,
            294.0407357888001,
            222.3684672
        ],
        "match": 73
    },
    {
        "content": "importantly, instead of applying a partitioning directly, our algo\u2212",
        "page_index": 5,
        "bbox": [
            53.798,
            202.4430672,
            295.55617395200005,
            211.40946720000002
        ],
        "match": 73
    },
    {
        "content": "rithm coarsens the DAG in a step\u2212by\u2212step fashion, since the gradual",
        "page_index": 5,
        "bbox": [
            53.798,
            191.4840672,
            294.04533555200004,
            200.45046720000002
        ],
        "match": 73
    },
    {
        "content": "refinement steps in the uncoarsening phase are the key element of",
        "page_index": 5,
        "bbox": [
            53.798,
            180.5250672,
            294.0445196096002,
            189.49146720000002
        ],
        "match": 73
    },
    {
        "content": "the multilevel approach.",
        "page_index": 5,
        "bbox": [
            53.798,
            169.5660672,
            142.41293120000003,
            178.5324672
        ],
        "match": 73
    },
    {
        "content": "5 COMPUTATIONAL DAG DATABASE",
        "page_index": 5,
        "bbox": [
            53.798,
            128.7079979,
            252.80180220000003,
            139.6170979
        ],
        "match": 74
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 5,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": null
    },
    {
        "content": "\ud835\udc62",
        "page_index": 5,
        "bbox": [
            457.34000000000003,
            701.3263695999999,
            462.01149440000006,
            710.2927695999999
        ],
        "match": null
    },
    {
        "content": "\ud835\udc34",
        "page_index": 5,
        "bbox": [
            409.701,
            645.5383696,
            415.68158880000004,
            654.5047696
        ],
        "match": null
    },
    {
        "content": "example matrix\u2212vector multiplication",
        "page_index": 5,
        "bbox": [
            372.05400000000003,
            594.9370597999999,
            493.5820848,
            602.9071597999999
        ],
        "match": 76
    },
    {
        "content": "(gray cells denote nonzero entries)",
        "page_index": 5,
        "bbox": [
            376.649,
            584.9010598,
            488.9875595000001,
            592.8711598
        ],
        "match": 76
    },
    {
        "content": "\ud835\udc62",
        "page_index": 5,
        "bbox": [
            340.39500000000004,
            519.2353289,
            344.93795700000004,
            527.2054289
        ],
        "match": null
    },
    {
        "content": "\ud835\udc34",
        "page_index": 5,
        "bbox": [
            340.174,
            488.4643289,
            345.7769803,
            496.4344289
        ],
        "match": null
    },
    {
        "content": "\ud835\udc62 [1]",
        "page_index": 5,
        "bbox": [
            449.502,
            547.6745447999999,
            464.99204330000003,
            556.8401597999999
        ],
        "match": null
    },
    {
        "content": "\ud835\udc62 [2]",
        "page_index": 5,
        "bbox": [
            449.502,
            532.7305448,
            464.99204330000003,
            541.8961598
        ],
        "match": null
    },
    {
        "content": "\ud835\udc34[1, 1]",
        "page_index": 5,
        "bbox": [
            440.912,
            517.7865448,
            463.85904329999994,
            526.9521598
        ],
        "match": 84
    },
    {
        "content": "\ud835\udc34[2, 1]",
        "page_index": 5,
        "bbox": [
            440.912,
            502.84254480000004,
            463.85904329999994,
            512.0081598
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc34[2, 2]",
        "page_index": 5,
        "bbox": [
            440.911,
            487.8985448,
            463.85904330000005,
            497.0641598
        ],
        "match": 33
    },
    {
        "content": "coarse\u2212grained",
        "page_index": 5,
        "bbox": [
            342.898,
            467.06686240000005,
            394.69689280000006,
            476.0332624
        ],
        "match": null
    },
    {
        "content": "fine\u2212grained",
        "page_index": 5,
        "bbox": [
            469.69800000000004,
            467.06686240000005,
            512.9788128,
            476.0332624
        ],
        "match": null
    },
    {
        "content": "Figure 2: Coarse\u2212grained and fine\u2212grained DAG representa\u2212",
        "page_index": 5,
        "bbox": [
            317.955,
            442.34576159999995,
            559.8094192896,
            451.31216159999997
        ],
        "match": 77
    },
    {
        "content": "tion of a simple matrix\u2212vector multiplication.",
        "page_index": 5,
        "bbox": [
            317.955,
            431.3867616,
            502.94079840000006,
            440.3531616
        ],
        "match": 77
    },
    {
        "content": "https://github.com/Algebraic\u2212Programming/HyperDAG_DB, and",
        "page_index": 5,
        "bbox": [
            317.955,
            402.44306720000003,
            558.1981392768,
            411.4094672
        ],
        "match": 75
    },
    {
        "content": "its details are discussed in Appendix B.",
        "page_index": 5,
        "bbox": [
            317.955,
            391.4840672,
            460.33246560000003,
            400.4504672
        ],
        "match": 75
    },
    {
        "content": "Most of the DAGs in our database correspond to computations in",
        "page_index": 5,
        "bbox": [
            327.918,
            380.5250672,
            558.2007959040001,
            389.4914672
        ],
        "match": 76
    },
    {
        "content": "some algebraic form: they are derived either directly from algebraic",
        "page_index": 5,
        "bbox": [
            317.955,
            369.5660672,
            558.202335552,
            378.5324672
        ],
        "match": 76
    },
    {
        "content": "computations, or from computations in various other areas that",
        "page_index": 5,
        "bbox": [
            317.955,
            358.6070672,
            558.2041288320002,
            367.5734672
        ],
        "match": 76
    },
    {
        "content": "can naturally be expressed in algebraic form. Since these kinds of",
        "page_index": 5,
        "bbox": [
            317.955,
            347.6480672,
            558.1989641856001,
            356.6144672
        ],
        "match": 76
    },
    {
        "content": "computations typically work with matrices and vectors, there are",
        "page_index": 5,
        "bbox": [
            317.955,
            336.6890672,
            558.1989641856002,
            345.6554672
        ],
        "match": 76
    },
    {
        "content": "two natural ways to represent them as computational DAGs. In the",
        "page_index": 5,
        "bbox": [
            317.955,
            325.7300672,
            558.202335552,
            334.6964672
        ],
        "match": 76
    },
    {
        "content": "coarse\u2212grained representation, each matrix or vector corresponds\nto (the output of) a single node in our DAG. In the fine\u2212grained",
        "page_index": 5,
        "bbox": [
            317.955,
            301.73286240000004,
            558.203429056,
            323.7384672
        ],
        "match": 76
    },
    {
        "content": "representation, we also attempt to capture the internal structure of",
        "page_index": 5,
        "bbox": [
            317.955,
            292.85406720000003,
            558.2011968192002,
            301.8204672
        ],
        "match": 76
    },
    {
        "content": "matrices/vectors: in this case, each nonzero entry in a matrix/vector",
        "page_index": 5,
        "bbox": [
            317.955,
            281.8950672,
            558.3692899200001,
            290.8614672
        ],
        "match": 76
    },
    {
        "content": "is represented by (the output of) a separate node in our DAG. An",
        "page_index": 5,
        "bbox": [
            317.955,
            270.9360672,
            558.2055006912001,
            279.9024672
        ],
        "match": 76
    },
    {
        "content": "example for the two representations is shown in Figure 2.",
        "page_index": 5,
        "bbox": [
            317.955,
            259.9770672,
            528.575736,
            268.9434672
        ],
        "match": 76
    },
    {
        "content": "To obtain coarse\u2212grained DAGs, we extended the C++ Graph\u2212",
        "page_index": 5,
        "bbox": [
            327.918,
            249.0180672,
            559.7164761600001,
            257.9844672
        ],
        "match": 78
    },
    {
        "content": "BLAS framework from [45] with a so\u2212called hyperDAG backend,",
        "page_index": 5,
        "bbox": [
            317.955,
            235.9788624,
            559.1880601600001,
            247.0254672
        ],
        "match": 78
    },
    {
        "content": "which automatically extracts the structure of a given computation",
        "page_index": 5,
        "bbox": [
            317.623,
            227.10006719999998,
            558.1992231040001,
            236.0664672
        ],
        "match": 78
    },
    {
        "content": "while the computation is running. This allows us to conveniently",
        "page_index": 5,
        "bbox": [
            317.623,
            216.14106719999998,
            558.4386439168,
            225.1074672
        ],
        "match": 78
    },
    {
        "content": "obtain a DAG representation for the wide variety of algorithms",
        "page_index": 5,
        "bbox": [
            317.955,
            205.18206719999998,
            558.2041288320002,
            214.1484672
        ],
        "match": 78
    },
    {
        "content": "implemented in GraphBLAS, such as the conjugate gradient and",
        "page_index": 5,
        "bbox": [
            317.955,
            194.22406719999998,
            558.204128832,
            203.1904672
        ],
        "match": 78
    },
    {
        "content": "biconjugate gradient stabilized methods, the pagerank algorithm,",
        "page_index": 5,
        "bbox": [
            317.955,
            183.26506719999998,
            559.1894196288,
            192.2314672
        ],
        "match": 78
    },
    {
        "content": "label propagation, \ud835\udc58\u2212nearest neighbors, and many more. Since many",
        "page_index": 5,
        "bbox": [
            317.955,
            172.22536960000002,
            558.437333696,
            181.27246720000002
        ],
        "match": 78
    },
    {
        "content": "of these algorithms are iterative methods, we can obtain different",
        "page_index": 5,
        "bbox": [
            317.955,
            161.3470672,
            558.1989641856001,
            170.31346720000002
        ],
        "match": 78
    },
    {
        "content": "computational DAGs with this technique if we run the given algo\u2212",
        "page_index": 5,
        "bbox": [
            317.955,
            150.3880672,
            559.7134967424,
            159.35446720000002
        ],
        "match": 78
    },
    {
        "content": "rithms for a predefined number of iterations, or until convergence.",
        "page_index": 5,
        "bbox": [
            317.955,
            139.4290672,
            559.5839053632002,
            148.3954672
        ],
        "match": 78
    },
    {
        "content": "To obtain fine\u2212grained DAGs, the extension of GraphBLAS would",
        "page_index": 5,
        "bbox": [
            327.918,
            128.4700672,
            558.2007959040001,
            137.4364672
        ],
        "match": 78
    },
    {
        "content": "Besides the algorithms, we also present a collection of DAGs that",
        "page_index": 5,
        "bbox": [
            53.798,
            117.5110672,
            294.04367676800007,
            126.47746719999999
        ],
        "match": 75
    },
    {
        "content": "be significantly more technical, so we follow a different approach:",
        "page_index": 5,
        "bbox": [
            317.955,
            117.5110672,
            559.2577256640001,
            126.47746719999999
        ],
        "match": 79
    },
    {
        "content": "represent a diverse set of real\u2212world computational tasks, and",
        "page_index": 5,
        "bbox": [
            53.798,
            106.5520672,
            294.047128832,
            115.51846719999999
        ],
        "match": 75
    },
    {
        "content": "we produce a simple tool that synthetically generates the computa\u2212",
        "page_index": 5,
        "bbox": [
            317.623,
            106.5520672,
            559.7163648832002,
            115.51846719999999
        ],
        "match": 79
    },
    {
        "content": "hence offer a large and realistic benchmark to evaluate our sched\u2212",
        "page_index": 5,
        "bbox": [
            53.798,
            95.59306720000001,
            295.5558690944001,
            104.5594672
        ],
        "match": 75
    },
    {
        "content": "tional DAG corresponding to four concrete algorithms (conjugate",
        "page_index": 5,
        "bbox": [
            317.955,
            95.59306720000001,
            558.2019948288001,
            104.5594672
        ],
        "match": 79
    },
    {
        "content": "uling algorithms. Our computational DAG database is available at",
        "page_index": 5,
        "bbox": [
            53.798,
            84.63506720000001,
            294.0453265856001,
            93.6014672
        ],
        "match": 75
    },
    {
        "content": "gradient, \ud835\udc58\u2212nearest neighbors, sparse matrix\u2212vector multiplication",
        "page_index": 5,
        "bbox": [
            317.955,
            84.5543696,
            558.2060934656001,
            93.6014672
        ],
        "match": 79
    },
    {
        "content": "6",
        "page_index": 5,
        "bbox": [
            304.379,
            72.68305240000001,
            307.621817,
            79.6568524
        ],
        "match": 67
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 6,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "and iterated matrix\u2212vector multiplication) for a given pattern of",
        "page_index": 6,
        "bbox": [
            53.798,
            698.3330672,
            294.0471288320001,
            707.2994672
        ],
        "match": 79
    },
    {
        "content": "nonzeros in the input matrices/vectors. While this only captures a",
        "page_index": 6,
        "bbox": [
            53.798,
            687.3740672,
            294.04608872960006,
            696.3404672
        ],
        "match": 79
    },
    {
        "content": "few algorithms, it also has the advantage that we can conveniently",
        "page_index": 6,
        "bbox": [
            53.798,
            676.4150672,
            294.2783902208001,
            685.3814672
        ],
        "match": 79
    },
    {
        "content": "generate a large number of computational DAGs (of any desired",
        "page_index": 6,
        "bbox": [
            53.798,
            665.4560672,
            294.04712883200006,
            674.4224672
        ],
        "match": 79
    },
    {
        "content": "size) by running this generator for different matrices of a specific",
        "page_index": 6,
        "bbox": [
            53.798,
            654.4980671999999,
            294.04367676800007,
            663.4644672
        ],
        "match": 79
    },
    {
        "content": "size and density of nonzeros.",
        "page_index": 6,
        "bbox": [
            53.798,
            643.5390672,
            159.37736000000004,
            652.5054672
        ],
        "match": 79
    },
    {
        "content": "As a technical detail, we note that in line with some recent works",
        "page_index": 6,
        "bbox": [
            63.761,
            632.5800671999999,
            294.04379590400004,
            641.5464671999999
        ],
        "match": 80
    },
    {
        "content": "[29, 31], the DAGs in our database are represented in a hypergraph",
        "page_index": 6,
        "bbox": [
            53.798,
            621.6210672,
            294.04092556800003,
            630.5874672
        ],
        "match": 80
    },
    {
        "content": "format (with hyperedges containing a node and all of its direct",
        "page_index": 6,
        "bbox": [
            53.798,
            610.6620671999999,
            294.04712883200006,
            619.6284671999999
        ],
        "match": 80
    },
    {
        "content": "successors), but these are easy to convert back into a DAG format.",
        "page_index": 6,
        "bbox": [
            53.798,
            599.7030672,
            295.4247713600002,
            608.6694672
        ],
        "match": 80
    },
    {
        "content": "6 EXPERIMENTAL SETUP",
        "page_index": 6,
        "bbox": [
            53.798,
            567.0639978999999,
            192.889025,
            577.9730979
        ],
        "match": 81
    },
    {
        "content": "For our experiments, we implemented the algorithms described",
        "page_index": 6,
        "bbox": [
            53.798,
            555.8670672,
            294.04712883200006,
            564.8334672
        ],
        "match": 82
    },
    {
        "content": "above. Since the CBC ILP solver has a convenient Python interface,",
        "page_index": 6,
        "bbox": [
            53.798,
            544.9090672,
            295.02948761600004,
            553.8754672
        ],
        "match": 82
    },
    {
        "content": "we implemented the ILP\u2212based methods in Python, and the rest",
        "page_index": 6,
        "bbox": [
            53.467,
            533.9500671999999,
            294.0453750399999,
            542.9164671999999
        ],
        "match": 82
    },
    {
        "content": "of the algorithms in C++. Our experiments were conducted on a",
        "page_index": 6,
        "bbox": [
            53.798,
            522.9910672,
            294.0471288320001,
            531.9574672
        ],
        "match": 82
    },
    {
        "content": "workstation equipped with Intel Core i9\u221210900 CPU at 2.80GHz and",
        "page_index": 6,
        "bbox": [
            53.467,
            512.0320671999999,
            294.048244288,
            520.9984671999999
        ],
        "match": 82
    },
    {
        "content": "62.5 GiB of RAM.",
        "page_index": 6,
        "bbox": [
            53.798,
            501.0730672,
            117.13664959999998,
            510.0394672
        ],
        "match": 82
    },
    {
        "content": "The up\u2212to\u2212date version of our scheduling framework is available",
        "page_index": 6,
        "bbox": [
            63.761,
            490.1140672,
            294.0437959040001,
            499.0804672
        ],
        "match": 83
    },
    {
        "content": "at https://github.com/Algebraic\u2212Programming/OneStopParallel. We",
        "page_index": 6,
        "bbox": [
            53.798,
            479.1550672,
            294.22107699200006,
            488.1214672
        ],
        "match": 83
    },
    {
        "content": "note that the current version of this scheduling tool has been sig\u2212",
        "page_index": 6,
        "bbox": [
            53.798,
            468.1960672,
            295.5564967424001,
            477.1624672
        ],
        "match": 83
    },
    {
        "content": "scheduling problem",
        "page_index": 6,
        "bbox": [
            402.52000000000004,
            696.9818624,
            471.3729856,
            705.9482624
        ],
        "match": 5
    },
    {
        "content": "(DAG + parameters)",
        "page_index": 6,
        "bbox": [
            404.56600000000003,
            687.0945448,
            469.34953650000006,
            696.2601598
        ],
        "match": null
    },
    {
        "content": "SourceBSPg",
        "page_index": 6,
        "bbox": [
            368.21500000000003,
            650.4878464,
            450.40720000000005,
            659.6752464
        ],
        "match": null
    },
    {
        "content": "ILPinit",
        "page_index": 6,
        "bbox": [
            481.04200000000003,
            650.3398463999999,
            512.4244,
            659.3062464
        ],
        "match": 58
    },
    {
        "content": "HC+HCcsHC+HCcs HC+HCcs",
        "page_index": 6,
        "bbox": [
            361.204,
            620.5798464,
            512.7117999999999,
            629.7435072
        ],
        "match": null
    },
    {
        "content": "select best",
        "page_index": 6,
        "bbox": [
            418.106,
            590.4930671999999,
            455.809712,
            599.4594672
        ],
        "match": 91
    },
    {
        "content": "ILPfull / ILPpart",
        "page_index": 6,
        "bbox": [
            401.886,
            566.2578464,
            472.02940000000007,
            576.7664672
        ],
        "match": 96
    },
    {
        "content": "ILPcs",
        "page_index": 6,
        "bbox": [
            425.75,
            535.8968464,
            448.166,
            544.8632464
        ],
        "match": 67
    },
    {
        "content": "BSP schedule",
        "page_index": 6,
        "bbox": [
            413.961,
            507.6498624,
            459.7434384,
            516.6162624
        ],
        "match": 31
    },
    {
        "content": "Figure 3: Summary of our scheduling framework.",
        "page_index": 6,
        "bbox": [
            337.83,
            485.00376159999996,
            538.3276704,
            493.9701616
        ],
        "match": 89
    },
    {
        "content": "nificantly extended and upgraded since our experiments. For repro\u2212",
        "page_index": 6,
        "bbox": [
            53.798,
            457.2370672,
            295.556711936,
            466.2034672
        ],
        "match": 83
    },
    {
        "content": "so small DAGs). We further added to each of these datasets all the",
        "page_index": 6,
        "bbox": [
            317.955,
            457.2370672,
            558.2023265856002,
            466.2034672
        ],
        "match": 86
    },
    {
        "content": "ducibility, the version of the implementation used for the exper\u2212",
        "page_index": 6,
        "bbox": [
            53.798,
            446.2780672,
            295.5561739520001,
            455.2444672
        ],
        "match": 83
    },
    {
        "content": "coarse\u2212grained instances in the DAG database which has \ud835\udc5b in the",
        "page_index": 6,
        "bbox": [
            317.955,
            446.1973696,
            558.1997064448,
            455.2444672
        ],
        "match": 86
    },
    {
        "content": "iments, as well as the computational DAG database and the data",
        "page_index": 6,
        "bbox": [
            53.798,
            435.3190672,
            294.0471288320001,
            444.28546719999997
        ],
        "match": 83
    },
    {
        "content": "same interval.",
        "page_index": 6,
        "bbox": [
            317.955,
            435.32006720000004,
            369.377304,
            444.2864672
        ],
        "match": 86
    },
    {
        "content": "from our experiments, are available in the repository at [1].",
        "page_index": 6,
        "bbox": [
            53.798,
            424.36106720000004,
            271.3138976000001,
            433.3274672
        ],
        "match": 83
    },
    {
        "content": "Besides the machine parameters in the training set, we exper\u2212",
        "page_index": 6,
        "bbox": [
            327.918,
            424.36106720000004,
            559.7164761600002,
            433.3274672
        ],
        "match": 87
    },
    {
        "content": "In order to tune our algorithms, we first ran some preliminary",
        "page_index": 6,
        "bbox": [
            63.761,
            413.40206720000003,
            294.27759478400014,
            422.3684672
        ],
        "match": 84
    },
    {
        "content": "iment with different values of \u2113, and also with different NUMA",
        "page_index": 6,
        "bbox": [
            317.955,
            413.3213696,
            558.5115895040001,
            422.3684672
        ],
        "match": 87
    },
    {
        "content": "experiments on a small training set of 10 fine\u2212grained computational",
        "page_index": 6,
        "bbox": [
            53.798,
            402.44306720000003,
            294.042164608,
            411.4094672
        ],
        "match": 84
    },
    {
        "content": "parameters. Our NUMA settings each correspond to a binary tree",
        "page_index": 6,
        "bbox": [
            317.955,
            402.44306720000003,
            558.1984620672001,
            411.4094672
        ],
        "match": 87
    },
    {
        "content": "DAGs, with their sizes ranging from \ud835\udc5b = 15 to \ud835\udc5b = 2000, and with",
        "page_index": 6,
        "bbox": [
            53.798,
            389.91494720000003,
            294.045921984,
            400.4504672
        ],
        "match": 84
    },
    {
        "content": "BSP parameter combinations from \ud835\udc43 \u2208 {4, 8, 16} and \ud835\udc54 \u2208 {1, 3, 5},",
        "page_index": 6,
        "bbox": [
            53.798,
            379.1801072,
            295.03106016,
            389.4914672
        ],
        "match": 84
    },
    {
        "content": "and a fixed \u2113 = 5. These initial experiments (discussed in Appendix",
        "page_index": 6,
        "bbox": [
            53.798,
            367.9969472,
            294.26281288959996,
            378.5324672
        ],
        "match": 84
    },
    {
        "content": "C) showed that ILPinit is only competitive when we have very",
        "page_index": 6,
        "bbox": [
            53.798,
            357.0648464,
            294.2805323520001,
            367.5734672
        ],
        "match": 84
    },
    {
        "content": "few processors, while it is rather time\u2212consuming; as such, we chose",
        "page_index": 6,
        "bbox": [
            53.798,
            347.6480672,
            294.045335552,
            356.6144672
        ],
        "match": 84
    },
    {
        "content": "to only apply ILPinit for \ud835\udc43 = 4.",
        "page_index": 6,
        "bbox": [
            53.798,
            335.1199472,
            172.74660800000004,
            345.6554672
        ],
        "match": 84
    },
    {
        "content": "We also observed that the CBC solver can usually return rela\u2212",
        "page_index": 6,
        "bbox": [
            63.761,
            325.7300672,
            295.5594761600001,
            334.6964672
        ],
        "match": 67
    },
    {
        "content": "tively good solutions whenever the number of variables in the ILP",
        "page_index": 6,
        "bbox": [
            53.798,
            314.77206720000004,
            294.043004288,
            323.7384672
        ],
        "match": 67
    },
    {
        "content": "hierarchy over the \ud835\udc43 leaf nodes, with the communication cost in\u2212",
        "page_index": 6,
        "bbox": [
            317.955,
            391.4033696,
            559.7176618752001,
            400.4504672
        ],
        "match": 87
    },
    {
        "content": "creasing by a specific factor \u0394 over each new level, with choices",
        "page_index": 6,
        "bbox": [
            317.955,
            380.5250672,
            558.20284544,
            389.5094
        ],
        "match": 87
    },
    {
        "content": "of \u0394 \u2208 {2, 3, 4}. For example, in case we have \ud835\udc43 = 8 and \u0394 = 3, then",
        "page_index": 6,
        "bbox": [
            317.955,
            367.9969472,
            558.1973402240001,
            378.5504
        ],
        "match": 87
    },
    {
        "content": "the communication costs from the first processor are \ud835\udf061,2 = 1, then",
        "page_index": 6,
        "bbox": [
            317.955,
            357.0379472,
            558.206187136,
            367.5734672
        ],
        "match": 87
    },
    {
        "content": "\ud835\udf061,\ud835\udc5d = 3 for \ud835\udc5d \u2208 {3, 4}, and \ud835\udf061,\ud835\udc5d = 9 for \ud835\udc5d \u2208 {5, 6, 7, 8}.",
        "page_index": 6,
        "bbox": [
            317.821,
            346.0789472,
            502.27360800000014,
            356.6144672
        ],
        "match": 87
    },
    {
        "content": "Finally, we also create a smaller dataset with DAGs of size \ud835\udc5b \u2208",
        "page_index": 6,
        "bbox": [
            327.918,
            335.3441072,
            558.0219904,
            345.6554672
        ],
        "match": 88
    },
    {
        "content": "[50000, 100000], called the huge dataset, in order to observe how",
        "page_index": 6,
        "bbox": [
            318.493,
            324.1878464,
            558.534760384,
            334.6964672
        ],
        "match": 88
    },
    {
        "content": "our simpler algorithms scale to even larger DAGs. We do not study",
        "page_index": 6,
        "bbox": [
            317.955,
            314.77206720000004,
            558.4307994239999,
            323.7384672
        ],
        "match": 88
    },
    {
        "content": "representation is below approximately 4 000; we have used this as",
        "page_index": 6,
        "bbox": [
            53.798,
            303.81306720000003,
            294.0461408512,
            312.7794672
        ],
        "match": 67
    },
    {
        "content": "the ILP\u2212based methods here, since they would be far too time\u2212",
        "page_index": 6,
        "bbox": [
            317.955,
            303.81306720000003,
            559.7131739520001,
            312.7794672
        ],
        "match": 88
    },
    {
        "content": "our guiding principle in ILPpart, choosing to extend the superstep",
        "page_index": 6,
        "bbox": [
            53.798,
            291.31184640000004,
            294.044540352,
            301.8204672
        ],
        "match": 67
    },
    {
        "content": "interval [\ud835\udc601, \ud835\udc602] until the number of variables in the resulting ILP",
        "page_index": 6,
        "bbox": [
            53.798,
            280.5501072,
            294.04393221120006,
            290.8614672
        ],
        "match": 67
    },
    {
        "content": "exceeds 4 000. Besides this, we also noted that the ILP solver rarely",
        "page_index": 6,
        "bbox": [
            53.798,
            270.9360672,
            294.2791098368001,
            279.9024672
        ],
        "match": 67
    },
    {
        "content": "consuming in this case.",
        "page_index": 6,
        "bbox": [
            317.955,
            292.85406720000003,
            403.2075312,
            301.8204672
        ],
        "match": 88
    },
    {
        "content": "For the experiments, we combine our algorithms in the pipeline",
        "page_index": 6,
        "bbox": [
            327.918,
            281.8950672,
            558.2010648959999,
            290.8614672
        ],
        "match": 91
    },
    {
        "content": "shown in Figure 3. We begin by running the initialization heuristics",
        "page_index": 6,
        "bbox": [
            317.955,
            270.9360672,
            558.2023355519999,
            279.9024672
        ],
        "match": 91
    },
    {
        "content": "returns any reasonable solution above 20 000 variables: in this case,",
        "page_index": 6,
        "bbox": [
            53.798,
            259.9770672,
            295.03528300799996,
            268.9434672
        ],
        "match": 67
    },
    {
        "content": "to obtain different initial schedules. We then improve each of these",
        "page_index": 6,
        "bbox": [
            317.955,
            259.9770672,
            558.202335552,
            268.9434672
        ],
        "match": 91
    },
    {
        "content": "even the preprocessing heuristics of CBC can exceed an 1\u2212hour time",
        "page_index": 6,
        "bbox": [
            53.798,
            249.0180672,
            294.04270617599997,
            257.9844672
        ],
        "match": 67
    },
    {
        "content": "limit. Due to this, we only attempt the naive ILPfull approach",
        "page_index": 6,
        "bbox": [
            53.798,
            236.5168464,
            294.043726208,
            247.0254672
        ],
        "match": 67
    },
    {
        "content": "from [28] in very small DAGs, where the estimated number of",
        "page_index": 6,
        "bbox": [
            53.798,
            227.10006719999998,
            294.0484225920001,
            236.0664672
        ],
        "match": 67
    },
    {
        "content": "ILP variables is below 20 000. We point out that this limitation is",
        "page_index": 6,
        "bbox": [
            53.798,
            216.14106719999998,
            294.04710617600006,
            225.1074672
        ],
        "match": 67
    },
    {
        "content": "separately with the local search methods (since running HC+HCcs is",
        "page_index": 6,
        "bbox": [
            317.955,
            247.4758464,
            558.2022545919999,
            257.9844672
        ],
        "match": 91
    },
    {
        "content": "rather inexpensive), and then select the best schedule obtained this",
        "page_index": 6,
        "bbox": [
            317.955,
            238.0590672,
            558.202335552,
            247.0254672
        ],
        "match": 91
    },
    {
        "content": "way. We then use the ILP\u2212based methods: we begin with ILPfull",
        "page_index": 6,
        "bbox": [
            317.623,
            225.5578464,
            558.2013999999999,
            236.0664672
        ],
        "match": 91
    },
    {
        "content": "in the few cases where the number of variables is below 20 000. If",
        "page_index": 6,
        "bbox": [
            317.955,
            216.14106719999998,
            558.2030856319999,
            225.1074672
        ],
        "match": 91
    },
    {
        "content": "partially due to the fact that our work uses an open\u2212source ILP",
        "page_index": 6,
        "bbox": [
            53.798,
            205.18206719999998,
            294.04712883200006,
            214.1484672
        ],
        "match": 67
    },
    {
        "content": "solver; with today\u2019s more powerful commercial ILP solvers, the",
        "page_index": 6,
        "bbox": [
            53.798,
            194.22406719999998,
            294.0471288320001,
            203.1904672
        ],
        "match": 67
    },
    {
        "content": "ILPfull was not applicable, or its solution was not shown to be",
        "page_index": 6,
        "bbox": [
            317.955,
            203.6408464,
            558.1990809600001,
            214.1494672
        ],
        "match": 91
    },
    {
        "content": "optimal by the ILP solver, we apply the further ILP\u2212based methods",
        "page_index": 6,
        "bbox": [
            317.955,
            194.22406719999998,
            558.2006140031999,
            203.1904672
        ],
        "match": 91
    },
    {
        "content": "same approach could be applied to a significantly higher number",
        "page_index": 6,
        "bbox": [
            53.798,
            183.26506719999998,
            294.2158944128,
            192.2314672
        ],
        "match": 67
    },
    {
        "content": "ILPpart and ILPCs.",
        "page_index": 6,
        "bbox": [
            317.955,
            181.72284639999998,
            391.703608,
            192.2314672
        ],
        "match": 91
    },
    {
        "content": "of variables.",
        "page_index": 6,
        "bbox": [
            53.798,
            172.3060672,
            98.0202848,
            181.27246720000002
        ],
        "match": 67
    },
    {
        "content": "For our main experiments, we construct 4 different test sets of",
        "page_index": 6,
        "bbox": [
            63.761,
            161.3470672,
            294.0432978432,
            170.31346720000002
        ],
        "match": 86
    },
    {
        "content": "DAGs, labeled tiny, small, medium and large, with \ud835\udc5b in the ranges",
        "page_index": 6,
        "bbox": [
            53.798,
            148.8458464,
            294.04581241600005,
            159.35446720000002
        ],
        "match": 86
    },
    {
        "content": "[40, 80], [250, 500], [1000, 2000] and [5000, 10000], respectively. We",
        "page_index": 6,
        "bbox": [
            54.336,
            138.0841072,
            294.044321472,
            148.3954672
        ],
        "match": 86
    },
    {
        "content": "generated a set of fine\u2212grained instances with different properties",
        "page_index": 6,
        "bbox": [
            53.798,
            128.4700672,
            294.04804340480007,
            137.4364672
        ],
        "match": 86
    },
    {
        "content": "When ILPfull is applicable, we assign a time limit of 1 hour",
        "page_index": 6,
        "bbox": [
            327.918,
            170.7638464,
            558.37244096,
            181.27246720000002
        ],
        "match": 92
    },
    {
        "content": "to this. We allow 5 minutes for HC+HCcs and 5 minutes for ILPcs",
        "page_index": 6,
        "bbox": [
            317.955,
            159.8048464,
            558.202,
            170.31346720000002
        ],
        "match": 92
    },
    {
        "content": "(although these algorithms rarely time out), and 3 minutes for each",
        "page_index": 6,
        "bbox": [
            317.686,
            150.3880672,
            558.204998336,
            159.35446720000002
        ],
        "match": 92
    },
    {
        "content": "iteration of ILPpart.",
        "page_index": 6,
        "bbox": [
            317.955,
            137.8868464,
            395.200608,
            148.3954672
        ],
        "match": 92
    },
    {
        "content": "When using the multilevel approach, the pipeline begins with",
        "page_index": 6,
        "bbox": [
            327.918,
            128.4700672,
            558.198285312,
            137.4364672
        ],
        "match": 93
    },
    {
        "content": "(varying matrix sizes and iterations to produce some \u201cwider\u201d and",
        "page_index": 6,
        "bbox": [
            53.529,
            117.5110672,
            294.0423865728001,
            126.47746719999999
        ],
        "match": 86
    },
    {
        "content": "a coarsening step (see Figure 4). We then apply the scheduling",
        "page_index": 6,
        "bbox": [
            317.955,
            117.5110672,
            558.2041288319999,
            126.47746719999999
        ],
        "match": 93
    },
    {
        "content": "some \u201cdeeper\u201d DAGs), covering these intervals. This resulted in 12",
        "page_index": 6,
        "bbox": [
            53.798,
            106.5520672,
            294.04502572800004,
            115.51846719999999
        ],
        "match": 86
    },
    {
        "content": "framework shown in Figure 3, and finally refine the DAG in the end.",
        "page_index": 6,
        "bbox": [
            317.955,
            106.5520672,
            559.5819058559999,
            115.51846719999999
        ],
        "match": 93
    },
    {
        "content": "DAGs in the tiny dataset, and 21 in the remaining datasets (the",
        "page_index": 6,
        "bbox": [
            53.798,
            94.0508464,
            294.04914284800003,
            104.5594672
        ],
        "match": 86
    },
    {
        "content": "tiny set is smaller since only a few parameter options can generate",
        "page_index": 6,
        "bbox": [
            53.798,
            83.0928464,
            294.0466174720001,
            93.6014672
        ],
        "match": 86
    },
    {
        "content": "Since the coarsened versions of the DAGs only provide an imprecise",
        "page_index": 6,
        "bbox": [
            317.955,
            95.5940672,
            558.202335552,
            104.56046719999999
        ],
        "match": 93
    },
    {
        "content": "estimation of the real amount of communication required in the",
        "page_index": 6,
        "bbox": [
            317.955,
            84.63506720000001,
            558.204128832,
            93.6014672
        ],
        "match": 93
    },
    {
        "content": "7",
        "page_index": 6,
        "bbox": [
            304.298,
            72.68305240000001,
            307.540817,
            79.6568524
        ],
        "match": 1
    },
    {
        "content": "scheduling problem",
        "page_index": 7,
        "bbox": [
            136.495,
            696.9818624000001,
            205.3479856,
            705.9482624000001
        ],
        "match": 5
    },
    {
        "content": "(DAG + parameters)",
        "page_index": 7,
        "bbox": [
            138.541,
            687.0945448,
            203.3245365,
            696.2601598
        ],
        "match": 5
    },
    {
        "content": "coarsen DAG",
        "page_index": 7,
        "bbox": [
            146.688,
            656.8830672,
            195.17829120000002,
            665.8494672
        ],
        "match": 9
    },
    {
        "content": "base scheduler",
        "page_index": 7,
        "bbox": [
            141.285,
            617.2227616,
            200.57980320000001,
            626.1891616
        ],
        "match": 13
    },
    {
        "content": "schedule for",
        "page_index": 7,
        "bbox": [
            151.86,
            583.8699966,
            189.4310514,
            591.8400966
        ],
        "match": 10
    },
    {
        "content": "coarse DAG",
        "page_index": 7,
        "bbox": [
            152.364,
            575.1199966,
            189.16992180000003,
            583.0900966
        ],
        "match": 9
    },
    {
        "content": "uncoarsen and",
        "page_index": 7,
        "bbox": [
            144.177,
            552.1370671999999,
            197.68847519999997,
            561.1034672
        ],
        "match": 10
    },
    {
        "content": "refine HC",
        "page_index": 7,
        "bbox": [
            160.352,
            542.1740672,
            245.1544,
            554.8262464
        ],
        "match": null
    },
    {
        "content": "HCcs+ILPcs",
        "page_index": 7,
        "bbox": [
            148.23,
            510.99084640000007,
            193.63599999999997,
            520.1545072
        ],
        "match": null
    },
    {
        "content": "BSP schedule",
        "page_index": 7,
        "bbox": [
            147.936,
            482.7438624,
            193.71843840000003,
            491.7102624
        ],
        "match": 31
    },
    {
        "content": "Figure 4: Summary of our multilevel framework. Base sched\u2212",
        "page_index": 7,
        "bbox": [
            53.798,
            460.09776159999996,
            295.653369728,
            469.0641616
        ],
        "match": 13
    },
    {
        "content": "uler refers to the pipeline in Figure 3 (without ILPcs).",
        "page_index": 7,
        "bbox": [
            53.798,
            449.13876159999995,
            270.1382176,
            458.60728
        ],
        "match": 13
    },
    {
        "content": "original DAG, we explicitly run the communication scheduling",
        "page_index": 7,
        "bbox": [
            53.798,
            419.2570672,
            294.047128832,
            428.22346719999996
        ],
        "match": 24
    },
    {
        "content": "algorithms (HCcs and ILPcs) after the uncoarsening phase.",
        "page_index": 7,
        "bbox": [
            53.798,
            406.7558464,
            269.37704319999995,
            417.26446719999996
        ],
        "match": 24
    },
    {
        "content": "7 EMPIRICAL RESULTS",
        "page_index": 7,
        "bbox": [
            53.79799999999999,
            383.6899979,
            180.9217423,
            394.5990979
        ],
        "match": 10
    },
    {
        "content": "On any given problem instance, we evaluate the scheduling algo\u2212",
        "page_index": 7,
        "bbox": [
            53.798,
            372.4940672,
            295.56149999360014,
            381.4604672
        ],
        "match": 10
    },
    {
        "content": "rithms by the ratio between the cost returned by our algorithm and",
        "page_index": 7,
        "bbox": [
            53.798,
            361.5350672,
            294.04533555200004,
            370.5014672
        ],
        "match": 10
    },
    {
        "content": "the baselines. In each dataset/experiment, we then aggregate these",
        "page_index": 7,
        "bbox": [
            53.798,
            350.5760672,
            294.0434526080002,
            359.5424672
        ],
        "match": 10
    },
    {
        "content": "ratios through a geometric mean (this is more accurate for ratios",
        "page_index": 7,
        "bbox": [
            53.798,
            339.6170672,
            294.04266356480014,
            348.5834672
        ],
        "match": 10
    },
    {
        "content": "than the average), to obtain a metric of the overall improvement",
        "page_index": 7,
        "bbox": [
            53.798,
            328.6580672,
            294.04712883200017,
            337.62446719999997
        ],
        "match": 10
    },
    {
        "content": "achieved by our algorithms (with respect to the baselines) on the",
        "page_index": 7,
        "bbox": [
            53.798,
            317.6990672,
            294.043452608,
            326.66546719999997
        ],
        "match": 10
    },
    {
        "content": "dataset. The results in our figures are normalized with respect to",
        "page_index": 7,
        "bbox": [
            53.798,
            306.7400672,
            294.0415696640002,
            315.70646719999996
        ],
        "match": 10
    },
    {
        "content": "the cost of the Cilk baseline.",
        "page_index": 7,
        "bbox": [
            53.798,
            294.2388464,
            159.8256944,
            304.74746719999996
        ],
        "match": 10
    },
    {
        "content": "As for our remaining baselines, we found that ETF and BL\u2212EST",
        "page_index": 7,
        "bbox": [
            63.761,
            283.2798464,
            294.2692,
            293.78846719999996
        ],
        "match": 11
    },
    {
        "content": "are consistently outperformed by HDagg, so out of these, we only",
        "page_index": 7,
        "bbox": [
            53.798,
            272.3218464,
            294.27958776319997,
            282.8304672
        ],
        "match": 11
    },
    {
        "content": "include HDagg in our figures and tables. The schedules achieved by",
        "page_index": 7,
        "bbox": [
            53.798,
            261.3628464,
            294.27423207680005,
            271.8714672
        ],
        "match": 11
    },
    {
        "content": "ETF and BL\u2212EST are briefly discussed in Appendix C.",
        "page_index": 7,
        "bbox": [
            53.798,
            250.4038464,
            246.14518080000005,
            260.9124672
        ],
        "match": 11
    },
    {
        "content": "For simplicity, besides the baselines, our diagrams only show the",
        "page_index": 7,
        "bbox": [
            63.761,
            240.98706719999998,
            294.043795904,
            249.9534672
        ],
        "match": 5
    },
    {
        "content": "best initialization method (labelled Init), the cost after applying",
        "page_index": 7,
        "bbox": [
            53.798,
            228.48584639999999,
            294.040913216,
            238.9944672
        ],
        "match": 5
    },
    {
        "content": "HC+HCcs (labelled HCcs), and the final cost after all the ILP methods",
        "page_index": 7,
        "bbox": [
            53.798,
            217.52684639999998,
            294.04286259200006,
            228.0354672
        ],
        "match": 5
    },
    {
        "content": "(labelled ILP). More details on the results (e.g. improvements by",
        "page_index": 7,
        "bbox": [
            53.529,
            206.56784639999998,
            294.28117235200006,
            217.0764672
        ],
        "match": 5
    },
    {
        "content": "each separate ILP method) are also provided in Appendix C.",
        "page_index": 7,
        "bbox": [
            53.798,
            197.1510672,
            273.19684159999997,
            206.11746720000002
        ],
        "match": 5
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 7,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": 4
    },
    {
        "content": "A detailed analysis also shows that this improvement factor de\u2212",
        "page_index": 7,
        "bbox": [
            327.918,
            698.3330672,
            559.7192557440001,
            707.2994672
        ],
        "match": 13
    },
    {
        "content": "pends on the choice of parameters and dataset. In particular, Table 1",
        "page_index": 7,
        "bbox": [
            317.955,
            687.3740672,
            558.4044382080001,
            696.3404672
        ],
        "match": 13
    },
    {
        "content": "shows the cost reduction with respect to the baselines, separated",
        "page_index": 7,
        "bbox": [
            317.955,
            676.4150672,
            558.2004526080001,
            685.3814672
        ],
        "match": 13
    },
    {
        "content": "according to \ud835\udc54 and \ud835\udc43 (left), and \ud835\udc54 and the dataset (right). The table",
        "page_index": 7,
        "bbox": [
            317.955,
            665.3753696,
            558.1994285055999,
            674.4224672
        ],
        "match": 13
    },
    {
        "content": "shows that the improvement ranges from 32% to 51% compared to",
        "page_index": 7,
        "bbox": [
            317.955,
            654.4980671999999,
            558.1997925504,
            663.4644672
        ],
        "match": 13
    },
    {
        "content": "Cilk, and from 13% to 40% compared to HDagg. We can observe",
        "page_index": 7,
        "bbox": [
            317.955,
            641.9968464,
            558.197261824,
            652.5054672
        ],
        "match": 13
    },
    {
        "content": "that the difference between our scheduler and the baselines consis\u2212",
        "page_index": 7,
        "bbox": [
            317.955,
            632.5800671999999,
            559.7211361152,
            641.5464671999999
        ],
        "match": 13
    },
    {
        "content": "tently grows larger with higher \ud835\udc54; this is because communication",
        "page_index": 7,
        "bbox": [
            317.955,
            621.5403696,
            558.2048789119999,
            630.5874672
        ],
        "match": 13
    },
    {
        "content": "costs become more dominant, but these are not (accurately) con\u2212",
        "page_index": 7,
        "bbox": [
            317.955,
            610.6620671999999,
            559.7131739520001,
            619.6284671999999
        ],
        "match": 13
    },
    {
        "content": "sidered by the baselines. The same holds for larger \ud835\udc43 values, since",
        "page_index": 7,
        "bbox": [
            317.955,
            599.6223696,
            558.2014306048001,
            608.6694672
        ],
        "match": 13
    },
    {
        "content": "this often result in more data that needs to be communicated in",
        "page_index": 7,
        "bbox": [
            317.955,
            588.7440671999999,
            558.204128832,
            597.7104671999999
        ],
        "match": 13
    },
    {
        "content": "a schedule. As for the size of the dataset, the tables suggest that",
        "page_index": 7,
        "bbox": [
            317.955,
            577.7850672,
            558.2041288320002,
            586.7514672
        ],
        "match": 13
    },
    {
        "content": "the improvement compared to Cilk is mostly unaffected, while",
        "page_index": 7,
        "bbox": [
            317.955,
            565.2838464,
            558.2043898239999,
            575.7924672
        ],
        "match": 13
    },
    {
        "content": "the improvement compared to HDagg becomes smaller for large",
        "page_index": 7,
        "bbox": [
            317.955,
            554.3248464,
            558.1985861119999,
            564.8334672
        ],
        "match": 13
    },
    {
        "content": "datasets. This is likely because our schedulers come with a higher",
        "page_index": 7,
        "bbox": [
            317.955,
            544.9090672,
            558.372517824,
            553.8754672
        ],
        "match": 13
    },
    {
        "content": "time complexity, and hence they do not scale as well as HDagg;",
        "page_index": 7,
        "bbox": [
            317.955,
            532.4078463999999,
            558.838391808,
            542.9164671999999
        ],
        "match": 13
    },
    {
        "content": "improving this property is a strong candidate for our future work.",
        "page_index": 7,
        "bbox": [
            317.955,
            522.9910672,
            559.5808388544001,
            531.9574672
        ],
        "match": 13
    },
    {
        "content": "However, we note that even in this cases, our schedules are still",
        "page_index": 7,
        "bbox": [
            317.955,
            512.0320671999999,
            558.204128832,
            520.9984671999999
        ],
        "match": 13
    },
    {
        "content": "consistently better than those returned by HDagg.",
        "page_index": 7,
        "bbox": [
            317.955,
            499.53084640000003,
            498.48360799999995,
            510.0394672
        ],
        "match": 13
    },
    {
        "content": "In order to understand the role of each of our different algo\u2212",
        "page_index": 7,
        "bbox": [
            327.918,
            490.1140672,
            559.7164761600001,
            499.0804672
        ],
        "match": 10
    },
    {
        "content": "rithmic ingredients, we also show the cost ratios achieved by the",
        "page_index": 7,
        "bbox": [
            317.955,
            479.1550672,
            558.2002912128,
            488.1214672
        ],
        "match": 10
    },
    {
        "content": "algorithms (compared to Cilk), separated for different values of \ud835\udc54,",
        "page_index": 7,
        "bbox": [
            317.955,
            466.6538464,
            559.187690176,
            477.1624672
        ],
        "match": 10
    },
    {
        "content": "in Figure 5. The figure shows that while the initialization heuris\u2212",
        "page_index": 7,
        "bbox": [
            317.955,
            457.2370672,
            559.7131739520001,
            466.2034672
        ],
        "match": 10
    },
    {
        "content": "tics are already much more efficient than the baselines, the local",
        "page_index": 7,
        "bbox": [
            317.955,
            446.2780672,
            558.2041288319999,
            455.2444672
        ],
        "match": 10
    },
    {
        "content": "search and ILP methods both achieve some further improvement.",
        "page_index": 7,
        "bbox": [
            317.955,
            435.3190672,
            559.5799870464001,
            444.28546719999997
        ],
        "match": 10
    },
    {
        "content": "In Appendix C, we also discuss the role of the different algorithms",
        "page_index": 7,
        "bbox": [
            317.955,
            424.36106720000004,
            558.2038598400001,
            433.3274672
        ],
        "match": 10
    },
    {
        "content": "in more detail; for instance, the ILP\u2212based methods tend to result in",
        "page_index": 7,
        "bbox": [
            317.955,
            413.40206720000003,
            558.202335552,
            422.3684672
        ],
        "match": 10
    },
    {
        "content": "a more significant improvement on the smaller datasets, and only a",
        "page_index": 7,
        "bbox": [
            317.955,
            402.44306720000003,
            558.202335552,
            411.4094672
        ],
        "match": 10
    },
    {
        "content": "minor improvement for larger DAGs.",
        "page_index": 7,
        "bbox": [
            317.955,
            391.4840672,
            454.0380528,
            400.4504672
        ],
        "match": 10
    },
    {
        "content": "We also considered the effect of the latency parameter \u2113 on our",
        "page_index": 7,
        "bbox": [
            327.918,
            380.4443696,
            558.3727068415999,
            389.4914672
        ],
        "match": 13
    },
    {
        "content": "schedules separately (see Appendix C for details). Our experiments",
        "page_index": 7,
        "bbox": [
            317.955,
            369.5660672,
            558.202335552,
            378.5324672
        ],
        "match": null
    },
    {
        "content": "show that the difference between our scheduler and the baselines",
        "page_index": 7,
        "bbox": [
            317.955,
            358.6070672,
            558.203456352,
            367.5734672
        ],
        "match": 13
    },
    {
        "content": "also grows for larger values of \u2113, although not as rapidly and as",
        "page_index": 7,
        "bbox": [
            317.955,
            347.5673696,
            558.198438848,
            356.6144672
        ],
        "match": 12
    },
    {
        "content": "consistently as for the parameter \ud835\udc54. This is in line with our previous",
        "page_index": 7,
        "bbox": [
            317.955,
            336.6083696,
            558.2033921919999,
            345.6554672
        ],
        "match": 13
    },
    {
        "content": "observations, since the latency \u2113 is essentially a different kind of",
        "page_index": 7,
        "bbox": [
            317.955,
            325.6493696,
            558.1999415040001,
            334.6964672
        ],
        "match": 13
    },
    {
        "content": "communication cost, which is once again not considered by the",
        "page_index": 7,
        "bbox": [
            317.955,
            314.77206720000004,
            558.2041288319999,
            323.7384672
        ],
        "match": 13
    },
    {
        "content": "baseline methods.",
        "page_index": 7,
        "bbox": [
            317.955,
            303.81306720000003,
            383.2214256,
            312.7794672
        ],
        "match": 13
    },
    {
        "content": "For our preliminary experiments on the huge dataset, we only",
        "page_index": 7,
        "bbox": [
            327.918,
            291.31184640000004,
            558.4318148544,
            301.8204672
        ],
        "match": 13
    },
    {
        "content": "applied the non\u2212ILP methods from our algorithmic framework:",
        "page_index": 7,
        "bbox": [
            317.955,
            281.8950672,
            559.2558875520002,
            290.8614672
        ],
        "match": 13
    },
    {
        "content": "BSPg and Source, followed by HC+HCcs with a larger time limit of",
        "page_index": 7,
        "bbox": [
            317.955,
            269.39384640000003,
            558.1975547136,
            279.9024672
        ],
        "match": 13
    },
    {
        "content": "30 minutes. Even for this larger dataset, our scheduler achieves an",
        "page_index": 7,
        "bbox": [
            317.955,
            259.9770672,
            558.2005057664,
            268.9434672
        ],
        "match": 13
    },
    {
        "content": "improvement ranging from 15% to 41% compared to Cilk, and a",
        "page_index": 7,
        "bbox": [
            317.955,
            247.4758464,
            558.200817344,
            257.9844672
        ],
        "match": 13
    },
    {
        "content": "more marginal improvement from 6% to 13% compared to HDagg",
        "page_index": 7,
        "bbox": [
            317.955,
            236.5168464,
            558.202,
            247.0254672
        ],
        "match": 13
    },
    {
        "content": "(details again in Appendix C). This demonstrates that our general",
        "page_index": 7,
        "bbox": [
            317.686,
            227.10006719999998,
            558.1995300352002,
            236.0664672
        ],
        "match": 13
    },
    {
        "content": "approach also scales reasonably well to computational DAGs with",
        "page_index": 7,
        "bbox": [
            317.955,
            216.14106719999998,
            558.203904672,
            225.1074672
        ],
        "match": 13
    },
    {
        "content": "up to 100 000 nodes.",
        "page_index": 7,
        "bbox": [
            317.955,
            205.18206719999998,
            391.62910239999997,
            214.1484672
        ],
        "match": 13
    },
    {
        "content": "7.1 Without NUMA",
        "page_index": 7,
        "bbox": [
            53.798,
            172.54299790000002,
            157.3362681,
            183.4520979
        ],
        "match": 13
    },
    {
        "content": "7.2 With NUMA effects",
        "page_index": 7,
        "bbox": [
            317.955,
            172.5429979,
            439.8751016,
            183.45209789999998
        ],
        "match": 5
    },
    {
        "content": "We first run our schedulers on the tiny, small, medium and large",
        "page_index": 7,
        "bbox": [
            53.368,
            159.8048464,
            294.045,
            170.31346720000002
        ],
        "match": 13
    },
    {
        "content": "datasets, for \ud835\udc43 \u2208 {4, 8, 16}, \ud835\udc54 \u2208 {1, 3, 5} and \u2113 = 5, without NUMA.",
        "page_index": 7,
        "bbox": [
            53.798,
            148.8189472,
            295.429789376,
            159.35446720000002
        ],
        "match": null
    },
    {
        "content": "Over the combination of all parameters and datasets, the mean",
        "page_index": 7,
        "bbox": [
            53.798,
            139.4290672,
            294.04712883200017,
            148.3954672
        ],
        "match": 13
    },
    {
        "content": "cost ratio between Cilk and our scheduler is 0.56, while the cost",
        "page_index": 7,
        "bbox": [
            53.798,
            126.92784639999999,
            294.04828748799997,
            137.4364672
        ],
        "match": 13
    },
    {
        "content": "ratio between HDagg and our scheduler is 0.76. This means that our",
        "page_index": 7,
        "bbox": [
            53.798,
            115.96884639999999,
            294.217496,
            126.47746719999999
        ],
        "match": 13
    },
    {
        "content": "approach indeed returns schedules with significantly lower cost",
        "page_index": 7,
        "bbox": [
            53.798,
            106.5520672,
            294.04712883200006,
            115.51846719999999
        ],
        "match": 13
    },
    {
        "content": "When we extend the BSP model with NUMA effects, the improve\u2212",
        "page_index": 7,
        "bbox": [
            317.525,
            161.3470672,
            559.7162869376,
            170.31346720000002
        ],
        "match": 5
    },
    {
        "content": "ments achieved by our scheduler are even larger. On average over",
        "page_index": 7,
        "bbox": [
            317.955,
            150.3880672,
            558.3739345152003,
            159.35446720000002
        ],
        "match": 5
    },
    {
        "content": "all the parameters \ud835\udc43 \u2208 {8, 16} and \u0394 \u2208 {2, 3, 4}, our method provides",
        "page_index": 7,
        "bbox": [
            317.955,
            138.0841072,
            558.19781152,
            148.4134
        ],
        "match": null
    },
    {
        "content": "a 60% improvement compared to Cilk and a 43% improvement",
        "page_index": 7,
        "bbox": [
            317.955,
            126.92784639999999,
            558.197423616,
            137.4364672
        ],
        "match": 5
    },
    {
        "content": "compared to HDagg.",
        "page_index": 7,
        "bbox": [
            317.955,
            115.96884639999999,
            390.241608,
            126.47746719999999
        ],
        "match": 5
    },
    {
        "content": "The results in this setting show an even stronger dependency",
        "page_index": 7,
        "bbox": [
            327.918,
            106.5520672,
            558.43607424,
            115.51846719999999
        ],
        "match": 13
    },
    {
        "content": "than the baselines: it achieves a 44% cost reduction compared to",
        "page_index": 7,
        "bbox": [
            53.798,
            95.59306720000001,
            294.043465152,
            104.5594672
        ],
        "match": 13
    },
    {
        "content": "on \ud835\udc43 and the NUMA multiplier \u0394: the improvement consistently",
        "page_index": 7,
        "bbox": [
            317.955,
            95.5123696,
            558.436640064,
            104.57740000000001
        ],
        "match": 13
    },
    {
        "content": "Cilk, and a 24% reduction compared to HDagg.",
        "page_index": 7,
        "bbox": [
            53.798,
            83.0928464,
            223.952608,
            93.6014672
        ],
        "match": 13
    },
    {
        "content": "grows in both of these parameters, as also illustrated in Figure 6",
        "page_index": 7,
        "bbox": [
            317.955,
            84.63506720000001,
            558.204128832,
            93.6014672
        ],
        "match": 13
    },
    {
        "content": "8",
        "page_index": 7,
        "bbox": [
            304.379,
            72.68305240000001,
            307.621817,
            79.6568524
        ],
        "match": 6
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 8,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "Table 1: Results achieved by our scheduler (in a NUMA\u2212free setting), restricted to given values of \ud835\udc54, \ud835\udc43 and given datasets. The",
        "page_index": 8,
        "bbox": [
            53.502,
            698.5717616000001,
            558.1978590336,
            709.5107696
        ],
        "match": 13
    },
    {
        "content": "two numbers in each cell show the reduction in cost compared to Cilk and HDagg, respectively.",
        "page_index": 8,
        "bbox": [
            53.798,
            687.6127616,
            434.28609919999997,
            697.08128
        ],
        "match": 13
    },
    {
        "content": "\ud835\udc54 = 1 \ud835\udc54 = 3 \ud835\udc54 = 5",
        "page_index": 8,
        "bbox": [
            133.377,
            660.2409471999999,
            245.63137600000002,
            670.7764672
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc54 = 1 \ud835\udc54 = 3 \ud835\udc54 = 5",
        "page_index": 8,
        "bbox": [
            372.965,
            660.9629471999999,
            485.220376,
            671.4984671999999
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc43 = 4 32% / 20% 40% / 24% 44% / 26%",
        "page_index": 8,
        "bbox": [
            90.435,
            638.5419472,
            254.40434879999998,
            649.0774672
        ],
        "match": 96
    },
    {
        "content": "tiny 32% / 26% 40% / 35% 43% / 40%",
        "page_index": 8,
        "bbox": [
            329.472,
            639.2908464,
            493.99334880000004,
            649.7994672
        ],
        "match": 97
    },
    {
        "content": "\ud835\udc43 = 8 40% / 21% 45% / 25% 45% / 25%",
        "page_index": 8,
        "bbox": [
            90.435,
            621.1569472,
            254.40434879999998,
            631.6924672
        ],
        "match": 96
    },
    {
        "content": "small 38% / 22% 44% / 30% 46% / 32%",
        "page_index": 8,
        "bbox": [
            327.231,
            621.9068464,
            493.99334880000004,
            632.4154672
        ],
        "match": 97
    },
    {
        "content": "\ud835\udc43 = 16 43% / 18% 49% / 26% 51% / 30%",
        "page_index": 8,
        "bbox": [
            88.35,
            603.7719472,
            254.40434879999998,
            614.3074672
        ],
        "match": 96
    },
    {
        "content": "medium 43% / 17% 47% / 21% 49% / 23%",
        "page_index": 8,
        "bbox": [
            324.989,
            604.5218464,
            493.99334880000004,
            615.0304672
        ],
        "match": 97
    },
    {
        "content": "large 41% / 13% 46% / 14% 48% / 15%",
        "page_index": 8,
        "bbox": [
            327.231,
            587.1368464,
            493.99334880000004,
            597.6454672
        ],
        "match": 97
    },
    {
        "content": "1",
        "page_index": 8,
        "bbox": [
            73.54019323000001,
            559.792802975024,
            77.19119071192002,
            567.644410463024
        ],
        "match": 2
    },
    {
        "content": "0.5",
        "page_index": 8,
        "bbox": [
            67.90262977,
            507.529579497632,
            77.19119071192,
            515.451851453024
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 8,
        "bbox": [
            73.54019323000001,
            455.37440949502405,
            77.19119071192002,
            463.226016983024
        ],
        "match": 1
    },
    {
        "content": "1",
        "page_index": 8,
        "bbox": [
            239.43531756000002,
            559.792802975024,
            243.08631504192002,
            567.644410463024
        ],
        "match": 2
    },
    {
        "content": "0.5",
        "page_index": 8,
        "bbox": [
            233.79775410000002,
            507.529579497632,
            243.08631504192002,
            515.451851453024
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 8,
        "bbox": [
            239.43531756000002,
            455.37440949502405,
            243.08631504192002,
            463.226016983024
        ],
        "match": 1
    },
    {
        "content": "1",
        "page_index": 8,
        "bbox": [
            405.33131756,
            559.792802975024,
            408.98231504192,
            567.644410463024
        ],
        "match": 2
    },
    {
        "content": "0.5",
        "page_index": 8,
        "bbox": [
            399.6937541,
            507.529579497632,
            408.98231504191995,
            515.451851453024
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 8,
        "bbox": [
            405.33131756,
            455.37440949502405,
            408.98231504192,
            463.226016983024
        ],
        "match": 1
    },
    {
        "content": "Cilk HDagg Init HCcs ILP",
        "page_index": 8,
        "bbox": [
            89.57808928,
            444.713809567088,
            202.917458452,
            452.788712905088
        ],
        "match": null
    },
    {
        "content": "Cilk HDagg Init HCcs ILP",
        "page_index": 8,
        "bbox": [
            255.47408928000002,
            444.713809567088,
            368.81258278200005,
            452.788712905088
        ],
        "match": 12
    },
    {
        "content": "Cilk HDagg Init HCcs ILP",
        "page_index": 8,
        "bbox": [
            421.37008928,
            444.713809567088,
            534.7085827819999,
            452.788712905088
        ],
        "match": null
    },
    {
        "content": "\ud835\udc54 = 1",
        "page_index": 8,
        "bbox": [
            138.66552247,
            433.307420414624,
            155.40165676192,
            442.533059213024
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc54 = 3",
        "page_index": 8,
        "bbox": [
            304.5606468,
            433.307420414624,
            321.29678109191997,
            442.533059213024
        ],
        "match": null
    },
    {
        "content": "\ud835\udc54 = 5",
        "page_index": 8,
        "bbox": [
            470.45664680000004,
            433.307420414624,
            487.19278109192,
            442.533059213024
        ],
        "match": 33
    },
    {
        "content": "Figure 5: Performance comparison of Cilk, HDagg and our scheduling algorithms without NUMA effects, for values \ud835\udc54 \u2208 {1, 3, 5}.",
        "page_index": 8,
        "bbox": [
            53.798,
            408.54976159999995,
            558.1203601792,
            419.56946719999996
        ],
        "match": 13
    },
    {
        "content": "(let us ignore the ML column in the figure for now). In particular,",
        "page_index": 8,
        "bbox": [
            53.529,
            380.8658464,
            295.03525984000004,
            391.37446719999997
        ],
        "match": 13
    },
    {
        "content": "for the case of \ud835\udc43 = 8 and \u0394 = 2, the improvement is only 48%",
        "page_index": 8,
        "bbox": [
            53.798,
            369.8799472,
            294.331355776,
            380.4334
        ],
        "match": 13
    },
    {
        "content": "compared to Cilk and only 27% compared to HDagg. On the other",
        "page_index": 8,
        "bbox": [
            53.798,
            358.9478464,
            294.2168379648,
            369.45646719999996
        ],
        "match": 13
    },
    {
        "content": "hand, when we have \ud835\udc43 = 16 and \u0394 = 4, the schedule returned by",
        "page_index": 8,
        "bbox": [
            53.798,
            347.96294720000003,
            294.28112883200004,
            358.51640000000003
        ],
        "match": 13
    },
    {
        "content": "our algorithm has a 71% lower cost than Cilk, and a 58% lower cost",
        "page_index": 8,
        "bbox": [
            53.798,
            337.03084640000003,
            294.044109248,
            347.5394672
        ],
        "match": 13
    },
    {
        "content": "than HDagg. We also show the concrete improvements for each case",
        "page_index": 8,
        "bbox": [
            53.798,
            326.0718464,
            294.0429146240001,
            336.5804672
        ],
        "match": 13
    },
    {
        "content": "in a numerical format in Table 2.",
        "page_index": 8,
        "bbox": [
            53.798,
            316.6550672,
            173.3021792,
            325.6214672
        ],
        "match": 13
    },
    {
        "content": "Note that the case of \ud835\udc43 = 16 and \u0394 = 4 amounts to a very sig\u2212",
        "page_index": 8,
        "bbox": [
            63.761,
            304.1269472,
            295.558737792,
            314.6804
        ],
        "match": 13
    },
    {
        "content": "nificant improvement in scheduling cost: more than a 3\u00d7 factor",
        "page_index": 8,
        "bbox": [
            53.798,
            293.3921072,
            294.214852736,
            303.7034672
        ],
        "match": 13
    },
    {
        "content": "for Cilk, and almost a 2.5\u00d7 factor for HDagg. Moreover, since \u0394 is",
        "page_index": 8,
        "bbox": [
            53.798,
            282.2358464,
            294.0444975616,
            292.7624
        ],
        "match": 13
    },
    {
        "content": "often indeed large in practice, one might argue that this is the most",
        "page_index": 8,
        "bbox": [
            53.798,
            272.8190672,
            294.045335552,
            281.78546719999997
        ],
        "match": 13
    },
    {
        "content": "realistic among our parameters for capturing today\u2019s computing ar\u2212",
        "page_index": 8,
        "bbox": [
            53.798,
            261.8600672,
            295.556711936,
            270.82646719999997
        ],
        "match": 13
    },
    {
        "content": "chitectures. Altogether, this suggests that our approach may indeed",
        "page_index": 8,
        "bbox": [
            53.798,
            250.9010672,
            294.04533555200004,
            259.8674672
        ],
        "match": 13
    },
    {
        "content": "be able to provide significantly better schedules for many relevant",
        "page_index": 8,
        "bbox": [
            53.798,
            239.9420672,
            294.04300428800013,
            248.90846720000002
        ],
        "match": null
    },
    {
        "content": "applications.",
        "page_index": 8,
        "bbox": [
            53.798,
            228.9840672,
            100.04669119999998,
            237.95046720000002
        ],
        "match": null
    },
    {
        "content": "We also point out that the local search and ILP methods also",
        "page_index": 8,
        "bbox": [
            63.761,
            218.0250672,
            294.041285312,
            226.99146720000002
        ],
        "match": 5
    },
    {
        "content": "become much more important ingredients in this NUMA setting,",
        "page_index": 8,
        "bbox": [
            53.798,
            207.0660672,
            295.0273715456,
            216.0324672
        ],
        "match": 5
    },
    {
        "content": "achieving a notably larger further improvement than in the case",
        "page_index": 8,
        "bbox": [
            53.798,
            196.1070672,
            294.04712883200006,
            205.0734672
        ],
        "match": 5
    },
    {
        "content": "without NUMA.",
        "page_index": 8,
        "bbox": [
            53.466,
            185.14806719999999,
            112.7428704,
            194.1144672
        ],
        "match": 5
    },
    {
        "content": "7.3 Multilevel scheduling",
        "page_index": 8,
        "bbox": [
            53.798,
            161.5849979,
            185.8744737,
            172.49409789999999
        ],
        "match": 5
    },
    {
        "content": "Finally, we analyze our multilevel scheduling method, which was",
        "page_index": 8,
        "bbox": [
            53.798,
            150.3880672,
            294.0405654272,
            159.35446720000002
        ],
        "match": 5
    },
    {
        "content": "designed particularly for the case when communication costs are",
        "page_index": 8,
        "bbox": [
            53.798,
            139.4290672,
            294.0485006912001,
            148.3954672
        ],
        "match": 5
    },
    {
        "content": "Table 2: Cost reduction achieved by our base scheduler in a",
        "page_index": 8,
        "bbox": [
            317.659,
            382.6467616,
            558.2032309887999,
            391.6131616
        ],
        "match": 13
    },
    {
        "content": "setting with NUMA effects, for different values of \ud835\udc43 and \u0394,",
        "page_index": 8,
        "bbox": [
            317.955,
            371.6877616,
            559.2955576319999,
            382.72540000000004
        ],
        "match": 13
    },
    {
        "content": "compared to Cilk and HDagg, respectively.",
        "page_index": 8,
        "bbox": [
            317.955,
            360.7287616,
            485.60809919999997,
            370.19728000000003
        ],
        "match": 13
    },
    {
        "content": "\u0394 = 2 \u0394 = 3 \u0394 = 4",
        "page_index": 8,
        "bbox": [
            398.39,
            333.3129472,
            511.78337600000003,
            343.8664
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc43 = 8 48% / 27% 55% / 35% 61% / 42%",
        "page_index": 8,
        "bbox": [
            355.748,
            310.51794720000004,
            519.7183488000001,
            321.0534672
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 16 57% / 36% 67% / 51% 71% / 58%",
        "page_index": 8,
        "bbox": [
            353.664,
            292.03694720000004,
            519.7183488000001,
            302.5724672
        ],
        "match": null
    },
    {
        "content": "are often barely better (or in several cases, in fact, even worse) than",
        "page_index": 8,
        "bbox": [
            317.955,
            260.4850672,
            558.2023355520001,
            269.45146719999997
        ],
        "match": 13
    },
    {
        "content": "the trivial solution of assigning all nodes to the same processor",
        "page_index": 8,
        "bbox": [
            317.955,
            249.5260672,
            558.3687519360001,
            258.4924672
        ],
        "match": 13
    },
    {
        "content": "and superstep. Our multilevel algorithm, on the other hand, is",
        "page_index": 8,
        "bbox": [
            317.955,
            238.5670672,
            558.204128832,
            247.53346720000002
        ],
        "match": 13
    },
    {
        "content": "able to find good solutions even in this rather challenging setting,",
        "page_index": 8,
        "bbox": [
            317.955,
            227.6090672,
            559.1912577408001,
            236.57546720000002
        ],
        "match": 13
    },
    {
        "content": "consistently beating this trivial baseline.",
        "page_index": 8,
        "bbox": [
            317.955,
            216.6500672,
            465.407448,
            225.61646720000002
        ],
        "match": 13
    },
    {
        "content": "The cost ratio of the multilevel method to the other schedulers is",
        "page_index": 8,
        "bbox": [
            327.918,
            205.6910672,
            558.2007959040001,
            214.6574672
        ],
        "match": 13
    },
    {
        "content": "also shown in Figure 6 for different values of \ud835\udc43 and \u0394. For complete\u2212",
        "page_index": 8,
        "bbox": [
            317.955,
            194.6513696,
            559.7208882560001,
            203.7164
        ],
        "match": 13
    },
    {
        "content": "ness, we also show the improvement values in numerical format in",
        "page_index": 8,
        "bbox": [
            317.955,
            183.77306719999999,
            558.202335552,
            192.7394672
        ],
        "match": 13
    },
    {
        "content": "Table 3. The figure shows that when communication costs are high",
        "page_index": 8,
        "bbox": [
            317.686,
            172.81406719999998,
            558.2057347840001,
            181.7804672
        ],
        "match": 13
    },
    {
        "content": "(e.g. if we have \u0394 = 4, or if we only have \u0394 = 3 but \ud835\udc43 = 16, and hence",
        "page_index": 8,
        "bbox": [
            317.686,
            160.28594719999998,
            558.202315776,
            170.83939999999998
        ],
        "match": null
    },
    {
        "content": "there are NUMA coefficients as high as \ud835\udf061,16 = \u0394log2\ud835\udc43 \u22121 = 27 in our",
        "page_index": 8,
        "bbox": [
            317.955,
            148.8189472,
            558.3739511552001,
            160.9191546
        ],
        "match": 13
    },
    {
        "content": "binary hierarchy), then the multilevel method is able to consider\u2212",
        "page_index": 8,
        "bbox": [
            317.955,
            139.4290672,
            559.7184999936001,
            148.3954672
        ],
        "match": 13
    },
    {
        "content": "very high. For instance, in our previous setting for the highest",
        "page_index": 8,
        "bbox": [
            53.574,
            128.4700672,
            294.04262630400007,
            137.4364672
        ],
        "match": 5
    },
    {
        "content": "ably outperform our base scheduler. For the highest choice of \ud835\udc43 and",
        "page_index": 8,
        "bbox": [
            317.955,
            128.3893696,
            558.20154336,
            137.4364672
        ],
        "match": 13
    },
    {
        "content": "choice of \u0394 = 4, we have seen that our scheduler is notably better",
        "page_index": 8,
        "bbox": [
            53.798,
            115.9419472,
            294.2198348992,
            126.49539999999999
        ],
        "match": 5
    },
    {
        "content": "than the baselines. However, this is only their relative performance;",
        "page_index": 8,
        "bbox": [
            53.798,
            106.5520672,
            294.67800473600016,
            115.51846719999999
        ],
        "match": 5
    },
    {
        "content": "in fact, both our scheduler and the baselines perform rather poorly",
        "page_index": 8,
        "bbox": [
            53.798,
            95.59306720000001,
            294.28029109760007,
            104.5594672
        ],
        "match": 5
    },
    {
        "content": "in this setting, and even the solutions returned by our scheduler",
        "page_index": 8,
        "bbox": [
            53.798,
            84.63506720000001,
            294.211751936,
            93.6014672
        ],
        "match": 5
    },
    {
        "content": "\u0394, the multilevel algorithm finds solutions that on average provide",
        "page_index": 8,
        "bbox": [
            318.045,
            117.5110672,
            558.2004045440001,
            126.49539999999999
        ],
        "match": 13
    },
    {
        "content": "a further factor 2\u00d7 improvement to our base scheduler. Altogether,",
        "page_index": 8,
        "bbox": [
            317.955,
            105.2071072,
            559.1882332672001,
            115.51846719999999
        ],
        "match": 13
    },
    {
        "content": "this amounts to a very significant, almost a factor 5\u00d7 cost reduction,",
        "page_index": 8,
        "bbox": [
            317.955,
            94.2481072,
            559.1882000640001,
            104.5594672
        ],
        "match": 13
    },
    {
        "content": "even compared to HDagg.",
        "page_index": 8,
        "bbox": [
            317.955,
            83.0928464,
            409.68060799999995,
            93.6014672
        ],
        "match": 13
    },
    {
        "content": "9",
        "page_index": 8,
        "bbox": [
            304.37899999999996,
            72.68305240000001,
            307.62181699999996,
            79.6568524
        ],
        "match": 1
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 9,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": 4
    },
    {
        "content": "1",
        "page_index": 9,
        "bbox": [
            236.88788643999996,
            693.111845546576,
            240.12886748607997,
            700.0816972585759
        ],
        "match": 2
    },
    {
        "content": "0.8",
        "page_index": 9,
        "bbox": [
            231.88343589999997,
            670.337866271168,
            240.12886748607997,
            677.3704466485759
        ],
        "match": null
    },
    {
        "content": "0.6",
        "page_index": 9,
        "bbox": [
            231.88343589999997,
            647.596299791168,
            240.12886748607997,
            654.628880168576
        ],
        "match": 105
    },
    {
        "content": "0.4",
        "page_index": 9,
        "bbox": [
            231.88343589999997,
            624.8547333111679,
            240.12886748607997,
            631.8873136885759
        ],
        "match": 34
    },
    {
        "content": "0.2",
        "page_index": 9,
        "bbox": [
            231.88343589999997,
            602.113166831168,
            240.12886748607997,
            609.1457472085759
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 9,
        "bbox": [
            236.88788643999996,
            579.4343290165759,
            240.12886748607997,
            586.4041807285759
        ],
        "match": 2
    },
    {
        "content": "1",
        "page_index": 9,
        "bbox": [
            402.77588644,
            693.111845546576,
            406.01686748608,
            700.0816972585759
        ],
        "match": 2
    },
    {
        "content": "0.8",
        "page_index": 9,
        "bbox": [
            397.77143590000003,
            670.337866271168,
            406.01686748608,
            677.3704466485759
        ],
        "match": null
    },
    {
        "content": "0.6",
        "page_index": 9,
        "bbox": [
            397.77143590000003,
            647.596299791168,
            406.01686748608,
            654.628880168576
        ],
        "match": 105
    },
    {
        "content": "0.4",
        "page_index": 9,
        "bbox": [
            397.77143590000003,
            624.8547333111679,
            406.01686748608,
            631.8873136885759
        ],
        "match": 34
    },
    {
        "content": "0.2",
        "page_index": 9,
        "bbox": [
            397.77143590000003,
            602.113166831168,
            406.01686748608,
            609.1457472085759
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 9,
        "bbox": [
            402.77588644,
            579.4343290165759,
            406.01686748608,
            586.4041807285759
        ],
        "match": 2
    },
    {
        "content": "Cilk HDagg Init HCcs ILP ML",
        "page_index": 9,
        "bbox": [
            76.53246272,
            569.970941962112,
            197.43324054199996,
            577.139790154112
        ],
        "match": 12
    },
    {
        "content": "Cilk HDagg Init HCcs ILP ML",
        "page_index": 9,
        "bbox": [
            251.12624004999998,
            569.970941962112,
            372.026240542,
            577.139790154112
        ],
        "match": 12
    },
    {
        "content": "Cilk HDagg Init HCcs ILP ML",
        "page_index": 9,
        "bbox": [
            417.01424005,
            569.970941962112,
            537.914240542,
            577.139790154112
        ],
        "match": 12
    },
    {
        "content": "\ud835\udc43 = 8, \u0394 = 2",
        "page_index": 9,
        "bbox": [
            120.66692812999996,
            559.560239626976,
            156.67936464607996,
            567.763755092
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 8, \u0394 = 3",
        "page_index": 9,
        "bbox": [
            295.26070545999994,
            559.560239626976,
            331.27236464607995,
            567.763755092
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 8, \u0394 = 4",
        "page_index": 9,
        "bbox": [
            461.14870546000003,
            559.560239626976,
            497.16036464608,
            567.763755092
        ],
        "match": null
    },
    {
        "content": "1",
        "page_index": 9,
        "bbox": [
            239.54988644,
            533.371845546576,
            242.79086748608,
            540.3416972585759
        ],
        "match": 2
    },
    {
        "content": "0.8",
        "page_index": 9,
        "bbox": [
            234.5454359,
            510.59786627116796,
            242.79086748608,
            517.6304466485759
        ],
        "match": null
    },
    {
        "content": "0.6",
        "page_index": 9,
        "bbox": [
            234.5454359,
            487.856299791168,
            242.79086748608,
            494.88888016857595
        ],
        "match": 105
    },
    {
        "content": "0.4",
        "page_index": 9,
        "bbox": [
            234.5454359,
            465.114733311168,
            242.79086748608,
            472.14731368857593
        ],
        "match": 34
    },
    {
        "content": "0.2",
        "page_index": 9,
        "bbox": [
            234.5454359,
            442.37316683116796,
            242.79086748608,
            449.4057472085759
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 9,
        "bbox": [
            239.54988644,
            419.694329016576,
            242.79086748608,
            426.66418072857596
        ],
        "match": 2
    },
    {
        "content": "1",
        "page_index": 9,
        "bbox": [
            405.43788644000006,
            533.371845546576,
            408.67886748608004,
            540.3416972585759
        ],
        "match": 2
    },
    {
        "content": "0.8",
        "page_index": 9,
        "bbox": [
            400.43343590000006,
            510.59786627116796,
            408.67886748608004,
            517.6304466485759
        ],
        "match": null
    },
    {
        "content": "0.6",
        "page_index": 9,
        "bbox": [
            400.43343590000006,
            487.856299791168,
            408.67886748608004,
            494.88888016857595
        ],
        "match": 105
    },
    {
        "content": "0.4",
        "page_index": 9,
        "bbox": [
            400.43343590000006,
            465.114733311168,
            408.67886748608004,
            472.14731368857593
        ],
        "match": 34
    },
    {
        "content": "0.2",
        "page_index": 9,
        "bbox": [
            400.43343590000006,
            442.37316683116796,
            408.67886748608004,
            449.4057472085759
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 9,
        "bbox": [
            405.43788644000006,
            419.694329016576,
            408.67886748608004,
            426.66418072857596
        ],
        "match": 2
    },
    {
        "content": "1",
        "page_index": 9,
        "bbox": [
            62.29488643999999,
            693.111845546576,
            65.53586748608,
            700.0816972585759
        ],
        "match": 2
    },
    {
        "content": "0.8",
        "page_index": 9,
        "bbox": [
            57.29043589999999,
            670.337866271168,
            65.53586748608,
            677.3704466485759
        ],
        "match": null
    },
    {
        "content": "0.6",
        "page_index": 9,
        "bbox": [
            57.29043589999999,
            647.596299791168,
            65.53586748608,
            654.628880168576
        ],
        "match": 105
    },
    {
        "content": "0.4",
        "page_index": 9,
        "bbox": [
            57.29043589999999,
            624.8547333111679,
            65.53586748608,
            631.8873136885759
        ],
        "match": 34
    },
    {
        "content": "0.2",
        "page_index": 9,
        "bbox": [
            57.29043589999999,
            602.113166831168,
            65.53586748608,
            609.1457472085759
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 9,
        "bbox": [
            62.29488643999999,
            579.4343290165759,
            65.53586748608,
            586.4041807285759
        ],
        "match": 2
    },
    {
        "content": "1",
        "page_index": 9,
        "bbox": [
            66.09588644000002,
            533.371845546576,
            69.33686748608001,
            540.3416972585759
        ],
        "match": 2
    },
    {
        "content": "0.8",
        "page_index": 9,
        "bbox": [
            61.09143590000001,
            510.59786627116796,
            69.33686748608001,
            517.6304466485759
        ],
        "match": null
    },
    {
        "content": "0.6",
        "page_index": 9,
        "bbox": [
            61.09143590000001,
            487.856299791168,
            69.33686748608001,
            494.88888016857595
        ],
        "match": 105
    },
    {
        "content": "0.4",
        "page_index": 9,
        "bbox": [
            61.09143590000001,
            465.114733311168,
            69.33686748608001,
            472.14731368857593
        ],
        "match": 34
    },
    {
        "content": "0.2",
        "page_index": 9,
        "bbox": [
            61.09143590000001,
            442.37316683116796,
            69.33686748608001,
            449.4057472085759
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 9,
        "bbox": [
            66.09588644000002,
            419.694329016576,
            69.33686748608001,
            426.66418072857596
        ],
        "match": 2
    },
    {
        "content": "Cilk HDagg Init HCcs ILP ML",
        "page_index": 9,
        "bbox": [
            80.33346272000001,
            410.23094196211196,
            201.23424054199998,
            417.39979015411194
        ],
        "match": 12
    },
    {
        "content": "Cilk HDagg Init HCcs ILP ML",
        "page_index": 9,
        "bbox": [
            253.78824005,
            410.23094196211196,
            374.688240542,
            417.39979015411194
        ],
        "match": 12
    },
    {
        "content": "Cilk HDagg Init HCcs ILP ML",
        "page_index": 9,
        "bbox": [
            419.67624005000005,
            410.23094196211196,
            540.577017872,
            417.39979015411194
        ],
        "match": 12
    },
    {
        "content": "\ud835\udc43 = 16, \u0394 = 2",
        "page_index": 9,
        "bbox": [
            122.84797241000001,
            399.82023962697593,
            162.10109769608002,
            408.02375509199993
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 16, \u0394 = 3",
        "page_index": 9,
        "bbox": [
            296.30197240999996,
            399.82023962697593,
            335.55509769607994,
            408.02375509199993
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 16, \u0394 = 4",
        "page_index": 9,
        "bbox": [
            462.18997241,
            399.82023962697593,
            501.4430976960799,
            408.02375509199993
        ],
        "match": null
    },
    {
        "content": "Figure 6: Performance comparison of Cilk, HDagg and our scheduling algorithms with NUMA effects, for different \ud835\udc43 \u2208 {8, 16}",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            376.1027615999999,
            557.9771904000002,
            387.1224671999999
        ],
        "match": 10
    },
    {
        "content": "and different NUMA increase factors \u0394 \u2208 {2, 3, 4}. The multilevel approach (ML) is shown separately at the end. This specific",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            365.1437615999999,
            558.197725568,
            376.18139999999994
        ],
        "match": null
    },
    {
        "content": "figure only covers the small, medium and large datasets, since tiny is too small to coarsify with ML; however, in general, our",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            354.1847615999999,
            558.3945001600001,
            363.65327999999994
        ],
        "match": null
    },
    {
        "content": "improvement factors in Section 7.2 and Appendix C also include tiny.",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            343.22576159999994,
            336.65980160000004,
            352.69428
        ],
        "match": null
    },
    {
        "content": "Table 3: Cost reduction achieved by the multilevel algorithm",
        "page_index": 9,
        "bbox": [
            53.50200000000006,
            317.3227615999999,
            294.04809600000004,
            326.28916159999994
        ],
        "match": 5
    },
    {
        "content": "with NUMA effects, for different \ud835\udc43 and \u0394, compared to Cilk",
        "page_index": 9,
        "bbox": [
            53.44800000000006,
            306.3637615999999,
            294.26880000000006,
            317.40139999999997
        ],
        "match": 5
    },
    {
        "content": "and HDagg.",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            295.4047615999999,
            95.73380160000005,
            304.87327999999997
        ],
        "match": 5
    },
    {
        "content": "\u0394 = 2 \u0394 = 3 \u0394 = 4",
        "page_index": 9,
        "bbox": [
            134.23300000000006,
            267.9889472,
            247.62637600000005,
            278.5424
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc43 = 8 40% / 10% 56% / 32% 67% / 48%",
        "page_index": 9,
        "bbox": [
            91.59100000000005,
            245.19394719999994,
            255.56134880000005,
            255.72946719999996
        ],
        "match": 97
    },
    {
        "content": "\ud835\udc43 = 16 54% / 26% 76% / 61% 87% / 79%",
        "page_index": 9,
        "bbox": [
            89.50700000000006,
            226.71394719999992,
            255.56134880000005,
            237.24946719999994
        ],
        "match": null
    },
    {
        "content": "However, while the multilevel algorithm achieves a large further",
        "page_index": 9,
        "bbox": [
            63.76100000000006,
            194.22306719999995,
            294.2195373440001,
            203.18946719999997
        ],
        "match": 5
    },
    {
        "content": "improvement for high communication costs (large \u0394 and/or \ud835\udc43), on",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            183.18336959999996,
            294.0454355584001,
            192.24839999999995
        ],
        "match": 5
    },
    {
        "content": "the other hand, for the case of \u0394 = 2, the figure shows that ML is",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            170.73594719999994,
            294.0443262080001,
            181.28939999999994
        ],
        "match": 5
    },
    {
        "content": "clearly inferior to our base scheduler. Similarly, if we revisit the set\u2212",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            161.34706719999994,
            295.5567119360001,
            170.31346719999996
        ],
        "match": 5
    },
    {
        "content": "work, the same approach could become an efficient tool for any",
        "page_index": 9,
        "bbox": [
            317.62300000000005,
            317.08506719999997,
            558.4391639680001,
            326.05146719999993
        ],
        "match": null
    },
    {
        "content": "choice of parameters.",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            306.12606719999997,
            396.11510880000003,
            315.09246719999993
        ],
        "match": 45
    },
    {
        "content": "8 CONCLUSION",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            282.13199789999993,
            405.7296186000001,
            293.04109789999995
        ],
        "match": null
    },
    {
        "content": "Our results show that if we consider a more detailed and more",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            270.93606719999997,
            558.2041288320002,
            279.90246719999993
        ],
        "match": 13
    },
    {
        "content": "realistic model of the scheduling problem, then applying a range of",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            259.97706719999996,
            558.2023355520001,
            268.94346719999993
        ],
        "match": 13
    },
    {
        "content": "advanced algorithms can significantly outperform classical sched\u2212",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            249.01806719999993,
            559.7144113152001,
            257.9844671999999
        ],
        "match": 13
    },
    {
        "content": "uling heuristics like Cilk or HDagg.",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            236.51684639999993,
            447.08860799999997,
            247.02546719999995
        ],
        "match": 13
    },
    {
        "content": "Unsurprisingly, the main drawback of these more advanced al\u2212",
        "page_index": 9,
        "bbox": [
            327.91800000000006,
            227.10006719999993,
            559.7198923584002,
            236.06646719999995
        ],
        "match": 13
    },
    {
        "content": "gorithms is that they come with a notably higher running time.",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            216.14106719999992,
            559.5851337600001,
            225.10746719999995
        ],
        "match": 13
    },
    {
        "content": "More specifically, BSPg and Source take a similarly small amount",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            203.63984639999993,
            558.1973775104001,
            214.14846719999994
        ],
        "match": 13
    },
    {
        "content": "of time as the baselines, but the remaining algorithms are more",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            194.22306719999995,
            558.2041288320002,
            203.18946719999997
        ],
        "match": 13
    },
    {
        "content": "time\u2212consuming: HC+HCcs and Multi typically take between 1\u22122",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            181.72184639999995,
            558.2020030720001,
            192.23046719999996
        ],
        "match": null
    },
    {
        "content": "seconds to 1\u22122 minutes on our DAGs, and the ILP\u2212based methods",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            172.30506719999994,
            558.1993766400001,
            181.27146719999996
        ],
        "match": 13
    },
    {
        "content": "take even longer, hence each individual ILP is capped at a few min\u2212",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            161.34706719999994,
            559.7140167936,
            170.31346719999996
        ],
        "match": 13
    },
    {
        "content": "ting of Section 7.1 without NUMA effects, the multilevel approach",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            150.38806719999994,
            294.04300428800025,
            159.35446719999996
        ],
        "match": 5
    },
    {
        "content": "utes. While the running times of these initial implementations can",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            150.38806719999994,
            558.2006140032001,
            159.35446719999996
        ],
        "match": 13
    },
    {
        "content": "provides notably weaker solutions in general than our base sched\u2212",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            139.42906719999993,
            295.55649674240016,
            148.39546719999996
        ],
        "match": 5
    },
    {
        "content": "still be reduced significantly, in general, it is inevitable that this",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            139.42906719999993,
            558.2041288320002,
            148.39546719999996
        ],
        "match": null
    },
    {
        "content": "uler (see Appendix C for details). This suggests that our multilevel",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            128.47006719999993,
            294.04361400320016,
            137.43646719999995
        ],
        "match": 5
    },
    {
        "content": "more complex direct optimization approach requires much more",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            128.47006719999993,
            558.2061462720002,
            137.43646719999995
        ],
        "match": 13
    },
    {
        "content": "method is indeed a specialized tool, which is useful mostly when",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            117.51106719999994,
            294.04345260800005,
            126.47746719999994
        ],
        "match": null
    },
    {
        "content": "time than lightweight heuristics.",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            117.51106719999994,
            437.2170864,
            126.47746719999994
        ],
        "match": 13
    },
    {
        "content": "our problem is dominated by high communication costs. However,",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            106.55206719999994,
            295.03217753600006,
            115.51846719999993
        ],
        "match": 5
    },
    {
        "content": "However, while this running time is certainly a limitation of our",
        "page_index": 9,
        "bbox": [
            327.91800000000006,
            106.55206719999994,
            558.3765373440001,
            115.51846719999993
        ],
        "match": 13
    },
    {
        "content": "we note that our algorithm is a relatively simple implementation of",
        "page_index": 9,
        "bbox": [
            53.46600000000006,
            95.59306719999995,
            294.0472442880001,
            104.55946719999994
        ],
        "match": 5
    },
    {
        "content": "work, the benefits from the higher\u2212quality schedules can still make",
        "page_index": 9,
        "bbox": [
            317.62300000000005,
            95.59306719999995,
            558.2034462784001,
            104.55946719999994
        ],
        "match": 13
    },
    {
        "content": "this multilevel scheduling idea; we believe that with some further",
        "page_index": 9,
        "bbox": [
            53.79800000000006,
            84.63406719999995,
            294.2158675136002,
            93.60046719999994
        ],
        "match": 5
    },
    {
        "content": "our approach useful in various applications, e.g.:",
        "page_index": 9,
        "bbox": [
            317.95500000000004,
            84.63406719999995,
            495.23866080000016,
            93.60046719999994
        ],
        "match": 13
    },
    {
        "content": "10",
        "page_index": 9,
        "bbox": [
            302.677,
            72.68305239999995,
            309.162634,
            79.65685239999995
        ],
        "match": 6
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 10,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "\u2022 when the same computation needs to be executed many",
        "page_index": 10,
        "bbox": [
            72.987,
            696.9881072,
            294.2738896000001,
            707.2994672
        ],
        "match": 24
    },
    {
        "content": "times, possibly with different inputs,",
        "page_index": 10,
        "bbox": [
            82.425,
            687.3740672,
            216.23058720000003,
            696.3404672
        ],
        "match": 20
    },
    {
        "content": "\u2022 when the computation can be captured in a coarse\u2212grained",
        "page_index": 10,
        "bbox": [
            72.987,
            672.0821072,
            294.04256544640003,
            682.3934672
        ],
        "match": null
    },
    {
        "content": "way by relatively small DAGs, but possibly still with large",
        "page_index": 10,
        "bbox": [
            82.093,
            662.4680672,
            294.0413729152,
            671.4344672
        ],
        "match": null
    },
    {
        "content": "node weights,",
        "page_index": 10,
        "bbox": [
            82.425,
            651.5090672,
            133.32725280000002,
            660.4754672
        ],
        "match": 19
    },
    {
        "content": "\u2022 in areas such as machine learning, where this scheduling",
        "page_index": 10,
        "bbox": [
            72.987,
            636.2161072,
            294.04565996159994,
            646.5274671999999
        ],
        "match": 12
    },
    {
        "content": "time may still be negligible compared to the execution of the",
        "page_index": 10,
        "bbox": [
            82.425,
            626.6020672,
            294.04405497600004,
            635.5684672
        ],
        "match": 12
    },
    {
        "content": "computation itself (e.g. the training of a neural network).",
        "page_index": 10,
        "bbox": [
            82.425,
            615.6430671999999,
            290.8041360000001,
            624.6094671999999
        ],
        "match": 12
    },
    {
        "content": "Furthermore, even in areas where our approach is not directly ap\u2212",
        "page_index": 10,
        "bbox": [
            53.798,
            601.6960672,
            295.5574113152001,
            610.6624672
        ],
        "match": 13
    },
    {
        "content": "plicable in practice, our algorithms still provide crucial insight on",
        "page_index": 10,
        "bbox": [
            53.798,
            590.7370672,
            294.0414620672001,
            599.7034672
        ],
        "match": 13
    },
    {
        "content": "the performance of the baseline heuristics: our solutions with much",
        "page_index": 10,
        "bbox": [
            53.798,
            579.7780672,
            294.04533555200004,
            588.7444672
        ],
        "match": 13
    },
    {
        "content": "smaller cost prove that the schedules returned by these baselines",
        "page_index": 10,
        "bbox": [
            53.798,
            568.8190672,
            294.043452608,
            577.7854672
        ],
        "match": 13
    },
    {
        "content": "are often very far from the optimum. Besides this, our results also",
        "page_index": 10,
        "bbox": [
            53.798,
            557.8600672,
            294.04532658560004,
            566.8264672
        ],
        "match": 13
    },
    {
        "content": "highlight the fact that many real\u2212world aspect, such as communica\u2212",
        "page_index": 10,
        "bbox": [
            53.798,
            546.9010671999999,
            295.556711936,
            555.8674672
        ],
        "match": 13
    },
    {
        "content": "tion volume and NUMA costs, are critical to include in our model,",
        "page_index": 10,
        "bbox": [
            53.798,
            535.9420672,
            295.0306442816001,
            544.9084672
        ],
        "match": 13
    },
    {
        "content": "otherwise the algorithms may return solutions that are significantly",
        "page_index": 10,
        "bbox": [
            53.798,
            524.9830671999999,
            294.273799424,
            533.9494672
        ],
        "match": 13
    },
    {
        "content": "suboptimal.",
        "page_index": 10,
        "bbox": [
            53.798,
            514.0240672,
            96.52289599999999,
            522.9904672
        ],
        "match": null
    },
    {
        "content": "There are many natural directions for future work, i.e. towards",
        "page_index": 10,
        "bbox": [
            63.761,
            503.06506720000004,
            294.0419757248002,
            512.0314672000001
        ],
        "match": 10
    },
    {
        "content": "finding schedules of even lower cost in BSP, or in even more detailed",
        "page_index": 10,
        "bbox": [
            53.798,
            492.1070672,
            294.04533555200004,
            501.0734672
        ],
        "match": 10
    },
    {
        "content": "models. In particular, we note that most of the ingredients in our al\u2212",
        "page_index": 10,
        "bbox": [
            53.798,
            481.1480672,
            295.556711936,
            490.1144672
        ],
        "match": 10
    },
    {
        "content": "gorithmic framework are relatively simple applications of a specific",
        "page_index": 10,
        "bbox": [
            53.798,
            470.1890672,
            294.045335552,
            479.1554672
        ],
        "match": 10
    },
    {
        "content": "technique, used as prototypes to demonstrate the feasibility of our",
        "page_index": 10,
        "bbox": [
            53.798,
            459.2300672,
            294.2155178240001,
            468.1964672
        ],
        "match": 10
    },
    {
        "content": "entire approach. As such, each of these algorithmic building blocks",
        "page_index": 10,
        "bbox": [
            53.798,
            448.2710672,
            294.04533555200004,
            457.23746719999997
        ],
        "match": 10
    },
    {
        "content": "can be further improved into, or replaced by more sophisticated",
        "page_index": 10,
        "bbox": [
            53.798,
            437.3120672,
            294.0471288320001,
            446.27846719999997
        ],
        "match": 10
    },
    {
        "content": "methods: we could apply e.g. more complex local search techniques",
        "page_index": 10,
        "bbox": [
            53.798,
            426.3530672,
            294.0453355520001,
            435.31946719999996
        ],
        "match": 10
    },
    {
        "content": "that also attempt to escape local mimima, or more efficient ILP",
        "page_index": 10,
        "bbox": [
            53.798,
            415.3940672,
            294.0471288320001,
            424.36046719999996
        ],
        "match": 10
    },
    {
        "content": "formulations for our problems, or more advanced methods for the",
        "page_index": 10,
        "bbox": [
            53.798,
            404.4350672,
            294.0472364288001,
            413.40146719999996
        ],
        "match": 10
    },
    {
        "content": "coarsening and refining phase of the multilevel method. We also",
        "page_index": 10,
        "bbox": [
            53.798,
            393.47606720000005,
            294.04712883200017,
            402.4424672
        ],
        "match": 10
    },
    {
        "content": "point out that our experimental results were achieved with an open\u2212",
        "page_index": 10,
        "bbox": [
            53.798,
            382.51706720000004,
            295.5567119360001,
            391.4834672
        ],
        "match": 10
    },
    {
        "content": "source ILP solver; simply employing one of today\u2019s more powerful",
        "page_index": 10,
        "bbox": [
            53.798,
            371.5590672,
            294.04865312000004,
            380.5254672
        ],
        "match": 10
    },
    {
        "content": "commercial ILP solvers could already significantly improve these",
        "page_index": 10,
        "bbox": [
            53.798,
            360.6000672,
            294.04850069120005,
            369.5664672
        ],
        "match": 10
    },
    {
        "content": "results without any changes to the framework itself.",
        "page_index": 10,
        "bbox": [
            53.798,
            349.6410672,
            245.01544640000012,
            358.6074672
        ],
        "match": 10
    },
    {
        "content": "ACKNOWLEDGMENTS",
        "page_index": 10,
        "bbox": [
            53.798,
            326.1669979,
            171.35446160000004,
            337.07609790000004
        ],
        "match": null
    },
    {
        "content": "We would like to thank Benjamin Lozes for his valuable help with",
        "page_index": 10,
        "bbox": [
            53.368,
            314.9710672,
            294.04590208,
            323.93746719999996
        ],
        "match": null
    },
    {
        "content": "applying the HDagg algorithm as a baseline in our work.",
        "page_index": 10,
        "bbox": [
            53.798,
            302.4698464,
            258.5192816,
            312.97846719999995
        ],
        "match": 13
    },
    {
        "content": "REFERENCES",
        "page_index": 10,
        "bbox": [
            53.798000000000016,
            280.53899789999997,
            123.21260330000001,
            291.4480979
        ],
        "match": null
    },
    {
        "content": "[1] 2024. Supplementary material. The scheduling algorithm implementations",
        "page_index": 10,
        "bbox": [
            57.04100000000002,
            272.3350524,
            294.0431160639999,
            279.3088524
        ],
        "match": 13
    },
    {
        "content": "used in our experiments, our computational DAG database, and the data from",
        "page_index": 10,
        "bbox": [
            70.231,
            264.3650524,
            294.043150933,
            271.3388524
        ],
        "match": 13
    },
    {
        "content": "our experiments are available at: https://github.com/Algebraic\u2212Programming/",
        "page_index": 10,
        "bbox": [
            70.231,
            256.3940524,
            294.4961689809998,
            263.3678524
        ],
        "match": 13
    },
    {
        "content": "Artifacts/tree/master/SPAA\u2082024_Efficient_Multi\u2212Processor_Scheduling.",
        "page_index": 10,
        "bbox": [
            69.987,
            248.4240524,
            277.41570720000004,
            255.39785239999998
        ],
        "match": null
    },
    {
        "content": "[2] Thomas L Adam, K. Mani Chandy, and JR Dickson. 1974. A comparison of list",
        "page_index": 10,
        "bbox": [
            57.041,
            240.4540524,
            294.04504083280005,
            247.42785239999998
        ],
        "match": 13
    },
    {
        "content": "schedules for parallel processing systems. Commun. ACM 17, 12 (1974), 685\u2013690.",
        "page_index": 10,
        "bbox": [
            70.231,
            230.86613079999998,
            292.58837142000004,
            239.45785239999998
        ],
        "match": null
    },
    {
        "content": "[3] Ishfaq Ahmad and Yu\u2212Kwong Kwok. 1998. On exploiting task duplication in",
        "page_index": 10,
        "bbox": [
            57.041,
            224.5140524,
            294.0431160639999,
            231.48785239999998
        ],
        "match": 13
    },
    {
        "content": "parallel program scheduling. IEEE Transactions on parallel and distributed systems",
        "page_index": 10,
        "bbox": [
            70.231,
            214.92613079999998,
            294.047016472,
            223.51785239999998
        ],
        "match": 13
    },
    {
        "content": "9, 9 (1998), 872\u2013892.",
        "page_index": 10,
        "bbox": [
            70.231,
            208.5740524,
            126.9558892,
            215.54785239999998
        ],
        "match": null
    },
    {
        "content": "[4] Rob H Bisseling. 2020. Parallel Scientific Computation: A Structured Approach",
        "page_index": 10,
        "bbox": [
            57.041,
            198.98613079999998,
            294.0438028519999,
            207.57785239999998
        ],
        "match": 5
    },
    {
        "content": "Using BSP. Oxford University Press, USA.",
        "page_index": 10,
        "bbox": [
            70.231,
            191.01613079999998,
            188.23394139999996,
            199.60785239999998
        ],
        "match": null
    },
    {
        "content": "[5] Robert D Blumofe and Charles E Leiserson. 1999. Scheduling multithreaded",
        "page_index": 10,
        "bbox": [
            57.04099999999999,
            184.6630524,
            294.0431160639999,
            191.63685239999998
        ],
        "match": 5
    },
    {
        "content": "computations by work stealing. Journal of the ACM (JACM) 46, 5 (1999), 720\u2013748.",
        "page_index": 10,
        "bbox": [
            70.231,
            175.07513079999998,
            292.73101402400005,
            183.66685239999998
        ],
        "match": 5
    },
    {
        "content": "[6] David Culler, Richard Karp, David Patterson, Abhijit Sahay, Klaus Erik Schauser,",
        "page_index": 10,
        "bbox": [
            57.041,
            168.7230524,
            294.8132188504,
            175.69685239999998
        ],
        "match": null
    },
    {
        "content": "Eunice Santos, Ramesh Subramonian, and Thorsten Von Eicken. 1993. LogP:",
        "page_index": 10,
        "bbox": [
            70.231,
            160.7530524,
            294.86825608,
            167.72685239999998
        ],
        "match": null
    },
    {
        "content": "Towards a realistic model of parallel computation. In Proceedings of the fourth",
        "page_index": 10,
        "bbox": [
            70.021,
            151.1651308,
            294.0415109324,
            159.75685239999999
        ],
        "match": 5
    },
    {
        "content": "ACM SIGPLAN symposium on Principles and practice of parallel programming.",
        "page_index": 10,
        "bbox": [
            70.231,
            143.1951308,
            295.11892071999995,
            151.7868524
        ],
        "match": 5
    },
    {
        "content": "1\u201312.",
        "page_index": 10,
        "bbox": [
            70.07,
            136.8430524,
            85.1543294,
            143.8168524
        ],
        "match": null
    },
    {
        "content": "[7] John Forrest and Robin Lougee\u2212Heimer. 2005. CBC user guide. In Emerging",
        "page_index": 10,
        "bbox": [
            57.041,
            127.2551308,
            294.04514794,
            135.8468524
        ],
        "match": 5
    },
    {
        "content": "theory, methods, and applications. INFORMS, 257\u2013277.",
        "page_index": 10,
        "bbox": [
            70.231,
            119.2851308,
            222.6638896,
            127.8768524
        ],
        "match": 11
    },
    {
        "content": "[8] Alfredo Goldman, Gregory Mouni\u00e9, and Denis Trystram. 1998. Near optimal",
        "page_index": 10,
        "bbox": [
            57.04100000000001,
            112.9320524,
            294.043116064,
            119.9058524
        ],
        "match": null
    },
    {
        "content": "algorithms for scheduling independent chains in BSP. In Proceedings. Fifth Inter\u2212\nnational Conference on High Performance Computing. IEEE, 310\u2013317.",
        "page_index": 10,
        "bbox": [
            70.231,
            95.3741308,
            294.73973892239997,
            111.9358524
        ],
        "match": 5
    },
    {
        "content": "[9] Mohammadtaghi Hajiaghayi, Theodore Johnson, Mohammad Reza Khani, and",
        "page_index": 10,
        "bbox": [
            57.041,
            90.6820524,
            294.0461287455999,
            97.6558524
        ],
        "match": 13
    },
    {
        "content": "Barna Saha. 2014. Hierarchical graph partitioning. In Proceedings of the 26th",
        "page_index": 10,
        "bbox": [
            70.231,
            81.0941308,
            294.04345954400003,
            89.6858524
        ],
        "match": 13
    },
    {
        "content": "11",
        "page_index": 10,
        "bbox": [
            302.677,
            72.68305240000001,
            309.162634,
            79.6568524
        ],
        "match": 6
    },
    {
        "content": "[10] Julien Herrmann, Jonathan Kho, Bora U\u00e7ar, Kamer Kaya, and \u00dcmit V \u00c7ataly\u00fcrek.",
        "page_index": 10,
        "bbox": [
            317.9549999999999,
            690.3670523999999,
            559.278265544,
            697.3408524
        ],
        "match": null
    },
    {
        "content": "ACM symposium on Parallelism in algorithms and architectures (SPAA). 51\u201360.",
        "page_index": 10,
        "bbox": [
            334.388,
            696.7191308,
            554.2648323999999,
            705.3108524
        ],
        "match": 11
    },
    {
        "content": "2017. Acyclic partitioning of large directed acyclic graphs. In 2017 17th IEEE/ACM\ninternational symposium on cluster, cloud and grid computing (CCGRID). IEEE,",
        "page_index": 10,
        "bbox": [
            334.388,
            672.8091308,
            558.96944692,
            689.3708524
        ],
        "match": 13
    },
    {
        "content": "371\u2013380.",
        "page_index": 10,
        "bbox": [
            334.388,
            666.4570524,
            359.2007804,
            673.4308524
        ],
        "match": null
    },
    {
        "content": "[11] Jonathan MD Hill, Bill McColl, Dan C Stefanescu, Mark W Goudreau, Kevin",
        "page_index": 10,
        "bbox": [
            317.955,
            658.4870523999999,
            558.200116064,
            665.4608524
        ],
        "match": null
    },
    {
        "content": "Lang, Satish B Rao, Torsten Suel, Thanasis Tsantilas, and Rob H Bisseling. 1998.",
        "page_index": 10,
        "bbox": [
            334.388,
            650.5160523999999,
            559.2787537099998,
            657.4898524
        ],
        "match": null
    },
    {
        "content": "[12] JA Hoogeveen, Jan Karel Lenstra, and Bart Veltman. 1994. Three, four, five, six,",
        "page_index": 10,
        "bbox": [
            317.955,
            634.5760524,
            558.9695279999999,
            641.5498524000001
        ],
        "match": null
    },
    {
        "content": "BSPlib: The BSP programming library. Parallel Comput. 24, 14 (1998), 1947\u20131980.",
        "page_index": 10,
        "bbox": [
            334.388,
            640.9281308,
            556.7129732760001,
            649.5198524
        ],
        "match": 17
    },
    {
        "content": "or the complexity of scheduling with communication delays. Operations Research\nLetters 16, 3 (1994), 129\u2013137.",
        "page_index": 10,
        "bbox": [
            334.388,
            617.0181308,
            558.2047339000001,
            633.5798524
        ],
        "match": 17
    },
    {
        "content": "[13] Jing\u2212Jang Hwang, Yuan\u2212Chieh Chow, Frank D Anger, and Chung\u2212Yee Lee. 1989.",
        "page_index": 10,
        "bbox": [
            317.955,
            610.6660523999999,
            559.2787537099998,
            617.6398524
        ],
        "match": null
    },
    {
        "content": "Scheduling precedence graphs in systems with interprocessor communication",
        "page_index": 10,
        "bbox": [
            334.388,
            602.6960524,
            558.203463488,
            609.6698524000001
        ],
        "match": 9
    },
    {
        "content": "[14] Hidehiro Kanemitsu, Masaki Hanada, and Hidenori Nakazato. 2016. Clustering\u2212",
        "page_index": 10,
        "bbox": [
            317.9549999999999,
            586.7560523999999,
            559.3824262207999,
            593.7298524
        ],
        "match": null
    },
    {
        "content": "times. siam journal on computing 18, 2 (1989), 244\u2013257.",
        "page_index": 10,
        "bbox": [
            334.388,
            593.1081308,
            490.29670619999996,
            601.6998524
        ],
        "match": null
    },
    {
        "content": "based task scheduling in a large number of heterogeneous processors. IEEE\nTransactions on Parallel and Distributed Systems 27, 11 (2016), 3144\u20133157.",
        "page_index": 10,
        "bbox": [
            334.388,
            569.1971308,
            558.201466808,
            585.7588524
        ],
        "match": 11
    },
    {
        "content": "[15] George Karypis, Rajat Aggarwal, Vipin Kumar, and Shashi Shekhar. 1997. Multi\u2212",
        "page_index": 10,
        "bbox": [
            317.955,
            562.8450523999999,
            559.3811151463999,
            569.8188524000001
        ],
        "match": null
    },
    {
        "content": "level hypergraph partitioning: Application in VLSI domain. In Proceedings of the\n34th annual Design Automation Conference. 526\u2013529.",
        "page_index": 10,
        "bbox": [
            334.388,
            545.2871308,
            558.1997815118,
            561.8488524
        ],
        "match": 11
    },
    {
        "content": "[16] Janardhan Kulkarni, Shi Li, Jakub Tarnawski, and Minwei Ye. 2020. Hierarchy\u2212",
        "page_index": 10,
        "bbox": [
            317.955,
            538.9350523999999,
            559.3785906307999,
            545.9088524
        ],
        "match": null
    },
    {
        "content": "based algorithms for minimizing makespan under precedence and communica\u2212",
        "page_index": 10,
        "bbox": [
            334.388,
            530.9650524,
            559.3783395739998,
            537.9388524000001
        ],
        "match": 11
    },
    {
        "content": "tion constraints. In Proceedings of the Fourteenth Annual ACM\u2212SIAM Symposium\non Discrete Algorithms (SODA). SIAM, 2770\u20132789.",
        "page_index": 10,
        "bbox": [
            334.388,
            513.4071308,
            558.2014731432,
            529.9688524000001
        ],
        "match": 11
    },
    {
        "content": "[17] Yu\u2212Kwong Kwok and Ishfaq Ahmad. 1996. Dynamic critical\u2212path scheduling: An",
        "page_index": 10,
        "bbox": [
            317.955,
            507.0540524,
            558.1984423519998,
            514.0278524
        ],
        "match": 12
    },
    {
        "content": "effective technique for allocating task graphs to multiprocessors. IEEE transac\u2212\ntions on parallel and distributed systems 7, 5 (1996), 506\u2013521.",
        "page_index": 10,
        "bbox": [
            334.388,
            489.4961308,
            558.899043892,
            506.0578524
        ],
        "match": null
    },
    {
        "content": "[18] Jan Karel Lenstra and AHG Rinnooy Kan. 1978. Complexity of scheduling under",
        "page_index": 10,
        "bbox": [
            317.955,
            483.14405239999996,
            558.3351288319999,
            490.1178524
        ],
        "match": 17
    },
    {
        "content": "[19] Joseph Y\u2212T Leung and Gilbert H Young. 1990. Minimizing total tardiness on a",
        "page_index": 10,
        "bbox": [
            317.9549999999999,
            467.20405239999997,
            558.200116064,
            474.1778524
        ],
        "match": 36
    },
    {
        "content": "precedence constraints. Operations Research 26, 1 (1978), 22\u201335.",
        "page_index": 10,
        "bbox": [
            334.388,
            473.5561308,
            514.9220721999999,
            482.1478524
        ],
        "match": 33
    },
    {
        "content": "single machine with precedence constraints. ORSA Journal on Computing 2, 4",
        "page_index": 10,
        "bbox": [
            334.388,
            457.6161308,
            558.3591915967999,
            466.2078524
        ],
        "match": null
    },
    {
        "content": "(1990), 346\u2013352.",
        "page_index": 10,
        "bbox": [
            334.178,
            451.2640524,
            379.39611920000004,
            458.2378524
        ],
        "match": null
    },
    {
        "content": "[20] Elaine Levey and Thomas Rothvoss. 2016. A (1+ epsilon)\u2212approximation for",
        "page_index": 10,
        "bbox": [
            317.955,
            443.2940524,
            558.335268308,
            450.2678524
        ],
        "match": 11
    },
    {
        "content": "makespan scheduling with precedence constraints using LP hierarchies. In Pro\u2212\nceedings of the forty\u2212eighth annual ACM symposium on Theory of Computing.",
        "page_index": 10,
        "bbox": [
            334.388,
            425.73513080000004,
            559.27592072,
            442.2968524
        ],
        "match": 11
    },
    {
        "content": "168\u2013177.",
        "page_index": 10,
        "bbox": [
            334.227,
            419.3830524,
            359.0397804,
            426.3568524
        ],
        "match": null
    },
    {
        "content": "[21] Shi Li. 2021. Towards PTAS for precedence constrained scheduling via combina\u2212",
        "page_index": 10,
        "bbox": [
            317.955,
            411.41305239999997,
            559.3811151463999,
            418.3868524
        ],
        "match": 5
    },
    {
        "content": "torial algorithms. In Proceedings of the 2021 ACM\u2212SIAM Symposium on Discrete\nAlgorithms (SODA). SIAM, 2991\u20133010.",
        "page_index": 10,
        "bbox": [
            334.388,
            393.85513080000004,
            558.1994432565999,
            410.4168524
        ],
        "match": 5
    },
    {
        "content": "[22] Quanquan C Liu, Manish Purohit, Zoya Svitkina, Erik Vee, and Joshua R Wang.",
        "page_index": 10,
        "bbox": [
            317.955,
            387.5030524,
            559.2771497359998,
            394.4768524
        ],
        "match": null
    },
    {
        "content": "2022. Scheduling with Communication Delay in Near\u2212Linear Time. In 39th\nInternational Symposium on Theoretical Aspects of Computer Science (STACS).",
        "page_index": 10,
        "bbox": [
            334.388,
            369.9451308,
            558.202155064,
            386.5068524
        ],
        "match": 20
    },
    {
        "content": "[23] Bill McColl. 2021. Mathematics, Models and Architectures. Mathematics for",
        "page_index": 10,
        "bbox": [
            317.9549999999999,
            361.9741308,
            558.1995790039999,
            370.5658524
        ],
        "match": 5
    },
    {
        "content": "[24] William F McColl. 1995. Scalable computing. Computer Science Today (1995),",
        "page_index": 10,
        "bbox": [
            317.95500000000004,
            346.0341308,
            558.969126576,
            354.6258524
        ],
        "match": null
    },
    {
        "content": "Future Computing and Communications (2021), 6.",
        "page_index": 10,
        "bbox": [
            334.388,
            354.00413080000004,
            472.7303918,
            362.5958524
        ],
        "match": 20
    },
    {
        "content": "46\u201361.",
        "page_index": 10,
        "bbox": [
            334.227,
            339.68205240000003,
            352.5541464,
            346.6558524
        ],
        "match": null
    },
    {
        "content": "[25] William F McColl and Alexandre Tiskin. 1999. Memory\u2212efficient matrix multipli\u2212",
        "page_index": 10,
        "bbox": [
            317.955,
            331.7120524,
            559.3807804039999,
            338.6858524
        ],
        "match": null
    },
    {
        "content": "[26] Shang Mingsheng, Sun Shixin, and Wang Qingxian. 2003. An efficient parallel",
        "page_index": 10,
        "bbox": [
            317.955,
            315.77205239999995,
            558.1999975094,
            322.7458524
        ],
        "match": 12
    },
    {
        "content": "cation in the BSP model. Algorithmica 24 (1999), 287\u2013297.",
        "page_index": 10,
        "bbox": [
            334.388,
            322.1241308,
            498.36620320000003,
            330.71585239999996
        ],
        "match": 11
    },
    {
        "content": "scheduling algorithm of dependent task graphs. In 4th International Conference on\nParallel and Distributed Computing, Applications and Technologies. IEEE, 595\u2013598.",
        "page_index": 10,
        "bbox": [
            334.388,
            298.2141308,
            558.202226808,
            314.77585239999996
        ],
        "match": 12
    },
    {
        "content": "[27] M Yusuf \u00d6zkaya, Anne Benoit, Bora U\u00e7ar, Julien Herrmann, and \u00dcmit V",
        "page_index": 10,
        "bbox": [
            317.955,
            291.8610524,
            558.4348541719999,
            298.8348524
        ],
        "match": null
    },
    {
        "content": "\u00c7ataly\u00fcrek. 2019. A scalable clustering\u2212based task scheduler for homogeneous",
        "page_index": 10,
        "bbox": [
            334.388,
            283.8910524,
            558.1981006357998,
            290.86485239999996
        ],
        "match": 12
    },
    {
        "content": "processors using DAG partitioning. In IEEE International Parallel and Distributed\nProcessing Symposium (IPDPS). IEEE, 155\u2013165.",
        "page_index": 10,
        "bbox": [
            334.388,
            266.3331308,
            558.201496112,
            282.8948524
        ],
        "match": null
    },
    {
        "content": "[28] P\u00e1l Andr\u00e1s Papp, Georg Anegg, and AN Yzelman. 2023. DAG Scheduling in the",
        "page_index": 10,
        "bbox": [
            317.955,
            259.98105239999995,
            558.2034634879999,
            266.9548524
        ],
        "match": 12
    },
    {
        "content": "[29] P\u00e1l Andr\u00e1s Papp, Georg Anegg, and Albert\u2212Jan N Yzelman. 2023. Partitioning",
        "page_index": 10,
        "bbox": [
            317.9549999999999,
            244.0410524,
            558.2010087104,
            251.0148524
        ],
        "match": null
    },
    {
        "content": "BSP Model. arXiv preprint arXiv:2303.05989 (2023).",
        "page_index": 10,
        "bbox": [
            334.388,
            250.3931308,
            477.6688888,
            258.9848524
        ],
        "match": 50
    },
    {
        "content": "hypergraphs is hard: Models, inapproximability, and applications. In 35th ACM\nSymposium on Parallelism in Algorithms and Architectures (SPAA). 415\u2013425.",
        "page_index": 10,
        "bbox": [
            334.388,
            226.4831308,
            558.1997808,
            243.0448524
        ],
        "match": 11
    },
    {
        "content": "[30] Christophe Picouleau. 1995. New complexity results on scheduling with small",
        "page_index": 10,
        "bbox": [
            317.9549999999999,
            220.1300524,
            558.203463488,
            227.1038524
        ],
        "match": null
    },
    {
        "content": "[31] Merten Popp, Sebastian Schlag, Christian Schulz, and Daniel Seemaier. 2021.",
        "page_index": 10,
        "bbox": [
            317.955,
            204.1900524,
            559.27422074,
            211.1638524
        ],
        "match": null
    },
    {
        "content": "communication delays. Discrete Applied Mathematics 60, 1\u22123 (1995), 331\u2013342.",
        "page_index": 10,
        "bbox": [
            334.388,
            210.5421308,
            552.2946675999999,
            219.1338524
        ],
        "match": null
    },
    {
        "content": "Multilevel Acyclic Hypergraph Partitioning. In 2021 Proceedings of the Workshop\non Algorithm Engineering and Experiments (ALENEX). SIAM, 1\u201315.",
        "page_index": 10,
        "bbox": [
            334.388,
            186.6321308,
            558.2022466008,
            203.1938524
        ],
        "match": 13
    },
    {
        "content": "[32] Andrei Radulescu and Arjan JC Van Gemund. 2002. Low\u2212cost task scheduling",
        "page_index": 10,
        "bbox": [
            317.955,
            180.28005240000002,
            558.2010087104001,
            187.2538524
        ],
        "match": 12
    },
    {
        "content": "for distributed\u2212memory machines. IEEE transactions on parallel and distributed\nsystems 13, 6 (2002), 648\u2013658.",
        "page_index": 10,
        "bbox": [
            334.388,
            162.7221308,
            558.1989016328,
            179.2838524
        ],
        "match": null
    },
    {
        "content": "[33] Sebastian Schlag, Vitali Henne, Tobias Heuer, Henning Meyerhenke, Peter",
        "page_index": 10,
        "bbox": [
            317.9549999999999,
            156.3700524,
            558.3352683079997,
            163.3438524
        ],
        "match": null
    },
    {
        "content": "Sanders, and Christian Schulz. 2016. K\u2212way hypergraph partitioning via n\u2212level",
        "page_index": 10,
        "bbox": [
            334.388,
            148.39905240000002,
            558.2038819159999,
            155.3728524
        ],
        "match": null
    },
    {
        "content": "recursive bisection. In 2016 Proceedings of the Eighteenth Workshop on Algorithm\nEngineering and Experiments (ALENEX). SIAM, 53\u201367.",
        "page_index": 10,
        "bbox": [
            334.388,
            130.8411308,
            558.2025710409999,
            147.4028524
        ],
        "match": 13
    },
    {
        "content": "[34] David B Skillicorn, Jonathan Hill, and William F McColl. 1997. Questions and",
        "page_index": 10,
        "bbox": [
            317.955,
            124.4890524,
            558.2009877889999,
            131.4628524
        ],
        "match": 33
    },
    {
        "content": "[35] Ola Svensson. 2010. Conditional hardness of precedence constrained scheduling",
        "page_index": 10,
        "bbox": [
            317.9549999999999,
            108.54905240000001,
            558.2010575269998,
            115.5228524
        ],
        "match": null
    },
    {
        "content": "answers about BSP. Scientific Programming 6, 3 (1997), 249\u2013274.",
        "page_index": 10,
        "bbox": [
            334.388,
            114.9011308,
            515.8278892,
            123.4928524
        ],
        "match": null
    },
    {
        "content": "on identical machines. In Proceedings of the forty\u2212second ACM symposium on\nTheory of computing (STOC). 745\u2013754.",
        "page_index": 10,
        "bbox": [
            334.388,
            90.99113080000001,
            558.202027524,
            107.5528524
        ],
        "match": 13
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 11,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": 4
    },
    {
        "content": "[43] AN Yzelman and Rob H Bisseling. 2012. An object\u2212oriented bulk synchronous",
        "page_index": 11,
        "bbox": [
            317.9549999999999,
            690.3670523999999,
            558.2020408328,
            697.3408524
        ],
        "match": 12
    },
    {
        "content": "systems 5, 9 (1994), 951\u2013967.",
        "page_index": 11,
        "bbox": [
            334.388,
            696.7191308,
            414.31088919999996,
            705.3108524
        ],
        "match": 4
    },
    {
        "content": "parallel library for multicore programming. Concurrency and Computation:\nPractice and Experience 24, 5 (2012), 533\u2013553.",
        "page_index": 11,
        "bbox": [
            334.388,
            672.8091308,
            558.660222776,
            689.3708524
        ],
        "match": 12
    },
    {
        "content": "[44] AN Yzelman, Rob H Bisseling, Dirk Roose, and Karl Meerbergen. 2014. Multi\u2212",
        "page_index": 11,
        "bbox": [
            317.955,
            666.4570524,
            559.3809198799999,
            673.4308524
        ],
        "match": 12
    },
    {
        "content": "coreBSP for C: a high\u2212performance library for shared\u2212memory parallel program\u2212",
        "page_index": 11,
        "bbox": [
            334.388,
            658.4870523999999,
            559.3811151463999,
            665.4608524
        ],
        "match": 12
    },
    {
        "content": "[45] AN Yzelman, D Di Nardo, JM Nash, and WJ Suijlen. 2020. A C++ GraphBLAS:",
        "page_index": 11,
        "bbox": [
            317.9549999999999,
            642.5460523999999,
            559.0229128831999,
            649.5198524
        ],
        "match": 12
    },
    {
        "content": "ming. International Journal of Parallel Programming 42 (2014), 619\u2013642.",
        "page_index": 11,
        "bbox": [
            334.388,
            648.8981308,
            536.9942031999999,
            657.4898524
        ],
        "match": null
    },
    {
        "content": "specification, implementation, parallelisation, and evaluation. arXiv preprint\narXiv:1906.03196 (2020).",
        "page_index": 11,
        "bbox": [
            334.388,
            624.9881308,
            558.199220096,
            641.5498524000001
        ],
        "match": null
    },
    {
        "content": "[46] Behrooz Zarebavani, Kazem Cheshmi, Bangtian Liu, Michelle Mills Strout, and",
        "page_index": 11,
        "bbox": [
            317.955,
            618.6360523999999,
            558.1981006357998,
            625.6098524
        ],
        "match": null
    },
    {
        "content": "Maryam Mehri Dehnavi. 2022. HDagg: hybrid aggregation of loop\u2212carried",
        "page_index": 11,
        "bbox": [
            334.388,
            610.6660523999999,
            558.200116064,
            617.6398524
        ],
        "match": null
    },
    {
        "content": "dependence iterations in sparse matrix computations. In 2022 IEEE International\nParallel and Distributed Processing Symposium (IPDPS). IEEE, 1217\u20131227.",
        "page_index": 11,
        "bbox": [
            334.388,
            593.1081308,
            558.2032727048,
            609.6698524000001
        ],
        "match": 11
    },
    {
        "content": "[36] Haluk Topcuoglu, Salim Hariri, and Min\u2212You Wu. 2002. Performance\u2212effective",
        "page_index": 11,
        "bbox": [
            53.798,
            698.3370524,
            294.04299750939987,
            705.3108524
        ],
        "match": null
    },
    {
        "content": "and low\u2212complexity task scheduling for heterogeneous computing. IEEE trans\u2212\nactions on parallel and distributed systems 13, 3 (2002), 260\u2013274.",
        "page_index": 11,
        "bbox": [
            70.231,
            680.7791308,
            294.74544688680004,
            697.3408524
        ],
        "match": 11
    },
    {
        "content": "[37] Aleksandar Trifunovi\u0107 and William J Knottenbelt. 2008. Parallel multilevel",
        "page_index": 11,
        "bbox": [
            53.798,
            674.4270523999999,
            294.043116064,
            681.4008524000001
        ],
        "match": null
    },
    {
        "content": "algorithms for hypergraph partitioning. J. Parallel and Distrib. Comput. 68, 5",
        "page_index": 11,
        "bbox": [
            70.231,
            664.8391308,
            294.04197836400004,
            673.4308524
        ],
        "match": 11
    },
    {
        "content": "(2008), 563\u2013581.",
        "page_index": 11,
        "bbox": [
            70.021,
            658.4870523999999,
            115.2391192,
            665.4608524
        ],
        "match": null
    },
    {
        "content": "[38] Jeffrey D. Ullman. 1975. NP\u2212complete scheduling problems. Journal of Computer",
        "page_index": 11,
        "bbox": [
            53.798,
            648.8981308,
            294.042622476,
            657.4908524
        ],
        "match": 9
    },
    {
        "content": "and System sciences 10, 3 (1975), 384\u2013393.",
        "page_index": 11,
        "bbox": [
            70.231,
            640.9281308,
            187.0177062,
            649.5198524
        ],
        "match": 9
    },
    {
        "content": "[39] Leslie G Valiant. 1990. A bridging model for parallel computation. Commun.",
        "page_index": 11,
        "bbox": [
            53.798,
            632.9581308,
            294.805303812,
            641.5498524000001
        ],
        "match": 11
    },
    {
        "content": "[40] Leslie G Valiant. 2011. A bridging model for multi\u2212core computing. J. Comput.",
        "page_index": 11,
        "bbox": [
            53.798,
            617.0181308,
            294.8078731846,
            625.6098524
        ],
        "match": 11
    },
    {
        "content": "ACM 33, 8 (1990), 103\u2013111.",
        "page_index": 11,
        "bbox": [
            70.231,
            624.9881308,
            146.7477062,
            633.5798524
        ],
        "match": null
    },
    {
        "content": "System Sci. 77, 1 (2011), 154\u2013166.",
        "page_index": 11,
        "bbox": [
            70.231,
            609.0481308,
            162.5497062,
            617.6398524
        ],
        "match": 9
    },
    {
        "content": "[41] Huijun Wang and Oliver Sinnen. 2018. List\u2212scheduling versus cluster\u2212scheduling.",
        "page_index": 11,
        "bbox": [
            53.797999999999995,
            602.6960523999999,
            295.1212655439999,
            609.6698524000001
        ],
        "match": 5
    },
    {
        "content": "[42] Tao Yang and Apostolos Gerasoulis. 1994. DSC: Scheduling parallel tasks on an",
        "page_index": 11,
        "bbox": [
            53.798,
            586.7560523999999,
            294.0424465791999,
            593.7298524
        ],
        "match": 13
    },
    {
        "content": "IEEE Transactions on Parallel and Distributed Systems 29, 8 (2018), 1736\u20131749.",
        "page_index": 11,
        "bbox": [
            70.231,
            593.1081308,
            288.18034020000005,
            601.6998524
        ],
        "match": 17
    },
    {
        "content": "unbounded number of processors. IEEE Transactions on parallel and distributed",
        "page_index": 11,
        "bbox": [
            70.231,
            577.1671308,
            294.04351593199993,
            585.7588524
        ],
        "match": 13
    },
    {
        "content": "12",
        "page_index": 11,
        "bbox": [
            302.677,
            72.68305240000001,
            309.162634,
            79.6568524
        ],
        "match": 2
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 12,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "A DETAILS ON OUR ALGORITHMS",
        "page_index": 12,
        "bbox": [
            53.798,
            695.8309978999999,
            239.72179130000004,
            706.7400979
        ],
        "match": 10
    },
    {
        "content": "This section provides a more detailed discussion of our different",
        "page_index": 12,
        "bbox": [
            53.529,
            684.6350672,
            294.043354944,
            693.6014672
        ],
        "match": 10
    },
    {
        "content": "algorithms. Recall that the implementations of these algorithms",
        "page_index": 12,
        "bbox": [
            53.798,
            673.6760671999999,
            294.0471288320001,
            682.6424671999999
        ],
        "match": 10
    },
    {
        "content": "that we used in the experiments (together with our database and",
        "page_index": 12,
        "bbox": [
            53.798,
            662.7170672,
            294.04266356480014,
            671.6834672
        ],
        "match": 10
    },
    {
        "content": "the data from the experiments) are available at [1], while a more",
        "page_index": 12,
        "bbox": [
            53.798,
            651.7580671999999,
            294.04368447999997,
            660.7244671999999
        ],
        "match": 10
    },
    {
        "content": "up\u2212to\u2212date version of our scheduling framework can be accessed at",
        "page_index": 12,
        "bbox": [
            53.798,
            640.7990672,
            294.04533555200004,
            649.7654672
        ],
        "match": 10
    },
    {
        "content": "https://github.com/Algebraic\u2212Programming/OneStopParallel.",
        "page_index": 12,
        "bbox": [
            53.798,
            629.8400671999999,
            277.3393184000001,
            638.8064671999999
        ],
        "match": null
    },
    {
        "content": "Our algorithms can be run via a set of Python scripts, which allow",
        "page_index": 12,
        "bbox": [
            63.761,
            618.8810672,
            294.37770464000005,
            627.8474672
        ],
        "match": 13
    },
    {
        "content": "us to configure the files or directories containing the input problems",
        "page_index": 12,
        "bbox": [
            53.798,
            607.9220672,
            294.0453355520001,
            616.8884672
        ],
        "match": 13
    },
    {
        "content": "to solve, and several parameters of the solving process. Besides this",
        "page_index": 12,
        "bbox": [
            53.798,
            596.9630672,
            294.04533555200004,
            605.9294672
        ],
        "match": 13
    },
    {
        "content": "user interface, the Python scripts also contain the implementations",
        "page_index": 12,
        "bbox": [
            53.798,
            586.0040672,
            294.04533555200004,
            594.9704672
        ],
        "match": 13
    },
    {
        "content": "of our ILP\u2212based methods, and are responsible for invoking the",
        "page_index": 12,
        "bbox": [
            53.798,
            575.0450672,
            294.047128832,
            584.0114672
        ],
        "match": 13
    },
    {
        "content": "CBC ILP solver.",
        "page_index": 12,
        "bbox": [
            53.798,
            564.0870672,
            110.94086719999999,
            573.0534672
        ],
        "match": 12
    },
    {
        "content": "The remaining C++ code (the Cilk, ETF and BL\u2212EST baseline",
        "page_index": 12,
        "bbox": [
            63.761,
            551.5858463999999,
            294.04450540799996,
            562.0944671999999
        ],
        "match": 13
    },
    {
        "content": "algorithms and their conversion to BSP, the BSPg algorithm, the HC",
        "page_index": 12,
        "bbox": [
            53.798,
            540.6268464,
            294.0444,
            551.1354672
        ],
        "match": 13
    },
    {
        "content": "and HCcs local search methods, and the ingredients of the multilevel",
        "page_index": 12,
        "bbox": [
            53.798,
            529.6678463999999,
            294.04256844800005,
            540.1764671999999
        ],
        "match": 13
    },
    {
        "content": "framework) are available in the file simple\u209bchedulers.cpp. The",
        "page_index": 12,
        "bbox": [
            53.798,
            518.7088464,
            294.04443296,
            529.2174672
        ],
        "match": 13
    },
    {
        "content": "only exception is the Source heuristic, which is implemented in",
        "page_index": 12,
        "bbox": [
            53.798,
            507.7498464,
            294.043960704,
            518.2584672
        ],
        "match": 13
    },
    {
        "content": "a separate file named second\u2095euristic_weights_cluster.cpp.",
        "page_index": 12,
        "bbox": [
            53.798,
            496.7908464,
            295.426128448,
            507.2994672
        ],
        "match": 13
    },
    {
        "content": "These two C++ files are automatically compiled and invoked by the",
        "page_index": 12,
        "bbox": [
            53.529,
            487.3740672,
            294.0487347839999,
            496.3404672
        ],
        "match": 13
    },
    {
        "content": "Python scripts.",
        "page_index": 12,
        "bbox": [
            53.798,
            476.4150672,
            108.6006368,
            485.3814672
        ],
        "match": null
    },
    {
        "content": "Finally, we provide the Python scripts required for running and",
        "page_index": 12,
        "bbox": [
            63.761,
            465.4560672,
            294.043975232,
            474.42246719999997
        ],
        "match": 11
    },
    {
        "content": "evaluating HDagg separately, since these are independent from our",
        "page_index": 12,
        "bbox": [
            53.798,
            452.95584640000004,
            294.21317692800005,
            463.4644672
        ],
        "match": 10
    },
    {
        "content": "own implementations, and they also require the HDagg library as",
        "page_index": 12,
        "bbox": [
            53.798,
            441.99684640000004,
            294.04453216,
            452.5054672
        ],
        "match": 10
    },
    {
        "content": "an external dependency [46].",
        "page_index": 12,
        "bbox": [
            53.798,
            432.58006720000003,
            160.005008,
            441.5464672
        ],
        "match": null
    },
    {
        "content": "As a general remark on our algorithms, we also note that some",
        "page_index": 12,
        "bbox": [
            63.761,
            421.6210672,
            294.0450512000002,
            430.5874672
        ],
        "match": 11
    },
    {
        "content": "our simpler methods only return an assignment of nodes to proces\u2212",
        "page_index": 12,
        "bbox": [
            53.798,
            410.6620672,
            295.556711936,
            419.6284672
        ],
        "match": 11
    },
    {
        "content": "sors and supersteps, but not a concrete communication schedule.",
        "page_index": 12,
        "bbox": [
            53.798,
            399.7030672,
            295.4287972736001,
            408.6694672
        ],
        "match": 11
    },
    {
        "content": "These algorithms implicitly assume that the corresponding \u0393 is the",
        "page_index": 12,
        "bbox": [
            53.529,
            388.7440672,
            294.048151552,
            397.7284
        ],
        "match": 11
    },
    {
        "content": "lazy communication schedule defined by the assignment, where ev\u2212",
        "page_index": 12,
        "bbox": [
            53.798,
            375.7048624,
            295.55826566400003,
            386.7514672
        ],
        "match": 11
    },
    {
        "content": "ery value is sent directly and in the last possible superstep; that is, if",
        "page_index": 12,
        "bbox": [
            53.798,
            366.8260672,
            294.045335552,
            375.7924672
        ],
        "match": 11
    },
    {
        "content": "a node \ud835\udc63 has a direct predecessor \ud835\udc62, and \ud835\udf0b (\ud835\udc63) \u2260 \ud835\udf0b (\ud835\udc62), then we have",
        "page_index": 12,
        "bbox": [
            53.798,
            354.2979472,
            294.0450601728,
            364.8334672
        ],
        "match": 11
    },
    {
        "content": "(\ud835\udc62, \ud835\udf0b (\ud835\udc62), \ud835\udf0b (\ud835\udc63), \ud835\udf0f (\ud835\udc63) \u2212 1) \u2208 \u0393. In particular, the BSP\u2212converted vari\u2212",
        "page_index": 12,
        "bbox": [
            54.247,
            343.5641072,
            295.56001388799996,
            353.89340000000004
        ],
        "match": 11
    },
    {
        "content": "ants of the baseline algorithms, the BSPg and Source heuristics, and",
        "page_index": 12,
        "bbox": [
            53.798,
            332.40784640000004,
            294.04419628799997,
            342.9164672
        ],
        "match": 11
    },
    {
        "content": "even HC assumes such a lazy schedule, whereas the ILP\u2212based meth\u2212",
        "page_index": 12,
        "bbox": [
            53.798,
            321.44884640000004,
            295.556602496,
            331.9574672
        ],
        "match": 11
    },
    {
        "content": "ods and HCcs return a specific, optimized communication schedule.",
        "page_index": 12,
        "bbox": [
            53.798,
            310.48984640000003,
            295.42264108800003,
            320.9984672
        ],
        "match": 11
    },
    {
        "content": "We note that ILPinit also returns a specific \u0393, but this is replaced",
        "page_index": 12,
        "bbox": [
            53.368,
            299.53084640000003,
            294.04273940479993,
            310.05740000000003
        ],
        "match": 11
    },
    {
        "content": "by the corresponding lazy schedule in our pipeline, since the algo\u2212",
        "page_index": 12,
        "bbox": [
            53.798,
            290.1140672,
            295.56357123199996,
            299.0804672
        ],
        "match": 11
    },
    {
        "content": "rithm is followed by HC, which is only designed to work with lazy",
        "page_index": 12,
        "bbox": [
            53.798,
            277.6128464,
            294.2768800000001,
            288.1214672
        ],
        "match": 11
    },
    {
        "content": "communication schedules.",
        "page_index": 12,
        "bbox": [
            53.79800000000003,
            268.1960672,
            150.56338880000004,
            277.1624672
        ],
        "match": 11
    },
    {
        "content": "A.1 Baseline methods",
        "page_index": 12,
        "bbox": [
            53.79800000000003,
            244.7229979,
            168.26718630000005,
            255.6320979
        ],
        "match": 20
    },
    {
        "content": "The main idea of the Cilk work\u2212stealing scheduler was already",
        "page_index": 12,
        "bbox": [
            53.529,
            231.9838464,
            294.277347072,
            242.49246720000002
        ],
        "match": 20
    },
    {
        "content": "outlined before: it is a greedy algorithm where every ready task",
        "page_index": 12,
        "bbox": [
            53.798,
            222.5670672,
            294.2757720320002,
            231.53346720000002
        ],
        "match": 20
    },
    {
        "content": "(i.e. node with all of its predecessors already computed) is added",
        "page_index": 12,
        "bbox": [
            53.529,
            211.6080672,
            294.04335494400004,
            220.57446720000002
        ],
        "match": 20
    },
    {
        "content": "to the \u201cready stack\u201d of one of the processors. Whenever one of the",
        "page_index": 12,
        "bbox": [
            53.798,
            200.6490672,
            294.0436140032001,
            209.6154672
        ],
        "match": 20
    },
    {
        "content": "processors become idle (it finishes computing a node), it takes the",
        "page_index": 12,
        "bbox": [
            53.798,
            189.6910672,
            294.04644738560006,
            198.6574672
        ],
        "match": null
    },
    {
        "content": "topmost ready task from its own stack, and begins the execution",
        "page_index": 12,
        "bbox": [
            53.798,
            178.7320672,
            294.0471288320001,
            187.6984672
        ],
        "match": 20
    },
    {
        "content": "of this node. If the processor\u2019s stack is empty, it selects another",
        "page_index": 12,
        "bbox": [
            53.798,
            167.77306719999999,
            294.21175193600004,
            176.7394672
        ],
        "match": 20
    },
    {
        "content": "processor with a non\u2212empty stack (uniformly at random among",
        "page_index": 12,
        "bbox": [
            53.798,
            156.81406719999998,
            294.04712883200006,
            165.7804672
        ],
        "match": 20
    },
    {
        "content": "these processors), and starts executing the node at the bottom of",
        "page_index": 12,
        "bbox": [
            53.798,
            145.85506719999998,
            294.0471288320001,
            154.8214672
        ],
        "match": 20
    },
    {
        "content": "this stack, also removing the node from the stack. This ensures that",
        "page_index": 12,
        "bbox": [
            53.798,
            134.89606719999998,
            294.045335552,
            143.8624672
        ],
        "match": 20
    },
    {
        "content": "no processor is idle whenever there is a ready node.",
        "page_index": 12,
        "bbox": [
            53.798,
            123.9370672,
            243.23113280000007,
            132.9034672
        ],
        "match": 20
    },
    {
        "content": "We note that originally, Cilk was not defined on DAGs, but",
        "page_index": 12,
        "bbox": [
            63.761,
            111.43584639999999,
            294.04035366399995,
            121.94446719999999
        ],
        "match": 11
    },
    {
        "content": "instead on processes that spawn further subtasks during execution.",
        "page_index": 12,
        "bbox": [
            53.798,
            102.01906720000001,
            295.42517484800004,
            110.9854672
        ],
        "match": 11
    },
    {
        "content": "In this original setting, each spawned subtask is added to the top",
        "page_index": 12,
        "bbox": [
            53.798,
            91.0600672,
            294.04329121280006,
            100.0264672
        ],
        "match": 11
    },
    {
        "content": "13",
        "page_index": 12,
        "bbox": [
            302.677,
            72.68305240000001,
            309.162634,
            79.6568524
        ],
        "match": 13
    },
    {
        "content": "of the stack of the processor executing the parent process. In con\u2212",
        "page_index": 12,
        "bbox": [
            317.955,
            698.3330672,
            559.7173433280001,
            707.2994672
        ],
        "match": 13
    },
    {
        "content": "trast to this original setting, our DAGs do not have parent\u2212child",
        "page_index": 12,
        "bbox": [
            317.955,
            687.3740672,
            558.2041288320002,
            696.3404672
        ],
        "match": 13
    },
    {
        "content": "relationships between the given nodes. To adapt the algorithm to",
        "page_index": 12,
        "bbox": [
            317.955,
            676.4150672,
            558.2033218560001,
            685.3814672
        ],
        "match": 13
    },
    {
        "content": "DAGs, we use a very similar rule: whenever the execution of the",
        "page_index": 12,
        "bbox": [
            317.955,
            665.4560672,
            558.2041288320002,
            674.4224672
        ],
        "match": 13
    },
    {
        "content": "last direct predecessor of a node \ud835\udc63 is finished, if this happens on",
        "page_index": 12,
        "bbox": [
            317.955,
            654.4173695999999,
            558.203333952,
            663.4644672
        ],
        "match": 13
    },
    {
        "content": "processor \ud835\udc5d, then \ud835\udc63 is added to the top of processor \ud835\udc5d\u2019s stack.",
        "page_index": 12,
        "bbox": [
            317.955,
            643.4583696,
            540.1994384,
            652.5054672
        ],
        "match": 13
    },
    {
        "content": "As for BL\u2212EST and ETF, we refer the reader to the work of [27]",
        "page_index": 12,
        "bbox": [
            327.918,
            631.0378463999999,
            558.2015348991999,
            641.5464671999999
        ],
        "match": 5
    },
    {
        "content": "for more details. We note that our baseline implementation for",
        "page_index": 12,
        "bbox": [
            317.955,
            621.6210672,
            558.3687519360001,
            630.5874672
        ],
        "match": 5
    },
    {
        "content": "both of these algorithms corresponds to the versions described in",
        "page_index": 12,
        "bbox": [
            317.955,
            610.6620671999999,
            558.1989641856,
            619.6284671999999
        ],
        "match": 5
    },
    {
        "content": "[27], which is already extended with the concept of communication",
        "page_index": 12,
        "bbox": [
            317.955,
            599.7030672,
            558.2022065920002,
            608.6694672
        ],
        "match": 5
    },
    {
        "content": "volume (but not with latency or NUMA effects, since these are new",
        "page_index": 12,
        "bbox": [
            317.731,
            588.7440671999999,
            558.5319210880001,
            597.7104671999999
        ],
        "match": 5
    },
    {
        "content": "in our model). In case have NUMA effects, we compute the Earliest",
        "page_index": 12,
        "bbox": [
            317.955,
            577.7850672,
            558.2023355520001,
            586.7514672
        ],
        "match": 5
    },
    {
        "content": "Start Time (EST) in these baseline algorithms by considering the",
        "page_index": 12,
        "bbox": [
            317.955,
            566.8260672,
            558.2041288319999,
            575.7924672
        ],
        "match": 5
    },
    {
        "content": "average coefficient of the communication cost over all pairs of pro\u2212",
        "page_index": 12,
        "bbox": [
            317.955,
            555.8670672,
            559.7211361152,
            564.8334672
        ],
        "match": 5
    },
    {
        "content": "cessors, and multiplying \ud835\udc50 (\ud835\udc63) with this number when considering",
        "page_index": 12,
        "bbox": [
            317.955,
            543.5641072,
            558.1980410048,
            553.8754672
        ],
        "match": 5
    },
    {
        "content": "the required communication steps. Note that an extension of the",
        "page_index": 12,
        "bbox": [
            317.955,
            533.9500671999999,
            558.2041288320002,
            542.9164671999999
        ],
        "match": 5
    },
    {
        "content": "EST computation with NUMA factors would also be possible, to",
        "page_index": 12,
        "bbox": [
            317.955,
            522.9910672,
            558.204128832,
            531.9574672
        ],
        "match": 5
    },
    {
        "content": "obtain a version of these baselines that is more specialized towards",
        "page_index": 12,
        "bbox": [
            317.955,
            512.0320671999999,
            558.202335552,
            520.9984671999999
        ],
        "match": 5
    },
    {
        "content": "our more realistic model; however, we leave the investigation of",
        "page_index": 12,
        "bbox": [
            317.955,
            501.0730672,
            558.2041288320002,
            510.0394672
        ],
        "match": 5
    },
    {
        "content": "this approach to future work.",
        "page_index": 12,
        "bbox": [
            317.955,
            490.1140672,
            425.2559088,
            499.0804672
        ],
        "match": 5
    },
    {
        "content": "We also note that Cilk, BL\u2212EST and ETF assign nodes to concrete",
        "page_index": 12,
        "bbox": [
            327.918,
            477.6128464,
            558.202020416,
            488.1214672
        ],
        "match": 11
    },
    {
        "content": "points in time. This can be naturally converted into a BSP schedule",
        "page_index": 12,
        "bbox": [
            317.955,
            468.1960672,
            558.202335552,
            477.1624672
        ],
        "match": 11
    },
    {
        "content": "by sorting it into supersteps iteratively: if some of the nodes are",
        "page_index": 12,
        "bbox": [
            317.955,
            457.2370672,
            558.2041288320002,
            466.2034672
        ],
        "match": 11
    },
    {
        "content": "already assigned to supersteps 1, ..., (\ud835\udc60 \u2212 1), we can find the earliest",
        "page_index": 12,
        "bbox": [
            317.955,
            444.9331072,
            558.2010751168,
            455.2444672
        ],
        "match": 11
    },
    {
        "content": "point \ud835\udc61 in time when our classical schedule begins executing a node",
        "page_index": 12,
        "bbox": [
            317.955,
            435.2383696,
            558.2033514880001,
            444.28546719999997
        ],
        "match": 11
    },
    {
        "content": "\ud835\udc63 such that (i) \ud835\udc63 is not yet assigned to a superstep, (ii) \ud835\udc63 has a direct",
        "page_index": 12,
        "bbox": [
            317.731,
            424.28036960000003,
            558.205219392,
            433.3274672
        ],
        "match": 11
    },
    {
        "content": "predecessor \ud835\udc630 also not yet assigned to a superstep, and (iii) our",
        "page_index": 12,
        "bbox": [
            317.955,
            412.0604546,
            558.36857504,
            422.3684672
        ],
        "match": 11
    },
    {
        "content": "schedule has \ud835\udf0b (\ud835\udc63) \u2260 \ud835\udf0b (\ud835\udc630). This implies that the next computation",
        "page_index": 12,
        "bbox": [
            317.955,
            400.87394720000003,
            558.2028936832,
            411.4094672
        ],
        "match": 11
    },
    {
        "content": "phase can last at most until time \ud835\udc61; hence we assign all nodes that",
        "page_index": 12,
        "bbox": [
            317.955,
            391.4033696,
            558.1977137984001,
            400.4504672
        ],
        "match": null
    },
    {
        "content": "are executed before step \ud835\udc61 to superstep \ud835\udc60, and we continue with this",
        "page_index": 12,
        "bbox": [
            317.955,
            380.4443696,
            558.1997843839999,
            389.4914672
        ],
        "match": 11
    },
    {
        "content": "procedure for superstep (\ud835\udc60 + 1).",
        "page_index": 12,
        "bbox": [
            317.955,
            368.2211072,
            431.703608,
            378.5324672
        ],
        "match": 11
    },
    {
        "content": "Finally, HDagg is a more sophisticated algorithmic baseline, which",
        "page_index": 12,
        "bbox": [
            327.918,
            357.0648464,
            558.2032117760001,
            367.5734672
        ],
        "match": 11
    },
    {
        "content": "directly develops a BSP\u2212like schedule, sorting the nodes of the DAG",
        "page_index": 12,
        "bbox": [
            317.955,
            347.6480672,
            558.2023355520001,
            356.6144672
        ],
        "match": 11
    },
    {
        "content": "into supersteps (called \u2018wavefronts\u2019), and then distributing nodes",
        "page_index": 12,
        "bbox": [
            317.955,
            336.6890672,
            558.1981392767999,
            345.6554672
        ],
        "match": 11
    },
    {
        "content": "among processors in each wavefront. The algorithm strives to en\u2212",
        "page_index": 12,
        "bbox": [
            317.955,
            325.7300672,
            559.7198449536,
            334.6964672
        ],
        "match": 11
    },
    {
        "content": "sure both a balanced workload among processors in a superstep,",
        "page_index": 12,
        "bbox": [
            317.955,
            314.77206720000004,
            559.1918674560001,
            323.7384672
        ],
        "match": 11
    },
    {
        "content": "and a reduced amount of inter\u2212processor communication between",
        "page_index": 12,
        "bbox": [
            317.955,
            303.81306720000003,
            558.2030887296002,
            312.7794672
        ],
        "match": 11
    },
    {
        "content": "the supersteps. For more details of the algorithm, we refer the",
        "page_index": 12,
        "bbox": [
            317.955,
            292.85406720000003,
            558.2041288320002,
            301.8204672
        ],
        "match": 11
    },
    {
        "content": "reader to [46]. Note that this algorithm was originally developed",
        "page_index": 12,
        "bbox": [
            317.955,
            281.8950672,
            558.2057150720001,
            290.8614672
        ],
        "match": 11
    },
    {
        "content": "(and analyzed) for the specific purpose of speeding up SpTRSV com\u2212",
        "page_index": 12,
        "bbox": [
            317.686,
            270.9360672,
            559.7171111680001,
            279.9024672
        ],
        "match": 11
    },
    {
        "content": "putations, i.e. solving sparse linear systems defined by a triangular",
        "page_index": 12,
        "bbox": [
            317.955,
            259.9770672,
            558.3736296576,
            268.9434672
        ],
        "match": null
    },
    {
        "content": "matrix. However, the method is in fact a general DAG scheduling",
        "page_index": 12,
        "bbox": [
            317.955,
            249.0180672,
            558.1975654272001,
            257.9844672
        ],
        "match": 11
    },
    {
        "content": "algorithm that can be applied to any computational DAG; it is even",
        "page_index": 12,
        "bbox": [
            317.955,
            238.0590672,
            558.2023355520001,
            247.0254672
        ],
        "match": 12
    },
    {
        "content": "analyzed in [46] using DAG terminology. That is, after a topological",
        "page_index": 12,
        "bbox": [
            317.955,
            227.10006719999998,
            558.2053978880001,
            236.0664672
        ],
        "match": 11
    },
    {
        "content": "ordering, the adjacency matrix of any DAG becomes lower trian\u2212",
        "page_index": 12,
        "bbox": [
            317.955,
            216.14106719999998,
            559.713711936,
            225.1074672
        ],
        "match": 11
    },
    {
        "content": "gular, and by artificially adding an edge from each node to itself",
        "page_index": 12,
        "bbox": [
            317.955,
            205.18206719999998,
            558.204128832,
            214.1484672
        ],
        "match": 11
    },
    {
        "content": "(i.e. setting the main diagonal of the matrix to 1, thus ensuring",
        "page_index": 12,
        "bbox": [
            317.686,
            194.22406719999998,
            558.19788544,
            203.1904672
        ],
        "match": 11
    },
    {
        "content": "it is non\u2212singular), we obtain an SpTRSV problem where the de\u2212",
        "page_index": 12,
        "bbox": [
            317.955,
            183.26506719999998,
            559.7131739520001,
            192.2314672
        ],
        "match": 11
    },
    {
        "content": "pendency DAG derived from the matrix is identical to our original",
        "page_index": 12,
        "bbox": [
            317.955,
            172.3060672,
            558.2006140032001,
            181.27246720000002
        ],
        "match": 11
    },
    {
        "content": "computational DAG. As such, the schedule returned by HDagg for",
        "page_index": 12,
        "bbox": [
            317.955,
            159.8048464,
            558.3725894528,
            170.31346720000002
        ],
        "match": 10
    },
    {
        "content": "this matrix directly corresponds to a schedule for our original DAG",
        "page_index": 12,
        "bbox": [
            317.955,
            150.3880672,
            558.202335552,
            159.35446720000002
        ],
        "match": 11
    },
    {
        "content": "in the BSP model.",
        "page_index": 12,
        "bbox": [
            317.955,
            139.4290672,
            382.6565424,
            148.3954672
        ],
        "match": 11
    },
    {
        "content": "Since the original implementation of HDagg from [46] is openly",
        "page_index": 12,
        "bbox": [
            327.918,
            126.92784639999999,
            558.4378004288,
            137.4364672
        ],
        "match": 15
    },
    {
        "content": "available, we directly apply this in our experiments: we convert",
        "page_index": 12,
        "bbox": [
            317.955,
            117.5110672,
            558.2041288320002,
            126.47746719999999
        ],
        "match": null
    },
    {
        "content": "our computational DAG into the required triangular matrix format,",
        "page_index": 12,
        "bbox": [
            317.955,
            106.5520672,
            559.1864876160001,
            115.51846719999999
        ],
        "match": 15
    },
    {
        "content": "we use the example script from the HDagg library to output the",
        "page_index": 12,
        "bbox": [
            317.623,
            94.0508464,
            558.200351296,
            104.5594672
        ],
        "match": 15
    },
    {
        "content": "Algorithm 1 Summary of the BSPg heuristic",
        "page_index": 13,
        "bbox": [
            53.467,
            696.9999632,
            219.6317456,
            706.5312464
        ],
        "match": 146
    },
    {
        "content": "\ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d \u2190 0",
        "page_index": 13,
        "bbox": [
            62.406,
            683.9321071999999,
            117.267376,
            694.2434671999999
        ],
        "match": 157
    },
    {
        "content": "\ud835\udc52\ud835\udc5b\ud835\udc51\ud835\udc46\ud835\udc61\ud835\udc52\ud835\udc5d \u2190 \ud835\udc39\ud835\udc4e\ud835\udc59\ud835\udc60\ud835\udc52",
        "page_index": 13,
        "bbox": [
            62.451,
            672.9731072,
            125.6646336,
            683.2037696
        ],
        "match": 157
    },
    {
        "content": "\ud835\udc53 \ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc60\u210e\ud835\udc47\ud835\udc56\ud835\udc5a\ud835\udc52\ud835\udc60 \u2190 {0}",
        "page_index": 13,
        "bbox": [
            63.21300000000001,
            662.0141072,
            134.60819040000004,
            672.3254672
        ],
        "match": 157
    },
    {
        "content": "free[\ud835\udc5d] \u2190 \ud835\udc47\ud835\udc5f\ud835\udc62\ud835\udc52 for all \ud835\udc5d",
        "page_index": 13,
        "bbox": [
            62.76500000000003,
            650.3198624000001,
            150.7165696,
            661.3664672000001
        ],
        "match": 157
    },
    {
        "content": "while there are still unassigned nodes do",
        "page_index": 13,
        "bbox": [
            62.76500000000003,
            639.3877616000002,
            215.26463680000003,
            650.4074672000002
        ],
        "match": 157
    },
    {
        "content": "if \ud835\udc52\ud835\udc5b\ud835\udc51\ud835\udc46\ud835\udc61\ud835\udc52\ud835\udc5d = \ud835\udc47\ud835\udc5f\ud835\udc62\ud835\udc52 and \ud835\udc53 \ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc60\u210e\ud835\udc47 \ud835\udc56\ud835\udc5a\ud835\udc52\ud835\udc60 = \u2205 then",
        "page_index": 13,
        "bbox": [
            71.73100000000005,
            628.4287616000003,
            239.77904480000004,
            639.3677696000002
        ],
        "match": 157
    },
    {
        "content": "ready\ud835\udc5d \u2190 \u2205 for all \ud835\udc5d",
        "page_index": 13,
        "bbox": [
            80.69700000000006,
            617.4428624000003,
            157.19756960000007,
            628.4894672000003
        ],
        "match": 157
    },
    {
        "content": "ready\ud835\udc4e\ud835\udc59\ud835\udc59 \u2190 ready\ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d \u2190 \ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d + 1",
        "page_index": 13,
        "bbox": [
            80.33900000000008,
            596.2611072000003,
            180.4123760000001,
            616.1865072000003
        ],
        "match": 157
    },
    {
        "content": "\ud835\udc52\ud835\udc5b\ud835\udc51\ud835\udc46\ud835\udc61\ud835\udc52\ud835\udc5d \u2190 \ud835\udc39\ud835\udc4e\ud835\udc59\ud835\udc60\ud835\udc52",
        "page_index": 13,
        "bbox": [
            80.38400000000011,
            585.3021072000004,
            143.59663360000013,
            595.5327696000004
        ],
        "match": 157
    },
    {
        "content": "\ud835\udc53 \ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc60\u210e\ud835\udc47\ud835\udc56\ud835\udc5a\ud835\udc52\ud835\udc60 \u2190 {0}",
        "page_index": 13,
        "bbox": [
            81.1460000000001,
            574.3431072000004,
            152.54119040000012,
            584.6544672000005
        ],
        "match": 157
    },
    {
        "content": "end if",
        "page_index": 13,
        "bbox": [
            71.73100000000011,
            562.6757616000006,
            95.30366560000012,
            571.6421616000006
        ],
        "match": null
    },
    {
        "content": "\ud835\udc61 \u2190 earliest time from \ud835\udc53 \ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc60\u210e\ud835\udc47 \ud835\udc56\ud835\udc5a\ud835\udc52\ud835\udc60",
        "page_index": 13,
        "bbox": [
            71.41700000000012,
            552.4251072000005,
            201.0776464000001,
            562.7364672000006
        ],
        "match": 157
    },
    {
        "content": "for all nodes \ud835\udc63 that finish at \ud835\udc61 do",
        "page_index": 13,
        "bbox": [
            71.73100000000012,
            540.7577616000007,
            191.70563680000012,
            551.7774672000006
        ],
        "match": 157
    },
    {
        "content": "free[\ud835\udf0b (\ud835\udc63)] \u2190 \ud835\udc47\ud835\udc5f\ud835\udc62\ud835\udc52",
        "page_index": 13,
        "bbox": [
            80.69700000000013,
            529.7718624000007,
            149.50586720000015,
            540.7377696000007
        ],
        "match": null
    },
    {
        "content": "for all out\u2212neighbors \ud835\udc62 of \ud835\udc63 do",
        "page_index": 13,
        "bbox": [
            80.69700000000014,
            518.8397616000008,
            192.84863680000012,
            529.8594672000007
        ],
        "match": 154
    },
    {
        "content": "if \ud835\udc62\u2019s in\u2212neighbors are all finished then",
        "page_index": 13,
        "bbox": [
            89.66400000000013,
            507.8807616000007,
            235.4970448000001,
            518.9004672000008
        ],
        "match": 157
    },
    {
        "content": "ready \u2190 ready \u222a {\ud835\udc62}",
        "page_index": 13,
        "bbox": [
            98.63000000000012,
            496.89586240000074,
            175.4011904000001,
            507.8617696000007
        ],
        "match": null
    },
    {
        "content": "if \u2200 (\ud835\udc620, \ud835\udc62) \u2208 \ud835\udc38 we have either \ud835\udf0b (\ud835\udc620) = \ud835\udf0b (\ud835\udc63) or \ud835\udf0f (\ud835\udc620) <",
        "page_index": 13,
        "bbox": [
            98.63,
            485.9637616,
            294.5616304,
            496.9834672
        ],
        "match": null
    },
    {
        "content": "\ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d then",
        "page_index": 13,
        "bbox": [
            98.27100000000004,
            475.0047616,
            155.71004480000002,
            485.9437696
        ],
        "match": 154
    },
    {
        "content": "ready\ud835\udf0b (\ud835\udc63) \u2190 ready\ud835\udf0b (\ud835\udc63) \u222a {\ud835\udc62}",
        "page_index": 13,
        "bbox": [
            107.59700000000004,
            463.0295496,
            215.5891904,
            474.9847696
        ],
        "match": 157
    },
    {
        "content": "end if",
        "page_index": 13,
        "bbox": [
            98.63,
            453.0867616,
            122.2026656,
            462.0531616
        ],
        "match": 154
    },
    {
        "content": "end if",
        "page_index": 13,
        "bbox": [
            89.664,
            442.1277616,
            113.2366656,
            451.0941616
        ],
        "match": 177
    },
    {
        "content": "end for",
        "page_index": 13,
        "bbox": [
            80.697,
            431.1687616,
            110.16059040000002,
            440.1351616
        ],
        "match": 177
    },
    {
        "content": "end for",
        "page_index": 13,
        "bbox": [
            71.73100000000001,
            420.2097616,
            101.19459040000002,
            429.1761616
        ],
        "match": 177
    },
    {
        "content": "if \ud835\udc52\ud835\udc5b\ud835\udc51\ud835\udc46\ud835\udc61\ud835\udc52\ud835\udc5d = \ud835\udc39\ud835\udc4e\ud835\udc59\ud835\udc60\ud835\udc52 then",
        "page_index": 13,
        "bbox": [
            71.73100000000001,
            409.2507616,
            161.45304480000001,
            420.1897696
        ],
        "match": 177
    },
    {
        "content": "while \u2203 \ud835\udc5d with free[\ud835\udc5d] = \ud835\udc47\ud835\udc5f\ud835\udc62\ud835\udc52 and ready\ud835\udc5d \u2260 \u2205 or \u2203 \ud835\udc5d",
        "page_index": 13,
        "bbox": [
            80.697,
            398.2648624,
            293.41256960000004,
            409.3114672
        ],
        "match": 157
    },
    {
        "content": "with free[\ud835\udc5d] = \ud835\udc47\ud835\udc5f\ud835\udc62\ud835\udc52 and ready\ud835\udc4e\ud835\udc59\ud835\udc59 \u2260 \u2205 do",
        "page_index": 13,
        "bbox": [
            80.36600000000001,
            387.3068624,
            228.55463679999994,
            398.35346719999995
        ],
        "match": 157
    },
    {
        "content": "\ud835\udc63 \u2190 ChooseNode(\ud835\udc5d)",
        "page_index": 13,
        "bbox": [
            89.43999999999994,
            376.38372799999996,
            167.39781119999992,
            387.31376959999994
        ],
        "match": 157
    },
    {
        "content": "delete \ud835\udc63 from ready, ready\ud835\udc5d and/or ready\ud835\udc4e\ud835\udc59\ud835\udc59",
        "page_index": 13,
        "bbox": [
            89.66399999999992,
            365.3888624,
            246.42778659999988,
            376.43546719999995
        ],
        "match": 157
    },
    {
        "content": "\ud835\udf0b (\ud835\udc63) \u2190 \ud835\udc5d, \ud835\udf0f (\ud835\udc63) \u2190 \ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d",
        "page_index": 13,
        "bbox": [
            89.5739999999999,
            355.16510719999997,
            198.6014991999999,
            365.47646719999995
        ],
        "match": 157
    },
    {
        "content": "\ud835\udc53 \ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc60\u210e\ud835\udc47\ud835\udc56\ud835\udc5a\ud835\udc52\ud835\udc60 \u2190 \ud835\udc53 \ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc60\u210e\ud835\udc47 \ud835\udc56\ud835\udc5a\ud835\udc52\ud835\udc60 \u222a {\ud835\udc61 + \ud835\udc64 (\ud835\udc63)}",
        "page_index": 13,
        "bbox": [
            90.1119999999999,
            344.20610719999996,
            242.85348159999992,
            354.43676959999993
        ],
        "match": 157
    },
    {
        "content": "free[\ud835\udc5d] \u2190 \ud835\udc39\ud835\udc4e\ud835\udc59\ud835\udc60\ud835\udc52",
        "page_index": 13,
        "bbox": [
            89.6639999999999,
            332.5118624,
            148.43463359999993,
            343.47776959999993
        ],
        "match": 157
    },
    {
        "content": "end while",
        "page_index": 13,
        "bbox": [
            80.6969999999999,
            321.5797615999999,
            120.57954719999991,
            330.54616159999995
        ],
        "match": 163
    },
    {
        "content": "end if",
        "page_index": 13,
        "bbox": [
            71.73099999999991,
            310.6207615999999,
            95.30366559999992,
            319.58716159999994
        ],
        "match": 154
    },
    {
        "content": "if ready\ud835\udc4e\ud835\udc59\ud835\udc59 = \u2205 and \u2203 \ud835\udc432 idle processors then",
        "page_index": 13,
        "bbox": [
            71.73099999999991,
            298.6254546,
            234.9710448,
            312.4587003
        ],
        "match": 157
    },
    {
        "content": "\ud835\udc52\ud835\udc5b\ud835\udc51\ud835\udc46\ud835\udc61\ud835\udc52\ud835\udc5d \u2190 \ud835\udc47 \ud835\udc5f\ud835\udc62\ud835\udc52",
        "page_index": 13,
        "bbox": [
            80.38399999999999,
            289.4111072,
            141.7498672,
            299.6417696
        ],
        "match": 157
    },
    {
        "content": "end if",
        "page_index": 13,
        "bbox": [
            71.731,
            277.74376159999997,
            95.3036656,
            286.7101616
        ],
        "match": 154
    },
    {
        "content": "end while",
        "page_index": 13,
        "bbox": [
            62.76499999999999,
            266.78576159999994,
            102.6475472,
            275.75216159999997
        ],
        "match": null
    },
    {
        "content": "returned schedule, and then we evaluate this according to the cost",
        "page_index": 13,
        "bbox": [
            53.798,
            244.6040672,
            294.0407357888,
            253.57046720000002
        ],
        "match": 151
    },
    {
        "content": "model of our paper.",
        "page_index": 13,
        "bbox": [
            53.798,
            233.6450672,
            125.2691744,
            242.61146720000002
        ],
        "match": 151
    },
    {
        "content": "A.2 Initialization heuristics",
        "page_index": 13,
        "bbox": [
            53.798,
            210.1709979,
            197.1108467,
            221.0800979
        ],
        "match": 153
    },
    {
        "content": "The BSPg heuristics is a greedy method that is designed specifically",
        "page_index": 13,
        "bbox": [
            53.529,
            197.4328464,
            294.2772871039999,
            207.9414672
        ],
        "match": 153
    },
    {
        "content": "for developing BSP schedules. Even though the output assigns the",
        "page_index": 13,
        "bbox": [
            53.798,
            188.01606719999998,
            294.046904672,
            196.9824672
        ],
        "match": 153
    },
    {
        "content": "nodes to supersteps, the algorithm still considers the concrete time",
        "page_index": 13,
        "bbox": [
            53.798,
            177.05706719999998,
            294.04533555200004,
            186.0234672
        ],
        "match": 153
    },
    {
        "content": "step of starting and finishing each task, like in classical schedulers",
        "page_index": 13,
        "bbox": [
            53.798,
            166.0980672,
            294.0407357888,
            175.06446720000002
        ],
        "match": 153
    },
    {
        "content": "such as Cilk or ETF; this helps us develop a balanced work cost",
        "page_index": 13,
        "bbox": [
            53.798,
            153.5968464,
            294.041510976,
            164.10546720000002
        ],
        "match": 153
    },
    {
        "content": "between the processors in each superstep. When a task is finished,",
        "page_index": 13,
        "bbox": [
            53.798,
            144.1800672,
            295.03217753600006,
            153.14646720000002
        ],
        "match": 153
    },
    {
        "content": "we consider the new tasks \ud835\udc63 \u2208 \ud835\udc49 that become ready (i.e. have all",
        "page_index": 13,
        "bbox": [
            53.467,
            131.8761072,
            294.04176569599997,
            142.18746720000001
        ],
        "match": 153
    },
    {
        "content": "of their direct predecessors already finished). If \ud835\udc63 already has a",
        "page_index": 13,
        "bbox": [
            53.798,
            122.1813696,
            294.04423263999996,
            131.2284672
        ],
        "match": 153
    },
    {
        "content": "predecessor on multiple processors in the current superstep, then",
        "page_index": 13,
        "bbox": [
            53.798,
            111.3030672,
            294.04146206720014,
            120.2694672
        ],
        "match": 153
    },
    {
        "content": "\ud835\udc63 is added to a general ready\ud835\udc4e\ud835\udc59\ud835\udc59 set of nodes that only become",
        "page_index": 13,
        "bbox": [
            53.574,
            97.85200029999999,
            294.04374559999997,
            109.31046719999999
        ],
        "match": 153
    },
    {
        "content": "available for all processors in the next superstep. Otherwise, if \ud835\udc63 only",
        "page_index": 13,
        "bbox": [
            53.798,
            89.30536959999999,
            294.2784064,
            98.35246719999999
        ],
        "match": 153
    },
    {
        "content": "14",
        "page_index": 13,
        "bbox": [
            302.67699999999996,
            72.68305240000001,
            309.16263399999997,
            79.6568524
        ],
        "match": 97
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 13,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": null
    },
    {
        "content": "has predecessors on a single processor \ud835\udc5d in the current superstep,",
        "page_index": 13,
        "bbox": [
            317.955,
            698.2523696,
            559.1847646592,
            707.2994672
        ],
        "match": 153
    },
    {
        "content": "then \ud835\udc63 is added to a set ready\ud835\udc5d of that processor, signaling that",
        "page_index": 13,
        "bbox": [
            317.955,
            684.8820003000001,
            558.198217664,
            696.3404672
        ],
        "match": 153
    },
    {
        "content": "processor \ud835\udc5d is already allowed to execute \ud835\udc63 in the current superstep.",
        "page_index": 13,
        "bbox": [
            317.955,
            676.0093695999999,
            559.5803664,
            685.0564671999999
        ],
        "match": 153
    },
    {
        "content": "Whenever a task is finished and some processor \ud835\udc5d becomes free, they",
        "page_index": 13,
        "bbox": [
            317.525,
            665.0503696,
            558.432982976,
            674.0974672
        ],
        "match": 153
    },
    {
        "content": "are assigned a new node to execute (based on rules discussed below),",
        "page_index": 13,
        "bbox": [
            317.955,
            654.1720672,
            559.1864876160001,
            663.1384672
        ],
        "match": 153
    },
    {
        "content": "if this is still possible without closing the current computation phase,",
        "page_index": 13,
        "bbox": [
            317.955,
            643.2130672,
            559.1864876160001,
            652.1794672
        ],
        "match": 153
    },
    {
        "content": "i.e. there are still nodes that have all their direct predecessors on \ud835\udc5d",
        "page_index": 13,
        "bbox": [
            317.955,
            632.1733696,
            557.5695695999999,
            641.2204672
        ],
        "match": 153
    },
    {
        "content": "or in earlier supersteps. When half of the processors become idle",
        "page_index": 13,
        "bbox": [
            317.955,
            621.2950672,
            558.2001477504001,
            630.2614672
        ],
        "match": 153
    },
    {
        "content": "(they cannot be assigned new nodes), the computation phase is",
        "page_index": 13,
        "bbox": [
            317.686,
            610.3360672,
            558.2003549440001,
            619.3024672
        ],
        "match": 153
    },
    {
        "content": "closed, and a following superstep is started, where all the nodes in",
        "page_index": 13,
        "bbox": [
            317.955,
            599.3770671999999,
            558.2038598400001,
            608.3434672
        ],
        "match": 153
    },
    {
        "content": "ready\ud835\udc4e\ud835\udc59\ud835\udc59 are now available to each processor.",
        "page_index": 13,
        "bbox": [
            317.955,
            585.9260003,
            481.7815168,
            597.3844672
        ],
        "match": 153
    },
    {
        "content": "When selecting a new node to compute for a processor \ud835\udc5d, we",
        "page_index": 13,
        "bbox": [
            327.918,
            577.3783695999999,
            558.206260224,
            586.4254672
        ],
        "match": 154
    },
    {
        "content": "employ the following method (named ChooseNode in our pseu\u2212",
        "page_index": 13,
        "bbox": [
            317.955,
            566.5010672,
            559.713173952,
            575.4674672
        ],
        "match": 154
    },
    {
        "content": "docode). We first attempt to choose from the nodes in ready\ud835\udc5d that",
        "page_index": 13,
        "bbox": [
            317.955,
            553.0490002999999,
            558.2015678016,
            564.5084671999999
        ],
        "match": 154
    },
    {
        "content": "are only available for \ud835\udc5d, and if this is empty, we choose from the set",
        "page_index": 13,
        "bbox": [
            317.955,
            544.1763695999999,
            558.201406272,
            553.2234672
        ],
        "match": 154
    },
    {
        "content": "ready\ud835\udc4e\ud835\udc59\ud835\udc59 available to all processors. From both sets, we use the same",
        "page_index": 13,
        "bbox": [
            317.955,
            530.8060003,
            558.2020056320001,
            542.2644672
        ],
        "match": 154
    },
    {
        "content": "tie\u2212breaking rule that attempts to reduce communication costs, as\u2212",
        "page_index": 13,
        "bbox": [
            317.955,
            522.3390671999999,
            559.7182310016001,
            531.3054672
        ],
        "match": 154
    },
    {
        "content": "signing a score metric for each node \ud835\udc63 in the set, and selecting the",
        "page_index": 13,
        "bbox": [
            317.955,
            511.29936960000003,
            558.1990417664,
            520.3464672
        ],
        "match": 154
    },
    {
        "content": "node with the highest score. For this score, we consider all direct",
        "page_index": 13,
        "bbox": [
            317.955,
            500.42106720000004,
            558.2001477504001,
            509.3874672
        ],
        "match": 154
    },
    {
        "content": "predecessors \ud835\udc62 of \ud835\udc63, and if either \ud835\udc62 or one of its direct successors is",
        "page_index": 13,
        "bbox": [
            317.955,
            489.3813696,
            558.2005107328,
            498.4284672
        ],
        "match": 154
    },
    {
        "content": "already assigned to \ud835\udc5d, then we increase the score of \ud835\udc63 by \ud835\udc50 (\ud835\udc62 )outdeg(\ud835\udc62 ) ,",
        "page_index": 13,
        "bbox": [
            317.955,
            472.0365496,
            559.187964096,
            488.4157003
        ],
        "match": 154
    },
    {
        "content": "where outdeg(\ud835\udc62) is the outdegree of \ud835\udc62. Intuitively, this can be un\u2212",
        "page_index": 13,
        "bbox": [
            317.623,
            462.7221072,
            559.7162213504,
            473.03346719999996
        ],
        "match": 154
    },
    {
        "content": "derstood as an estimator for the importance and probability of the",
        "page_index": 13,
        "bbox": [
            317.955,
            453.1090672,
            558.200004288,
            462.0754672
        ],
        "match": 154
    },
    {
        "content": "fact that we can assign \ud835\udc62 and all its direct successors to \ud835\udc5d, thus",
        "page_index": 13,
        "bbox": [
            317.955,
            442.0693696,
            558.206048768,
            451.1164672
        ],
        "match": 154
    },
    {
        "content": "not having to communicate \ud835\udc62 at all. If \ud835\udc50 (\ud835\udc62) is high, then sending",
        "page_index": 13,
        "bbox": [
            317.955,
            429.8461072,
            558.20088896,
            440.1574672
        ],
        "match": 154
    },
    {
        "content": "\ud835\udc62 results in a higher cost, and thus more important to avoid; if",
        "page_index": 13,
        "bbox": [
            317.417,
            420.1513696,
            558.2020087680002,
            429.1984672
        ],
        "match": 154
    },
    {
        "content": "outdeg(\ud835\udc62) is small, then there is a higher chance that we can in\u2212",
        "page_index": 13,
        "bbox": [
            317.955,
            407.9281072,
            559.714025984,
            418.2394672
        ],
        "match": 154
    },
    {
        "content": "deed achieve this, hence avoiding a communication. As such, this",
        "page_index": 13,
        "bbox": [
            317.955,
            398.3140672,
            558.203456352,
            407.2804672
        ],
        "match": 154
    },
    {
        "content": "simple score metric for \ud835\udc63 aims to estimate our opportunities to save",
        "page_index": 13,
        "bbox": [
            317.955,
            387.2743696,
            558.202699264,
            396.3214672
        ],
        "match": 154
    },
    {
        "content": "communication costs in the future if we assign \ud835\udc63 to \ud835\udc5d.",
        "page_index": 13,
        "bbox": [
            317.955,
            376.3153696,
            513.968608,
            385.36246719999997
        ],
        "match": 154
    },
    {
        "content": "We provide a pseudocode for BSPg in Algorithm 1. Note that \ud835\udc5d",
        "page_index": 13,
        "bbox": [
            327.918,
            363.8948464,
            557.5695695999999,
            374.40346719999997
        ],
        "match": 155
    },
    {
        "content": "always denotes a processor from {1, ..., \ud835\udc43 }. We also note that the",
        "page_index": 13,
        "bbox": [
            317.955,
            353.1331072,
            558.20588352,
            363.44446719999996
        ],
        "match": 155
    },
    {
        "content": "pseudocode uses in\u2212neighbor and out\u2212neighbor as the short form",
        "page_index": 13,
        "bbox": [
            317.955,
            343.5190672,
            558.1981392768,
            352.48546719999996
        ],
        "match": 155
    },
    {
        "content": "of direct predecessor and direct successor, respectively.",
        "page_index": 13,
        "bbox": [
            317.955,
            332.5610672,
            519.1430832000001,
            341.5274672
        ],
        "match": 155
    },
    {
        "content": "The Source heuristic is similar in the sense that it begins process\u2212",
        "page_index": 13,
        "bbox": [
            327.918,
            320.0598464,
            559.714561344,
            330.5684672
        ],
        "match": 158
    },
    {
        "content": "ing the DAG from the source nodes. In each iteration, it essentially",
        "page_index": 13,
        "bbox": [
            317.955,
            310.6430672,
            558.4353902208001,
            319.6094672
        ],
        "match": 158
    },
    {
        "content": "assigns all the current source nodes of the DAG to processors in",
        "page_index": 13,
        "bbox": [
            317.955,
            299.6840672,
            558.204128832,
            308.6504672
        ],
        "match": 158
    },
    {
        "content": "some way to form the next superstep. It then disregards (\u201cremoves\u201d)",
        "page_index": 13,
        "bbox": [
            317.955,
            288.7250672,
            558.7383469440001,
            297.6914672
        ],
        "match": 158
    },
    {
        "content": "these source nodes (and their outgoing edges) from the DAG to",
        "page_index": 13,
        "bbox": [
            317.955,
            277.7660672,
            558.204128832,
            286.7324672
        ],
        "match": 158
    },
    {
        "content": "create the next set of source nodes for the next superstep. In each\nsuperstep, the nodes are assigned to processors following a round\u2212",
        "page_index": 13,
        "bbox": [
            317.955,
            257.96406720000004,
            559.7154065856,
            275.77346719999997
        ],
        "match": 158
    },
    {
        "content": "robin approach. The first superstep is handled in a special way:",
        "page_index": 13,
        "bbox": [
            317.955,
            247.00506719999998,
            559.2558875520001,
            255.9714672
        ],
        "match": 158
    },
    {
        "content": "the initial source nodes are first organized into clusters, joining",
        "page_index": 13,
        "bbox": [
            317.955,
            236.04606719999998,
            558.2041288319999,
            245.0124672
        ],
        "match": 158
    },
    {
        "content": "pairs of nodes when they have a common direct successor, and then",
        "page_index": 13,
        "bbox": [
            317.955,
            225.08806719999998,
            558.202335552,
            234.0544672
        ],
        "match": 158
    },
    {
        "content": "these clusters are assigned to processors in a round\u2212robin way. In",
        "page_index": 13,
        "bbox": [
            317.955,
            214.12906719999998,
            558.2030169984,
            223.0954672
        ],
        "match": 158
    },
    {
        "content": "all other supersteps, no clustering is done; instead, the source nodes",
        "page_index": 13,
        "bbox": [
            317.955,
            203.17006719999998,
            558.2023355519999,
            212.1364672
        ],
        "match": 158
    },
    {
        "content": "are sorted in decreasing order according to their work weight, and",
        "page_index": 13,
        "bbox": [
            317.955,
            192.2110672,
            558.2015196096,
            201.17746720000002
        ],
        "match": 158
    },
    {
        "content": "then assigned to processors in this order in a round\u2212robin fashion, to",
        "page_index": 13,
        "bbox": [
            317.955,
            181.2520672,
            558.202335552,
            190.21846720000002
        ],
        "match": 158
    },
    {
        "content": "avoid accumulating a too large work cost on any of the processors.",
        "page_index": 13,
        "bbox": [
            317.955,
            170.2930672,
            559.5848289024001,
            179.25946720000002
        ],
        "match": 158
    },
    {
        "content": "After the round\u2212robin assignment in each superstep, the heuristic",
        "page_index": 13,
        "bbox": [
            327.918,
            159.3340672,
            558.2007959040001,
            168.3004672
        ],
        "match": 158
    },
    {
        "content": "also considers the direct successors of all the source nodes, and if",
        "page_index": 13,
        "bbox": [
            317.955,
            148.3750672,
            558.200676768,
            157.3414672
        ],
        "match": 159
    },
    {
        "content": "for any of them it holds that all its in\u2212neighbors are already assigned",
        "page_index": 13,
        "bbox": [
            317.955,
            137.4160672,
            558.2023355520001,
            146.3824672
        ],
        "match": 159
    },
    {
        "content": "to the same processor \ud835\udc5d, then it also assigns this node to processor",
        "page_index": 13,
        "bbox": [
            317.955,
            126.37636959999999,
            558.3680728704,
            135.4234672
        ],
        "match": 159
    },
    {
        "content": "\ud835\udc5d in the current superstep. This allows us to avoid creating further",
        "page_index": 13,
        "bbox": [
            317.776,
            115.41836959999999,
            558.3730924672001,
            124.46546719999999
        ],
        "match": 159
    },
    {
        "content": "supersteps unnecessarily, by slightly relaxing the principle that",
        "page_index": 13,
        "bbox": [
            317.955,
            104.54006720000001,
            558.204128832,
            113.5064672
        ],
        "match": 159
    },
    {
        "content": "only the source nodes are assigned in each superstep.",
        "page_index": 13,
        "bbox": [
            317.955,
            93.5810672,
            513.377688,
            102.5474672
        ],
        "match": 158
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 14,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "We show a pseudocode for Source in Algorithm 2.",
        "page_index": 14,
        "bbox": [
            63.761,
            696.7908464,
            249.1590672,
            707.2994672
        ],
        "match": 10
    },
    {
        "content": "Algorithm 2 Summary of the Source heuristic",
        "page_index": 14,
        "bbox": [
            53.467,
            676.9509632,
            228.59774559999997,
            686.4822464
        ],
        "match": 9
    },
    {
        "content": "\ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d \u2190 0",
        "page_index": 14,
        "bbox": [
            62.406,
            663.8831071999999,
            117.267376,
            674.1944672
        ],
        "match": null
    },
    {
        "content": "while there are still unassigned nodes do",
        "page_index": 14,
        "bbox": [
            62.765,
            652.2157616000001,
            215.26463679999998,
            663.2354672
        ],
        "match": 10
    },
    {
        "content": "\ud835\udc60\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc60 \u2190 all unassigned \ud835\udc63 \u2208 \ud835\udc49 with indeg(\ud835\udc63) = 0",
        "page_index": 14,
        "bbox": [
            71.37199999999999,
            641.7409472,
            252.91037600000004,
            652.2764672000001
        ],
        "match": null
    },
    {
        "content": "\ud835\udc5d \u2190 1",
        "page_index": 14,
        "bbox": [
            71.55200000000005,
            631.0061072000001,
            94.90037600000005,
            641.3174672000001
        ],
        "match": 33
    },
    {
        "content": "if \ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d = 1 then",
        "page_index": 14,
        "bbox": [
            71.73100000000005,
            619.3387616000002,
            152.42404480000008,
            630.3584672000002
        ],
        "match": 33
    },
    {
        "content": "for \ud835\udc63 \u2208 \ud835\udc60\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc60 do",
        "page_index": 14,
        "bbox": [
            80.69700000000006,
            608.3807616000003,
            148.89563680000006,
            619.3197696000002
        ],
        "match": 33
    },
    {
        "content": "if \ud835\udc63 shares an out\u2212neighbor with another \ud835\udc62 \u2208 \ud835\udc60\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc60",
        "page_index": 14,
        "bbox": [
            89.664,
            597.4217616000001,
            293.40879680000006,
            608.4414672
        ],
        "match": null
    },
    {
        "content": "then",
        "page_index": 14,
        "bbox": [
            89.66400000000004,
            586.4627616000001,
            108.33204480000005,
            595.4291616000002
        ],
        "match": 5
    },
    {
        "content": "if \ud835\udc62 is already in a cluster thenadd \ud835\udc63 to \ud835\udc62\u2019s cluster",
        "page_index": 14,
        "bbox": [
            98.63000000000004,
            566.5173696000002,
            213.52104480000006,
            586.5234672000001
        ],
        "match": 9
    },
    {
        "content": "elsecombine \ud835\udc63 and \ud835\udc62 into a new cluster",
        "page_index": 14,
        "bbox": [
            98.63000000000005,
            544.5993696000003,
            235.52914880000006,
            562.5521616000003
        ],
        "match": 9
    },
    {
        "content": "end if",
        "page_index": 14,
        "bbox": [
            98.63000000000005,
            531.6677616000004,
            122.20266560000006,
            540.6341616000004
        ],
        "match": 30
    },
    {
        "content": "end if",
        "page_index": 14,
        "bbox": [
            89.66400000000006,
            520.7087616000005,
            113.23666560000005,
            529.6751616000005
        ],
        "match": null
    },
    {
        "content": "end for",
        "page_index": 14,
        "bbox": [
            80.69700000000006,
            509.7497616000004,
            110.16059040000007,
            518.7161616000004
        ],
        "match": 5
    },
    {
        "content": "for all clusters \ud835\udc50 do",
        "page_index": 14,
        "bbox": [
            80.69700000000006,
            498.79176160000037,
            152.60363680000006,
            509.8114672000004
        ],
        "match": 5
    },
    {
        "content": "for all nodes \ud835\udc63 \u2208 \ud835\udc50 do",
        "page_index": 14,
        "bbox": [
            89.66400000000007,
            487.83276160000037,
            169.09263680000007,
            498.8524672000004
        ],
        "match": 19
    },
    {
        "content": "\ud835\udf0b (\ud835\udc63) \u2190 \ud835\udc5d, \ud835\udf0f (\ud835\udc63) \u2190 \ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d",
        "page_index": 14,
        "bbox": [
            98.54100000000007,
            477.5821072000004,
            207.56749920000004,
            487.8934672000004
        ],
        "match": null
    },
    {
        "content": "delete \ud835\udc63 from \ud835\udc3a",
        "page_index": 14,
        "bbox": [
            98.63000000000004,
            467.8873696000004,
            154.2976896,
            476.93446720000037
        ],
        "match": 10
    },
    {
        "content": "end for",
        "page_index": 14,
        "bbox": [
            89.66400000000002,
            454.95576160000036,
            119.12759040000003,
            463.9221616000004
        ],
        "match": 5
    },
    {
        "content": "\ud835\udc5d \u2190 (\ud835\udc5d + 1) modulo \ud835\udc43",
        "page_index": 14,
        "bbox": [
            89.48400000000001,
            444.7051072000004,
            170.6122336,
            455.01646720000036
        ],
        "match": null
    },
    {
        "content": "end for",
        "page_index": 14,
        "bbox": [
            80.697,
            433.03776160000035,
            110.16059040000002,
            442.0041616000004
        ],
        "match": 5
    },
    {
        "content": "elsesort \ud835\udc60\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc60 in decreasing order by \ud835\udc64 (\ud835\udc63)",
        "page_index": 14,
        "bbox": [
            71.73100000000001,
            411.8281072000004,
            228.10881120000002,
            431.04516160000037
        ],
        "match": 29
    },
    {
        "content": "for \ud835\udc63 \u2208 \ud835\udc60\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc60 in order do",
        "page_index": 14,
        "bbox": [
            80.69700000000003,
            400.16076160000034,
            180.3316368,
            411.18046720000035
        ],
        "match": 5
    },
    {
        "content": "\ud835\udf0b (\ud835\udc63) \u2190 \ud835\udc5d, \ud835\udf0f (\ud835\udc63) \u2190 \ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d",
        "page_index": 14,
        "bbox": [
            89.57400000000001,
            389.91110720000034,
            198.6014992,
            400.2224672000003
        ],
        "match": null
    },
    {
        "content": "delete \ud835\udc63 from \ud835\udc3a",
        "page_index": 14,
        "bbox": [
            89.664,
            380.21636960000035,
            145.33168959999998,
            389.2634672000003
        ],
        "match": 10
    },
    {
        "content": "\ud835\udc5d \u2190 (\ud835\udc5d + 1) modulo \ud835\udc43",
        "page_index": 14,
        "bbox": [
            89.48399999999998,
            367.99310720000034,
            170.61223359999997,
            378.3044672000003
        ],
        "match": null
    },
    {
        "content": "end for",
        "page_index": 14,
        "bbox": [
            80.69699999999997,
            356.3257616000003,
            110.16059039999999,
            365.2921616000003
        ],
        "match": 5
    },
    {
        "content": "end if",
        "page_index": 14,
        "bbox": [
            71.73099999999998,
            345.3667616000003,
            95.30366559999997,
            354.3331616000003
        ],
        "match": 30
    },
    {
        "content": "for all edges (\ud835\udc63, \ud835\udc62) \u2208 \ud835\udc38 with \ud835\udc63 \u2208 \ud835\udc60\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc60 do",
        "page_index": 14,
        "bbox": [
            71.73099999999998,
            334.4077616000003,
            227.71863679999996,
            345.4274672000003
        ],
        "match": null
    },
    {
        "content": "if all in\u2212neighbors of \ud835\udc62 are already assigned to \ud835\udf0b (\ud835\udc63) then",
        "page_index": 14,
        "bbox": [
            80.69699999999997,
            323.4487616000003,
            290.1920447999999,
            334.4684672000003
        ],
        "match": 30
    },
    {
        "content": "\ud835\udf0b (\ud835\udc62) \u2190 \ud835\udf0b (\ud835\udc63), \ud835\udf0f (\ud835\udc62) \u2190 \ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d",
        "page_index": 14,
        "bbox": [
            89.57399999999996,
            313.1981072000003,
            211.77749919999994,
            323.5094672000003
        ],
        "match": null
    },
    {
        "content": "end if",
        "page_index": 14,
        "bbox": [
            80.69699999999993,
            301.5307616000003,
            104.26966559999993,
            310.4971616000003
        ],
        "match": null
    },
    {
        "content": "end for",
        "page_index": 14,
        "bbox": [
            71.73099999999994,
            290.5717616000003,
            101.19459039999995,
            299.5381616000003
        ],
        "match": 5
    },
    {
        "content": "\ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d \u2190 \ud835\udc60\ud835\udc62\ud835\udc5d\ud835\udc52\ud835\udc5f\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d + 1",
        "page_index": 14,
        "bbox": [
            71.37199999999994,
            280.3221072000003,
            171.44537599999995,
            290.63346720000027
        ],
        "match": null
    },
    {
        "content": "end while",
        "page_index": 14,
        "bbox": [
            62.76499999999996,
            268.65476160000026,
            102.64754719999998,
            277.6211616000003
        ],
        "match": 10
    },
    {
        "content": "Note that both BSPg and Source only define the computation",
        "page_index": 14,
        "bbox": [
            63.761,
            248.0428464,
            294.048856832,
            258.5514672
        ],
        "match": 5
    },
    {
        "content": "phases of our schedule by assigning nodes to processors and super\u2212",
        "page_index": 14,
        "bbox": [
            53.798,
            238.6260672,
            295.556711936,
            247.59246720000002
        ],
        "match": 5
    },
    {
        "content": "steps; the corresponding communication steps for each communica\u2212",
        "page_index": 14,
        "bbox": [
            53.798,
            227.6670672,
            295.55671193600006,
            236.6334672
        ],
        "match": 5
    },
    {
        "content": "tion phase are derived in the end according to a lazy communication",
        "page_index": 14,
        "bbox": [
            53.798,
            216.7080672,
            294.0453355520001,
            225.6744672
        ],
        "match": 5
    },
    {
        "content": "schedule.",
        "page_index": 14,
        "bbox": [
            53.798,
            205.74906719999998,
            87.5833952,
            214.7154672
        ],
        "match": null
    },
    {
        "content": "The ILPinit initializer is discussed later, together with the re\u2212",
        "page_index": 14,
        "bbox": [
            63.761,
            193.2478464,
            295.5603379072001,
            203.7564672
        ],
        "match": 20
    },
    {
        "content": "maining ILP\u2212based methods.",
        "page_index": 14,
        "bbox": [
            53.798,
            183.83106719999998,
            157.763408,
            192.7974672
        ],
        "match": 10
    },
    {
        "content": "A.3 Local search",
        "page_index": 14,
        "bbox": [
            53.798,
            160.3579979,
            142.01989170000002,
            171.26709789999998
        ],
        "match": 5
    },
    {
        "content": "Our hill climbing methods take an initial solution (BSP schedule)",
        "page_index": 14,
        "bbox": [
            53.798,
            149.1610672,
            294.5807730944,
            158.1274672
        ],
        "match": null
    },
    {
        "content": "provided by one of the initialization methods, and execute small",
        "page_index": 14,
        "bbox": [
            53.798,
            138.2030672,
            294.0471288320001,
            147.1694672
        ],
        "match": 5
    },
    {
        "content": "modifications to this schedule that decrease its total cost, until a",
        "page_index": 14,
        "bbox": [
            53.798,
            127.2440672,
            294.04712883200006,
            136.2104672
        ],
        "match": 5
    },
    {
        "content": "local minimum is reached where none of the modifications lead to",
        "page_index": 14,
        "bbox": [
            53.798,
            116.2850672,
            294.043004288,
            125.2514672
        ],
        "match": 5
    },
    {
        "content": "an improvement (or a predefined time limit is exceeded).",
        "page_index": 14,
        "bbox": [
            53.798,
            105.3260672,
            260.77837760000006,
            114.29246719999999
        ],
        "match": 5
    },
    {
        "content": "As mentioned before, from each current solution, we consider",
        "page_index": 14,
        "bbox": [
            63.761,
            96.48306720000001,
            294.21753783680003,
            105.4494672
        ],
        "match": 11
    },
    {
        "content": "the modification steps which only change the assignment of single",
        "page_index": 14,
        "bbox": [
            53.798,
            85.5240672,
            294.0465908480001,
            94.4904672
        ],
        "match": 11
    },
    {
        "content": "15",
        "page_index": 14,
        "bbox": [
            302.677,
            72.68305240000001,
            309.162634,
            79.6568524
        ],
        "match": 3
    },
    {
        "content": "node \ud835\udc63. In particular, if we currently have \ud835\udf0b (\ud835\udc63) = \ud835\udc5d and \ud835\udf0f (\ud835\udc63) = \ud835\udc60,",
        "page_index": 14,
        "bbox": [
            317.955,
            696.7639472,
            559.1880601600001,
            707.2994672
        ],
        "match": null
    },
    {
        "content": "we consider all the solutions for where we have \ud835\udf0b (\ud835\udc63) \u2208 {1, ..., \ud835\udc43 }",
        "page_index": 14,
        "bbox": [
            317.623,
            686.0291072,
            557.9771904,
            696.3404672
        ],
        "match": null
    },
    {
        "content": "(i.e. \ud835\udc63 on any processor) and \ud835\udf0f (\ud835\udc63) \u2208 {(\ud835\udc60 \u2212 1), \ud835\udc60, (\ud835\udc60 + 1)} (i.e. \ud835\udc63 in the",
        "page_index": 14,
        "bbox": [
            317.686,
            675.0701071999999,
            558.1995718784,
            685.3814672
        ],
        "match": null
    },
    {
        "content": "previous, same, or next superstep), with the assignments for every",
        "page_index": 14,
        "bbox": [
            317.955,
            665.4560672,
            558.4346549760002,
            674.4224672
        ],
        "match": 19
    },
    {
        "content": "other node unchanged.",
        "page_index": 14,
        "bbox": [
            317.955,
            654.4980671999999,
            402.2481264,
            663.4644672
        ],
        "match": 19
    },
    {
        "content": "Our HC method also employs several data structures to ensure",
        "page_index": 14,
        "bbox": [
            327.918,
            641.9968464,
            558.2014430720001,
            652.5054672
        ],
        "match": 5
    },
    {
        "content": "that the cost of a potential modification can be computed efficiently,",
        "page_index": 14,
        "bbox": [
            317.955,
            632.5800671999999,
            559.1864876160001,
            641.5464671999999
        ],
        "match": 5
    },
    {
        "content": "and the same data structures can also be updated efficiently after",
        "page_index": 14,
        "bbox": [
            317.955,
            621.6210672,
            558.373369632,
            630.5874672
        ],
        "match": 5
    },
    {
        "content": "executing a modification. For instance, for each superstep \ud835\udc60, we",
        "page_index": 14,
        "bbox": [
            317.955,
            610.5813695999999,
            558.2040491519999,
            619.6284671999999
        ],
        "match": 5
    },
    {
        "content": "keep the work cost and the communication cost of each processor",
        "page_index": 14,
        "bbox": [
            317.955,
            599.7030672,
            558.373414464,
            608.6694672
        ],
        "match": 5
    },
    {
        "content": "in a sorted set, and for each processor \ud835\udc5d we keep an external pointer",
        "page_index": 14,
        "bbox": [
            317.955,
            588.6633695999999,
            558.3756436479999,
            597.7104671999999
        ],
        "match": 5
    },
    {
        "content": "to the entry describing this processor in the set; this allows for a",
        "page_index": 14,
        "bbox": [
            317.955,
            577.7850672,
            558.204128832,
            586.7514672
        ],
        "match": 5
    },
    {
        "content": "lookup of the maximum in \ud835\udc42 (1) time, and when updating the cost,",
        "page_index": 14,
        "bbox": [
            317.955,
            565.4811072,
            559.187485504,
            575.7924672
        ],
        "match": 5
    },
    {
        "content": "a deletion in amortized \ud835\udc42 (1) and an insertion in logarithmic time.",
        "page_index": 14,
        "bbox": [
            317.955,
            554.5221071999999,
            558.7251088,
            564.8334672
        ],
        "match": 5
    },
    {
        "content": "Furthermore, for each node \ud835\udc63 and processor \ud835\udc5d, we explicitly store",
        "page_index": 14,
        "bbox": [
            327.918,
            544.8283696,
            558.199218624,
            553.8754672
        ],
        "match": 5
    },
    {
        "content": "the first superstep \ud835\udc60 when node \ud835\udc63 is required on processor \ud835\udc5d (due",
        "page_index": 14,
        "bbox": [
            317.955,
            533.8693695999999,
            558.1993842239999,
            542.9164671999999
        ],
        "match": 5
    },
    {
        "content": "to one of \ud835\udc63\u2019s direct successors); due to the lazy communication",
        "page_index": 14,
        "bbox": [
            317.955,
            522.9103696,
            558.203649344,
            531.9574672
        ],
        "match": 5
    },
    {
        "content": "schedule, this implies that \ud835\udc63 will be sent from \ud835\udf0b (\ud835\udc63) to \ud835\udc5d in superstep",
        "page_index": 14,
        "bbox": [
            317.955,
            510.68710719999996,
            558.198960768,
            520.9984671999999
        ],
        "match": 5
    },
    {
        "content": "(\ud835\udc60 \u2212 1) (unless \ud835\udc5d = \ud835\udf0b (\ud835\udc63)). This ensures that whenever we consider",
        "page_index": 14,
        "bbox": [
            318.403,
            499.5039472,
            558.37290128,
            510.0394672
        ],
        "match": null
    },
    {
        "content": "moving \ud835\udc63 to a different processor, we can immediately identify",
        "page_index": 14,
        "bbox": [
            317.955,
            490.0333696,
            558.4376742400001,
            499.0804672
        ],
        "match": 5
    },
    {
        "content": "the communication steps that are affected by this change, and",
        "page_index": 14,
        "bbox": [
            317.955,
            479.1550672,
            558.204128832,
            488.1214672
        ],
        "match": 5
    },
    {
        "content": "hence we can efficiently compute the resulting change in the total",
        "page_index": 14,
        "bbox": [
            317.955,
            468.1960672,
            558.2039046720001,
            477.1624672
        ],
        "match": 5
    },
    {
        "content": "communication cost.",
        "page_index": 14,
        "bbox": [
            317.955,
            457.2370672,
            394.0080048,
            466.2034672
        ],
        "match": 5
    },
    {
        "content": "The list of valid moves in the search space (i.e. modification",
        "page_index": 14,
        "bbox": [
            327.918,
            446.2780672,
            558.198285312,
            455.2444672
        ],
        "match": 9
    },
    {
        "content": "options that still provide a valid BSP schedule) is also computed in",
        "page_index": 14,
        "bbox": [
            317.955,
            435.3190672,
            558.205742784,
            444.28546719999997
        ],
        "match": 9
    },
    {
        "content": "a preprocessing phase, and maintained throughout the algorithm;",
        "page_index": 14,
        "bbox": [
            317.955,
            424.36106720000004,
            558.8376229248001,
            433.3274672
        ],
        "match": 9
    },
    {
        "content": "when a node \ud835\udc63 is moved to another processor and/or superstep, we",
        "page_index": 14,
        "bbox": [
            317.623,
            413.3213696,
            558.1988636608,
            422.3684672
        ],
        "match": 9
    },
    {
        "content": "only need to update the possible move options for \ud835\udc63 and its direct",
        "page_index": 14,
        "bbox": [
            317.955,
            402.3623696,
            558.2020529920001,
            411.4094672
        ],
        "match": 9
    },
    {
        "content": "predecessors/successors.",
        "page_index": 14,
        "bbox": [
            317.955,
            391.4840672,
            407.89695839999996,
            400.4504672
        ],
        "match": null
    },
    {
        "content": "Together, these data structures ensure that in each step of HC,",
        "page_index": 14,
        "bbox": [
            327.918,
            378.9828464,
            559.1880601600001,
            389.4914672
        ],
        "match": 10
    },
    {
        "content": "we simply iterate through the list of valid move options, efficiently",
        "page_index": 14,
        "bbox": [
            317.623,
            369.5660672,
            558.4362588544,
            378.5324672
        ],
        "match": 10
    },
    {
        "content": "check if any of them leads to an improvement, and apply the selected",
        "page_index": 14,
        "bbox": [
            317.955,
            358.6070672,
            558.2023355520001,
            367.5734672
        ],
        "match": 10
    },
    {
        "content": "move option, also updating our data structures efficiently.",
        "page_index": 14,
        "bbox": [
            317.955,
            347.6480672,
            529.2123504000001,
            356.6144672
        ],
        "match": null
    },
    {
        "content": "The communication schedule hill climbing (HCcs) follows a very",
        "page_index": 14,
        "bbox": [
            327.918,
            335.1468464,
            558.4313216639999,
            345.6554672
        ],
        "match": 11
    },
    {
        "content": "similar approach. Note that this settings already considers the as\u2212",
        "page_index": 14,
        "bbox": [
            317.955,
            325.7300672,
            559.7193607680001,
            334.6964672
        ],
        "match": 11
    },
    {
        "content": "signments \ud835\udf0b and \ud835\udf0f to be fixed. For each necessary communication",
        "page_index": 14,
        "bbox": [
            317.955,
            314.69136960000003,
            558.2044972928,
            323.7384672
        ],
        "match": 11
    },
    {
        "content": "step (when \ud835\udc63 needs to be sent from \ud835\udf0b (\ud835\udc63) to \ud835\udc5d), this assignment natu\u2212",
        "page_index": 14,
        "bbox": [
            317.955,
            302.4681072,
            559.7149444480001,
            312.7794672
        ],
        "match": 11
    },
    {
        "content": "rally defines an earliest and latest communication phase when this",
        "page_index": 14,
        "bbox": [
            317.955,
            292.85406720000003,
            558.203590848,
            301.8204672
        ],
        "match": 11
    },
    {
        "content": "transfer can happen: the earliest is \ud835\udf0f (\ud835\udc63), and the latest is (\ud835\udc600 \u2212 1) for",
        "page_index": 14,
        "bbox": [
            317.955,
            280.5501072,
            558.372467392,
            290.8614672
        ],
        "match": 11
    },
    {
        "content": "the first superstep \ud835\udc600 that assigns a direct successor of \ud835\udc63 to processor",
        "page_index": 14,
        "bbox": [
            317.955,
            269.5944546,
            558.370645184,
            279.9024672
        ],
        "match": 11
    },
    {
        "content": "\ud835\udc5d. Our HCcs method considers alternative communication sched\u2212",
        "page_index": 14,
        "bbox": [
            317.776,
            258.4348464,
            559.7157701760001,
            268.9434672
        ],
        "match": 11
    },
    {
        "content": "ules with (\ud835\udc63, \ud835\udf0b (\ud835\udc63), \ud835\udc5d, \ud835\udc60) \u2208 \u0393 for different possible \ud835\udc60 \u2208 [\ud835\udf0f (\ud835\udc63), \ud835\udc600 \u2212 1].",
        "page_index": 14,
        "bbox": [
            317.955,
            247.6731072,
            559.582114944,
            258.0024
        ],
        "match": null
    },
    {
        "content": "As before, in each step, we consider a modification of selecting a",
        "page_index": 14,
        "bbox": [
            317.641,
            238.0590672,
            558.2010835840001,
            247.0254672
        ],
        "match": 11
    },
    {
        "content": "different such \ud835\udc60 for only one of the required communication steps,",
        "page_index": 14,
        "bbox": [
            317.955,
            227.0193696,
            559.1837948864,
            236.0664672
        ],
        "match": 11
    },
    {
        "content": "with the remaining communication steps in \u0393 unchanged. Note that",
        "page_index": 14,
        "bbox": [
            317.623,
            216.14106719999998,
            558.200712704,
            225.12539999999998
        ],
        "match": 11
    },
    {
        "content": "for simplicity, this setting implicitly assumes that the value of \ud835\udc63 is",
        "page_index": 14,
        "bbox": [
            317.955,
            205.1013696,
            558.2017171904,
            214.1484672
        ],
        "match": 11
    },
    {
        "content": "directly sent to \ud835\udc5d from the processor \ud835\udf0b (\ud835\udc63) where it was computed.",
        "page_index": 14,
        "bbox": [
            317.955,
            192.8791072,
            559.5843181312,
            203.1904672
        ],
        "match": 11
    },
    {
        "content": "Similarly to HC, this hill climbing also uses sorted sets and external",
        "page_index": 14,
        "bbox": [
            317.955,
            181.72284639999998,
            558.1984688640001,
            192.2314672
        ],
        "match": 11
    },
    {
        "content": "pointers to efficiently maintain the send cost and receive cost of",
        "page_index": 14,
        "bbox": [
            317.955,
            172.3060672,
            558.2041288320002,
            181.27246720000002
        ],
        "match": 11
    },
    {
        "content": "each processor in every superstep.",
        "page_index": 14,
        "bbox": [
            317.955,
            161.3470672,
            443.7894576,
            170.31346720000002
        ],
        "match": 11
    },
    {
        "content": "For both hill climbing methods, there are two possible variants:",
        "page_index": 14,
        "bbox": [
            327.918,
            150.3880672,
            559.2627225216002,
            159.35446720000002
        ],
        "match": null
    },
    {
        "content": "we either (i) always greedily apply the first modification step that",
        "page_index": 14,
        "bbox": [
            317.623,
            139.4290672,
            558.2027468992,
            148.3954672
        ],
        "match": 23
    },
    {
        "content": "we find which decreases the cost, or (ii) we always consider all the",
        "page_index": 14,
        "bbox": [
            317.623,
            128.4700672,
            558.205813408,
            137.4364672
        ],
        "match": 23
    },
    {
        "content": "possible modifications from the current solution, and select the one",
        "page_index": 14,
        "bbox": [
            317.955,
            117.5110672,
            558.202335552,
            126.47746719999999
        ],
        "match": 23
    },
    {
        "content": "which decreases the cost by the largest amount. Our preliminary",
        "page_index": 14,
        "bbox": [
            317.623,
            106.5520672,
            558.4330309504002,
            115.51846719999999
        ],
        "match": 23
    },
    {
        "content": "experiments have shown that neither of these two approaches is",
        "page_index": 14,
        "bbox": [
            317.955,
            95.59306720000001,
            558.2041288320002,
            104.5594672
        ],
        "match": 23
    },
    {
        "content": "clearly superior to the other in terms of the final schedule found;",
        "page_index": 15,
        "bbox": [
            53.798,
            698.3330672,
            294.6809815808,
            707.2994672
        ],
        "match": 173
    },
    {
        "content": "however, the second method is much more time\u2212consuming, since",
        "page_index": 15,
        "bbox": [
            53.798,
            687.3740672,
            294.04690467200004,
            696.3404672
        ],
        "match": 173
    },
    {
        "content": "there are usually numerous possible modification opportunities to",
        "page_index": 15,
        "bbox": [
            53.798,
            676.4150672,
            294.0460887296,
            685.3814672
        ],
        "match": 173
    },
    {
        "content": "batch of nodes in this ordering as \ud835\udc490, and set \ud835\udc460 to cover the next",
        "page_index": 15,
        "bbox": [
            317.955,
            696.9914546,
            558.204366272,
            707.2994672
        ],
        "match": 179
    },
    {
        "content": "3 supersteps; once again, the number of nodes in each batch is",
        "page_index": 15,
        "bbox": [
            317.955,
            687.3740672,
            558.197566528,
            696.3404672
        ],
        "match": 179
    },
    {
        "content": "increased until |\ud835\udc490| \u00b7 3 \u00b7 \ud835\udc43 2 exceeds a given threshold (2000 in this",
        "page_index": 15,
        "bbox": [
            317.955,
            675.0701071999999,
            558.20145328,
            686.9461546
        ],
        "match": 179
    },
    {
        "content": "analyze from a given solution. Due to this, we have applied the",
        "page_index": 15,
        "bbox": [
            53.798,
            665.4560672,
            294.047128832,
            674.4224672
        ],
        "match": 173
    },
    {
        "content": "case).",
        "page_index": 15,
        "bbox": [
            317.955,
            665.4560672,
            338.03973599999995,
            674.4224672
        ],
        "match": 179
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 15,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": null
    },
    {
        "content": "former, greedy variant of the approach in our experiments.",
        "page_index": 15,
        "bbox": [
            53.798,
            654.4980671999999,
            269.28749120000003,
            663.4644672
        ],
        "match": 173
    },
    {
        "content": "In our experiments, we allow the HC+HCcs methods to run for a",
        "page_index": 15,
        "bbox": [
            63.761,
            641.9968464,
            294.0489817472,
            652.5054672
        ],
        "match": 174
    },
    {
        "content": "time limit of 5 minutes on our main datasets, and for 30 minutes on",
        "page_index": 15,
        "bbox": [
            53.798,
            632.5800671999999,
            294.041131968,
            641.5464671999999
        ],
        "match": 174
    },
    {
        "content": "the huge dataset. Given such a time limit, we always allocate 90%",
        "page_index": 15,
        "bbox": [
            53.798,
            620.0788464,
            294.3318019392,
            630.5874672
        ],
        "match": 174
    },
    {
        "content": "of the allowed time to HC, and the remaining 10% to HCcs.",
        "page_index": 15,
        "bbox": [
            53.798,
            609.1198463999999,
            264.570608,
            619.6284671999999
        ],
        "match": 174
    },
    {
        "content": "A.4 ILP\u2212based methods",
        "page_index": 15,
        "bbox": [
            53.798,
            587.1889978999999,
            175.0308283,
            598.0980979
        ],
        "match": null
    },
    {
        "content": "Our most sophisticated approach is the ILP\u2212based solving of the",
        "page_index": 15,
        "bbox": [
            53.798,
            575.9920672,
            294.04712883199994,
            584.9584672
        ],
        "match": 176
    },
    {
        "content": "scheduling task or some of its subproblems.",
        "page_index": 15,
        "bbox": [
            53.798,
            565.0330672,
            213.4178528000001,
            573.9994672
        ],
        "match": 176
    },
    {
        "content": "The general approach to formulate the scheduling problem as",
        "page_index": 15,
        "bbox": [
            63.761,
            554.0740672,
            294.04128531200007,
            563.0404672
        ],
        "match": 177
    },
    {
        "content": "an ILP has already been outlined in [28]: our model here corre\u2212",
        "page_index": 15,
        "bbox": [
            53.798,
            543.1150672,
            295.561671936,
            552.0814672
        ],
        "match": 177
    },
    {
        "content": "sponds to the submodel called FS by the authors of [28]. In this full",
        "page_index": 15,
        "bbox": [
            53.798,
            532.1560671999999,
            294.041926528,
            541.1224672
        ],
        "match": 177
    },
    {
        "content": "ILP representation, there is a binary variable comp\ud835\udc63,\ud835\udc5d,\ud835\udc60 to indicate",
        "page_index": 15,
        "bbox": [
            53.798,
            519.7900003,
            294.04621760000003,
            530.1634672
        ],
        "match": 177
    },
    {
        "content": "whether node \ud835\udc63 is computed on processor \ud835\udc5d in superstep \ud835\udc60, and a",
        "page_index": 15,
        "bbox": [
            53.467,
            510.1583696,
            294.04223948799995,
            519.2054672
        ],
        "match": 177
    },
    {
        "content": "value pres\ud835\udc63,\ud835\udc5d,\ud835\udc60 to indicate if the value of \ud835\udc63 is already available on",
        "page_index": 15,
        "bbox": [
            53.574,
            497.8730003,
            294.04619685759997,
            508.2464672
        ],
        "match": 177
    },
    {
        "content": "\ud835\udc5d by the end of (the computational phase of) superstep \ud835\udc60. Besides",
        "page_index": 15,
        "bbox": [
            53.619,
            488.2403696,
            294.0474327808,
            497.2874672
        ],
        "match": 177
    },
    {
        "content": "these, the communication steps are represented by binary variables",
        "page_index": 15,
        "bbox": [
            53.798,
            477.3620672,
            294.0453355520001,
            486.3284672
        ],
        "match": 177
    },
    {
        "content": "comm\ud835\udc63,\ud835\udc5d1,\ud835\udc5d2,\ud835\udc60 , indicating whether (\ud835\udc63, \ud835\udc5d1, \ud835\udc5d2, \ud835\udc60) \u2208 \u0393. These variables",
        "page_index": 15,
        "bbox": [
            53.798,
            463.974041,
            294.04547746559996,
            475.3874
        ],
        "match": 177
    },
    {
        "content": "allow a natural way to express both the validity conditions of BSP",
        "page_index": 15,
        "bbox": [
            53.798,
            455.4440672,
            294.046904672,
            464.41046719999997
        ],
        "match": 177
    },
    {
        "content": "model (precedence constraints and valid communication steps) and",
        "page_index": 15,
        "bbox": [
            53.798,
            444.4850672,
            294.045335552,
            453.45146719999997
        ],
        "match": 177
    },
    {
        "content": "the elements of the cost functions with auxiliary variables; see [28]",
        "page_index": 15,
        "bbox": [
            53.798,
            433.5260672,
            294.045197632,
            442.49246719999996
        ],
        "match": 177
    },
    {
        "content": "for details. For our ILPfull method, we implement the representa\u2212",
        "page_index": 15,
        "bbox": [
            53.798,
            421.0248464,
            295.557729984,
            431.53346719999996
        ],
        "match": 177
    },
    {
        "content": "tion above, with only minimal changes: we aggregate some of the",
        "page_index": 15,
        "bbox": [
            53.798,
            411.6080672,
            294.0416324288002,
            420.57446719999996
        ],
        "match": 177
    },
    {
        "content": "(originally separate) linear constraints into a single constraint, and",
        "page_index": 15,
        "bbox": [
            53.529,
            400.6490672,
            294.04824163200004,
            409.61546719999996
        ],
        "match": 177
    },
    {
        "content": "we replace the role of the explicit variables pres\ud835\udc63,\ud835\udc5d,\ud835\udc60 by the unused",
        "page_index": 15,
        "bbox": [
            53.467,
            388.2840003,
            294.0423257216,
            398.6574672
        ],
        "match": 177
    },
    {
        "content": "variables comm\ud835\udc63,\ud835\udc5d,\ud835\udc5d,\ud835\udc60 .",
        "page_index": 15,
        "bbox": [
            53.574,
            377.3250003,
            132.339608,
            387.6984672
        ],
        "match": 177
    },
    {
        "content": "In our ILPcs method to optimize the communication schedule,",
        "page_index": 15,
        "bbox": [
            63.761,
            366.2308464,
            295.032199744,
            376.7394672
        ],
        "match": 178
    },
    {
        "content": "the main idea is similar to that of HCcs: we consider \ud835\udf0b and \ud835\udf0f already",
        "page_index": 15,
        "bbox": [
            53.798,
            355.2718464,
            294.27908671999995,
            365.7804672
        ],
        "match": 178
    },
    {
        "content": "fixed from the initial solution, and only try to optimize the neces\u2212",
        "page_index": 15,
        "bbox": [
            53.798,
            345.8550672,
            295.5589714688,
            354.8214672
        ],
        "match": 178
    },
    {
        "content": "sary communication steps in \u0393. Once again, the assignment defines",
        "page_index": 15,
        "bbox": [
            53.798,
            334.8960672,
            294.04761996800005,
            343.8804
        ],
        "match": 178
    },
    {
        "content": "an earliest superstep \ud835\udf0f (\ud835\udc63) and a latest superstep (\ud835\udc600 \u2212 1) when we",
        "page_index": 15,
        "bbox": [
            53.798,
            322.5921072,
            294.043344,
            332.90346719999997
        ],
        "match": 178
    },
    {
        "content": "can send a value \ud835\udc63 from \ud835\udf0b (\ud835\udc63) to \ud835\udc5d if this is required. Hence for each",
        "page_index": 15,
        "bbox": [
            53.798,
            311.6331072,
            294.04727808,
            321.94446719999996
        ],
        "match": 178
    },
    {
        "content": "\ud835\udc60 \u2208 [\ud835\udf0f (\ud835\udc63), \ud835\udc600 \u2212 1], we define a binary variable comm\ud835\udc63,\ud835\udc5d,\ud835\udc60 to indicate",
        "page_index": 15,
        "bbox": [
            53.44,
            300.61200030000003,
            294.0449857024,
            310.98546719999996
        ],
        "match": 178
    },
    {
        "content": "whether the value is communicated in superstep \ud835\udc60. Note that simi\u2212",
        "page_index": 15,
        "bbox": [
            53.467,
            290.9793696,
            295.56151253760004,
            300.02646719999996
        ],
        "match": 178
    },
    {
        "content": "larly to HCcs, this implicitly assumes that the value of \ud835\udc63 is always",
        "page_index": 15,
        "bbox": [
            53.798,
            278.5598464,
            294.0420508288,
            289.0684672
        ],
        "match": 178
    },
    {
        "content": "sent from \ud835\udf0b (\ud835\udc63). Given these variables, the main techniques in the",
        "page_index": 15,
        "bbox": [
            53.798,
            267.7981072,
            294.041769664,
            278.1094672
        ],
        "match": 178
    },
    {
        "content": "ILPcs formulation are identical to ILPfull: we can use the same",
        "page_index": 15,
        "bbox": [
            53.798,
            256.6418464,
            294.0433117248,
            267.1504672
        ],
        "match": 178
    },
    {
        "content": "approach to ensure with linear constraints that the communication",
        "page_index": 15,
        "bbox": [
            53.798,
            247.22506719999998,
            294.0453355520001,
            256.1914672
        ],
        "match": 178
    },
    {
        "content": "costs are measured properly, and that each communications step is",
        "page_index": 15,
        "bbox": [
            53.798,
            236.26606719999998,
            294.0425559680001,
            245.2324672
        ],
        "match": 178
    },
    {
        "content": "indeed scheduled to some superstep.",
        "page_index": 15,
        "bbox": [
            53.798,
            225.30706719999998,
            187.42425920000005,
            234.2734672
        ],
        "match": 178
    },
    {
        "content": "The ILPpart and ILPinit formulations are similar to each other",
        "page_index": 15,
        "bbox": [
            63.761,
            212.8058464,
            294.210920256,
            223.31446720000002
        ],
        "match": 179
    },
    {
        "content": "in the sense that they both only consider a particular subproblem (a",
        "page_index": 15,
        "bbox": [
            53.798,
            203.3890672,
            294.04533555200004,
            212.35546720000002
        ],
        "match": 179
    },
    {
        "content": "concrete subset of nodes \ud835\udc490 and a concrete interval of supersteps \ud835\udc460),",
        "page_index": 15,
        "bbox": [
            53.798,
            191.0884546,
            295.03070329599996,
            201.39646720000002
        ],
        "match": 179
    },
    {
        "content": "and express this as an ILP. In ILPpart, we begin from a given subset",
        "page_index": 15,
        "bbox": [
            53.798,
            179.9288464,
            294.04212633599997,
            190.43746720000001
        ],
        "match": 179
    },
    {
        "content": "of supersteps \ud835\udc460: we split the BSP supersteps into disjoint intervals",
        "page_index": 15,
        "bbox": [
            53.798,
            169.1714546,
            294.04761264640007,
            179.4784672
        ],
        "match": 179
    },
    {
        "content": "(from back to front), and consider the nodes that are currently",
        "page_index": 15,
        "bbox": [
            53.529,
            159.5540672,
            294.2811438720002,
            168.5204672
        ],
        "match": 179
    },
    {
        "content": "assigned to the supersteps in \ud835\udc460 in order to obtain our \ud835\udc490. We form",
        "page_index": 15,
        "bbox": [
            53.798,
            147.2534546,
            294.0425343104,
            157.5614672
        ],
        "match": 179
    },
    {
        "content": "these intervals iteratively, always growing the current interval until",
        "page_index": 15,
        "bbox": [
            53.798,
            137.63606719999999,
            294.04533555200004,
            146.6024672
        ],
        "match": 179
    },
    {
        "content": "|\ud835\udc490| \u00b7 |\ud835\udc460| \u00b7 \ud835\udc43 2 exceeds 4000; this is because the number of variables",
        "page_index": 15,
        "bbox": [
            54.157,
            125.3321072,
            294.0468284800001,
            137.2081546
        ],
        "match": 179
    },
    {
        "content": "in the ILP representation is in the magnitude of |\ud835\udc490| \u00b7 |\ud835\udc460| \u00b7 \ud835\udc43 2,",
        "page_index": 15,
        "bbox": [
            53.798,
            114.3731072,
            295.03106016,
            126.2491546
        ],
        "match": 179
    },
    {
        "content": "so we use this metric to estimate (and limit) the size of the ILP",
        "page_index": 15,
        "bbox": [
            53.798,
            104.7590672,
            294.04712883200006,
            113.7254672
        ],
        "match": 179
    },
    {
        "content": "problem obtained. In contrast to this, in case of ILPinit, we begin",
        "page_index": 15,
        "bbox": [
            53.798,
            92.25784639999999,
            294.049173888,
            102.7664672
        ],
        "match": 179
    },
    {
        "content": "with a topological ordering of the DAG, and always select the next",
        "page_index": 15,
        "bbox": [
            53.467,
            84.9570672,
            294.0480649600001,
            93.92346719999999
        ],
        "match": 179
    },
    {
        "content": "16",
        "page_index": 15,
        "bbox": [
            302.677,
            72.68305240000001,
            309.162634,
            79.6568524
        ],
        "match": 223
    },
    {
        "content": "Note that given \ud835\udc490 and \ud835\udc460, the ILP formulation for ILPpart",
        "page_index": 15,
        "bbox": [
            327.918,
            652.9558463999999,
            558.2013999999999,
            663.4644672
        ],
        "match": 180
    },
    {
        "content": "and ILPinit are similar, but differ in the fact that in ILPpart, all",
        "page_index": 15,
        "bbox": [
            317.955,
            641.9968464,
            558.1983004800001,
            652.5054672
        ],
        "match": 180
    },
    {
        "content": "the nodes outside of \ud835\udc490 are already assigned to a processor and",
        "page_index": 15,
        "bbox": [
            317.955,
            631.2384546,
            558.20619552,
            641.5464671999999
        ],
        "match": 180
    },
    {
        "content": "superstep, whereas in ILPinit, the successors of the nodes in \ud835\udc490",
        "page_index": 15,
        "bbox": [
            317.955,
            620.0788464,
            557.7038055,
            630.5874672
        ],
        "match": 180
    },
    {
        "content": "are not assigned yet (hence we disregard them for the optimization).",
        "page_index": 15,
        "bbox": [
            317.955,
            610.6620671999999,
            559.5819058560002,
            619.6284671999999
        ],
        "match": 180
    },
    {
        "content": "For the ILP formulation of ILPpart and ILPinit, it is not sur\u2212",
        "page_index": 15,
        "bbox": [
            327.918,
            598.1608464,
            559.719800512,
            608.6694672
        ],
        "match": 181
    },
    {
        "content": "prising that the variables comp\ud835\udc63,\ud835\udc5d,\ud835\udc60 and comm\ud835\udc63,\ud835\udc5d1,\ud835\udc5d2,\ud835\udc60 are restricted",
        "page_index": 15,
        "bbox": [
            317.955,
            586.3150410000001,
            558.2024628224,
            597.7104671999999
        ],
        "match": 181
    },
    {
        "content": "to \ud835\udc63 \u2208 \ud835\udc490 and \ud835\udc60 \u2208 \ud835\udc460. This already ensures that the ILP problem",
        "page_index": 15,
        "bbox": [
            317.955,
            576.4401071999999,
            558.2056668160001,
            586.7514672
        ],
        "match": 181
    },
    {
        "content": "is drastically smaller than ILPfull, since the number of variables",
        "page_index": 15,
        "bbox": [
            317.955,
            565.2838464,
            558.2043003072,
            575.7924672
        ],
        "match": 181
    },
    {
        "content": "only scales with |\ud835\udc490| and |\ud835\udc460|, instead of \ud835\udc5b and the total number of",
        "page_index": 15,
        "bbox": [
            317.955,
            554.5221071999999,
            558.1981196672001,
            564.8334672
        ],
        "match": 181
    },
    {
        "content": "supersteps. However, in these ILPs, there are several further design",
        "page_index": 15,
        "bbox": [
            317.955,
            544.9090672,
            558.2023355520001,
            553.8754672
        ],
        "match": 181
    },
    {
        "content": "decisions that allow us to reduce the number of required variables,",
        "page_index": 15,
        "bbox": [
            317.955,
            533.9500671999999,
            559.1890699392001,
            542.9164671999999
        ],
        "match": 181
    },
    {
        "content": "at the cost of some simple restrictions to the solution space:",
        "page_index": 15,
        "bbox": [
            317.955,
            522.9910672,
            536.4572016000001,
            531.9574672
        ],
        "match": 181
    },
    {
        "content": "\u2022 Some of the nodes \ud835\udc63 \u2208 \ud835\udc490 might have direct successors \ud835\udc62",
        "page_index": 15,
        "bbox": [
            337.144,
            506.7021072,
            557.6594944000001,
            517.0134672
        ],
        "match": 182
    },
    {
        "content": "that are scheduled into supersteps after the interval \ud835\udc460. Let",
        "page_index": 15,
        "bbox": [
            346.582,
            495.7464546,
            558.1986384768,
            506.0544672
        ],
        "match": 182
    },
    {
        "content": "\ud835\udf0b (\ud835\udc62) = \ud835\udc5d1. Then e.g. if we originally had \ud835\udf0b (\ud835\udc63) = \ud835\udc5d1, but",
        "page_index": 15,
        "bbox": [
            346.492,
            484.5599472,
            558.20632544,
            495.0954672
        ],
        "match": 182
    },
    {
        "content": "the ILP solver sets \ud835\udf0b (\ud835\udc63) = \ud835\udc5d2, then this results in a newly",
        "page_index": 15,
        "bbox": [
            346.582,
            473.6009472,
            558.432927232,
            484.13646719999997
        ],
        "match": 182
    },
    {
        "content": "required communication step; on the other hand, if we orig\u2212",
        "page_index": 15,
        "bbox": [
            346.582,
            464.2110672,
            559.7212184320001,
            473.17746719999997
        ],
        "match": 182
    },
    {
        "content": "inally had \ud835\udf0b (\ud835\udc63) = \ud835\udc5d2, but the ILP solver sets \ud835\udf0b (\ud835\udc63) = \ud835\udc5d1, then",
        "page_index": 15,
        "bbox": [
            346.582,
            451.6829472,
            558.201014656,
            462.21846719999996
        ],
        "match": 182
    },
    {
        "content": "a previous communication step becomes unnecessary. Note",
        "page_index": 15,
        "bbox": [
            346.582,
            442.2930672,
            558.2010549760001,
            451.25946719999996
        ],
        "match": 182
    },
    {
        "content": "that these communication steps might either be within the",
        "page_index": 15,
        "bbox": [
            346.582,
            431.3340672,
            558.2001583360001,
            440.30046719999996
        ],
        "match": 182
    },
    {
        "content": "superstep interval \ud835\udc460, or after \ud835\udc460. In order to ensure that",
        "page_index": 15,
        "bbox": [
            346.582,
            419.0344546,
            558.200254976,
            429.3424672
        ],
        "match": 182
    },
    {
        "content": "our superstep formulation only scales with |\ud835\udc460| (instead",
        "page_index": 15,
        "bbox": [
            346.582,
            408.0721072,
            558.2022642559999,
            418.3834672
        ],
        "match": 182
    },
    {
        "content": "of also optimizing communications in supersteps after \ud835\udc460),",
        "page_index": 15,
        "bbox": [
            346.582,
            397.1164546,
            559.188372224,
            407.4244672
        ],
        "match": 182
    },
    {
        "content": "we choose to ignore the case when \ud835\udc63 was originally com\u2212",
        "page_index": 15,
        "bbox": [
            346.25,
            387.4183696,
            559.714457088,
            396.4654672
        ],
        "match": 182
    },
    {
        "content": "municated after \ud835\udc460: in this case, reassigning \ud835\udc63 might make",
        "page_index": 15,
        "bbox": [
            346.582,
            375.1984546,
            558.1980343680001,
            385.5064672
        ],
        "match": 182
    },
    {
        "content": "this communication step unnecessary, and hence reduce",
        "page_index": 15,
        "bbox": [
            346.582,
            365.5810672,
            558.205000192,
            374.54746719999997
        ],
        "match": 182
    },
    {
        "content": "the cost of an \u210e\u2212relation after \ud835\udc460, but we ignore this poten\u2212",
        "page_index": 15,
        "bbox": [
            346.582,
            353.2804546,
            559.719679488,
            363.58846719999997
        ],
        "match": 182
    },
    {
        "content": "tial further gain in the ILP objective. On the other hand,",
        "page_index": 15,
        "bbox": [
            346.582,
            343.6630672,
            559.1835930880001,
            352.62946719999997
        ],
        "match": 182
    },
    {
        "content": "whenever \ud835\udc63 is sent within \ud835\udc460, this is easily captured by our",
        "page_index": 15,
        "bbox": [
            346.25,
            331.3624546,
            558.3681980032,
            341.67046719999996
        ],
        "match": 182
    },
    {
        "content": "formulation via the variables comm\ud835\udc63,\ud835\udc5d,\ud835\udc5d \u2032,\ud835\udc60 . In particular, in",
        "page_index": 15,
        "bbox": [
            346.582,
            320.2520003,
            558.2044175743999,
            330.71146719999996
        ],
        "match": 182
    },
    {
        "content": "the last communication phase of \ud835\udc460, we only include the",
        "page_index": 15,
        "bbox": [
            346.582,
            309.4454546,
            558.20617536,
            319.75246719999996
        ],
        "match": 182
    },
    {
        "content": "variables comm\ud835\udc63,\ud835\udc5d,\ud835\udc5d \u2032,\ud835\udc60 for processors \ud835\udc5d\u2032 that require the",
        "page_index": 15,
        "bbox": [
            346.358,
            298.3340003,
            558.198935488,
            309.2672496
        ],
        "match": 182
    },
    {
        "content": "value of \ud835\udc63 after \ud835\udc460, but for these processors, we also add",
        "page_index": 15,
        "bbox": [
            346.358,
            287.5274546,
            558.197507456,
            297.8354672
        ],
        "match": 182
    },
    {
        "content": "the constraint that \ud835\udc63 indeed needs to be present on proces\u2212",
        "page_index": 15,
        "bbox": [
            346.582,
            277.8293696,
            559.7194235904001,
            286.8764672
        ],
        "match": 182
    },
    {
        "content": "sor \ud835\udc5d\u2032 by the end of \ud835\udc460. This ensures that our ILP indeed",
        "page_index": 15,
        "bbox": [
            346.582,
            265.6094546,
            558.200287552,
            276.3912496
        ],
        "match": 182
    },
    {
        "content": "captures the fact that the reassignment comes with newly",
        "page_index": 15,
        "bbox": [
            346.582,
            255.99206719999998,
            558.4325674240001,
            264.9584672
        ],
        "match": 182
    },
    {
        "content": "required communication steps; however, it limits our flex\u2212",
        "page_index": 15,
        "bbox": [
            346.582,
            245.03306719999998,
            559.7156592640001,
            253.9994672
        ],
        "match": 182
    },
    {
        "content": "ibility by requiring that these new communication steps",
        "page_index": 15,
        "bbox": [
            346.582,
            234.0740672,
            558.205000192,
            243.04046720000002
        ],
        "match": 182
    },
    {
        "content": "need to happen until the end of \ud835\udc460.",
        "page_index": 15,
        "bbox": [
            346.582,
            221.7734546,
            473.9556079999999,
            232.08146720000002
        ],
        "match": 182
    },
    {
        "content": "\u2022 Some of the nodes \ud835\udc63 \u2208 \ud835\udc490 might also have direct prede\u2212",
        "page_index": 15,
        "bbox": [
            337.14399999999995,
            203.8371072,
            559.7142986880001,
            214.1484672
        ],
        "match": 182
    },
    {
        "content": "cessors \ud835\udc62 which are scheduled into supersteps before \ud835\udc460.",
        "page_index": 15,
        "bbox": [
            346.582,
            192.8824546,
            559.5830601600001,
            203.1904672
        ],
        "match": 182
    },
    {
        "content": "Similarly to the case of successors, if \ud835\udc63 is rescheduled to a",
        "page_index": 15,
        "bbox": [
            346.582,
            183.1843696,
            558.2034625279999,
            192.2314672
        ],
        "match": 182
    },
    {
        "content": "different processor, then this might result in newly required",
        "page_index": 15,
        "bbox": [
            346.582,
            172.3060672,
            558.2010549760001,
            181.27246720000002
        ],
        "match": 182
    },
    {
        "content": "communication steps or previous communication steps",
        "page_index": 15,
        "bbox": [
            346.582,
            161.3470672,
            558.205000192,
            170.31346720000002
        ],
        "match": 182
    },
    {
        "content": "becoming unnecessary. As before, the ignore the poten\u2212",
        "page_index": 15,
        "bbox": [
            346.582,
            150.3880672,
            559.7140453120002,
            159.35446720000002
        ],
        "match": 182
    },
    {
        "content": "tial gains from removable communication steps that were",
        "page_index": 15,
        "bbox": [
            346.582,
            139.4290672,
            558.201772288,
            148.3954672
        ],
        "match": 182
    },
    {
        "content": "scheduled before \ud835\udc460, in order to ensure that our ILP size",
        "page_index": 15,
        "bbox": [
            346.582,
            127.1284546,
            558.2024375679999,
            137.4364672
        ],
        "match": 182
    },
    {
        "content": "only scales with |\ud835\udc460|. Within \ud835\udc460, these communication steps",
        "page_index": 15,
        "bbox": [
            346.582,
            116.1661072,
            558.205381248,
            126.47746719999999
        ],
        "match": 182
    },
    {
        "content": "can once again be captured with variables comm\ud835\udc62,\ud835\udc5d1,\ud835\udc5d2,\ud835\udc60",
        "page_index": 15,
        "bbox": [
            346.582,
            104.12404099999999,
            557.1728016,
            115.51846719999999
        ],
        "match": 182
    },
    {
        "content": "as before; however, we also need to add such variables for",
        "page_index": 15,
        "bbox": [
            346.582,
            95.59306720000001,
            558.3737209408001,
            104.5594672
        ],
        "match": 182
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 16,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "the communication phase of the last superstep before \ud835\udc460.",
        "page_index": 16,
        "bbox": [
            82.425,
            696.9914546,
            295.42606015999996,
            707.2994672
        ],
        "match": 5
    },
    {
        "content": "Furthermore, note that the number of such predecessors",
        "page_index": 16,
        "bbox": [
            82.425,
            687.3740672,
            294.048000192,
            696.3404672
        ],
        "match": 5
    },
    {
        "content": "\ud835\udc62 can potentially be even larger than |\ud835\udc490|, hence if we add",
        "page_index": 16,
        "bbox": [
            81.887,
            675.0701071999999,
            294.0426384,
            685.3814672
        ],
        "match": null
    },
    {
        "content": "these variables without consideration, they could notably",
        "page_index": 16,
        "bbox": [
            82.425,
            665.4560672,
            294.27350515200004,
            674.4224672
        ],
        "match": 5
    },
    {
        "content": "simple variant of this multilevel scheduling approach for the case",
        "page_index": 16,
        "bbox": [
            317.955,
            698.3330672,
            558.2034563520001,
            707.2994672
        ],
        "match": 5
    },
    {
        "content": "when a scheduling problem is dominated by very high communica\u2212",
        "page_index": 16,
        "bbox": [
            317.623,
            687.3740672,
            559.7156206720001,
            696.3404672
        ],
        "match": 5
    },
    {
        "content": "tion costs, since our other methods often fail to find high\u2212quality",
        "page_index": 16,
        "bbox": [
            317.955,
            676.4150672,
            558.4371476352001,
            685.3814672
        ],
        "match": 5
    },
    {
        "content": "solutions in this case.",
        "page_index": 16,
        "bbox": [
            317.955,
            665.4560672,
            396.15994079999996,
            674.4224672
        ],
        "match": 5
    },
    {
        "content": "increase the size of the ILP. To avoid this problem in prac\u2212",
        "page_index": 16,
        "bbox": [
            82.425,
            654.4980671999999,
            295.5626403456,
            663.4644672
        ],
        "match": 5
    },
    {
        "content": "In the first phase of the multilevel algorithm, our goal is to grad\u2212",
        "page_index": 16,
        "bbox": [
            327.918,
            654.4980671999999,
            559.72095936,
            663.4644672
        ],
        "match": 13
    },
    {
        "content": "tice, we apply two simplifications. On the one hand, note",
        "page_index": 16,
        "bbox": [
            82.425,
            643.5390672,
            294.0456599616,
            652.5054672
        ],
        "match": 5
    },
    {
        "content": "ually coarsen the DAG into a significantly smaller representation",
        "page_index": 16,
        "bbox": [
            317.955,
            643.5390672,
            558.203321856,
            652.5054672
        ],
        "match": 13
    },
    {
        "content": "that \u0393 might ensure that the value of predecessor \ud835\udc62 is al\u2212",
        "page_index": 16,
        "bbox": [
            82.425,
            632.4993695999999,
            295.564435904,
            641.5644
        ],
        "match": 5
    },
    {
        "content": "that captures most of the structure of the original DAG. For this,",
        "page_index": 16,
        "bbox": [
            317.955,
            632.5800671999999,
            559.1918674560002,
            641.5464671999999
        ],
        "match": 13
    },
    {
        "content": "ready communicated to several processors \ud835\udc5d0 before \ud835\udc460;",
        "page_index": 16,
        "bbox": [
            82.425,
            620.2794546,
            294.681391808,
            630.5874672
        ],
        "match": 5
    },
    {
        "content": "since \ud835\udc62 is always present on these processors throughout",
        "page_index": 16,
        "bbox": [
            82.425,
            610.5813695999999,
            294.04054842880004,
            619.6284671999999
        ],
        "match": 5
    },
    {
        "content": "\ud835\udc460, we do not the add the variables comm\ud835\udc62,\ud835\udc5d1,\ud835\udc5d0,\ud835\udc60 in this",
        "page_index": 16,
        "bbox": [
            82.156,
            597.274041,
            294.047867648,
            608.6694672
        ],
        "match": 5
    },
    {
        "content": "case, and we also disregard the precedence constraint (\ud835\udc62, \ud835\udc63)",
        "page_index": 16,
        "bbox": [
            82.425,
            587.3991071999999,
            293.5968112,
            597.7104671999999
        ],
        "match": 5
    },
    {
        "content": "for comp\ud835\udc63,\ud835\udc5d0,\ud835\udc60 (since they are satisfied anyway). On the",
        "page_index": 16,
        "bbox": [
            82.425,
            575.356041,
            294.04342111999995,
            586.7514672
        ],
        "match": 5
    },
    {
        "content": "other hand, as before, we assume that the value of \ud835\udc62 is di\u2212",
        "page_index": 16,
        "bbox": [
            82.425,
            566.7453696,
            295.5608816512,
            575.7924672
        ],
        "match": 5
    },
    {
        "content": "rectly sent from \ud835\udf0b (\ud835\udc62) (which is fixed, since \ud835\udc62 is computed",
        "page_index": 16,
        "bbox": [
            82.425,
            554.5221071999999,
            294.0464157056,
            564.8334672
        ],
        "match": 5
    },
    {
        "content": "before \ud835\udc460) to any processor; this removes a factor \ud835\udc43 from",
        "page_index": 16,
        "bbox": [
            82.425,
            543.5674546,
            294.043792704,
            553.8754672
        ],
        "match": 5
    },
    {
        "content": "the number of communication variables for \ud835\udc62. Finally, note",
        "page_index": 16,
        "bbox": [
            82.425,
            533.8693695999999,
            294.04623100799995,
            542.9164671999999
        ],
        "match": 5
    },
    {
        "content": "that there may also be predecessors \ud835\udc62 that have both an",
        "page_index": 16,
        "bbox": [
            82.425,
            522.9103696,
            294.048231488,
            531.9574672
        ],
        "match": 5
    },
    {
        "content": "out\u2212neighbor \ud835\udc63 \u2208 \ud835\udc490 and an out\u2212neighbor \ud835\udc62\u2032 scheduled after",
        "page_index": 16,
        "bbox": [
            82.425,
            510.68710719999996,
            294.21093004799997,
            521.4722495999999
        ],
        "match": 5
    },
    {
        "content": "\ud835\udc460; in this case, if \ud835\udc62 is originally sent to \ud835\udf0b (\ud835\udc62\u2032) during \ud835\udc460,",
        "page_index": 16,
        "bbox": [
            82.156,
            499.7281072,
            295.03106016,
            510.5132496
        ],
        "match": 5
    },
    {
        "content": "then we also need to add the constraint that the value of \ud835\udc62",
        "page_index": 16,
        "bbox": [
            82.425,
            490.0333696,
            293.50249440000005,
            499.0804672
        ],
        "match": 5
    },
    {
        "content": "must still be present on \ud835\udf0b (\ud835\udc62\u2032) by the end of \ud835\udc460 in our ILP",
        "page_index": 16,
        "bbox": [
            82.425,
            477.8101072,
            294.041736064,
            488.5952496
        ],
        "match": 5
    },
    {
        "content": "solution.",
        "page_index": 16,
        "bbox": [
            82.425,
            468.1960672,
            114.1839888,
            477.1624672
        ],
        "match": null
    },
    {
        "content": "\u2022 In our communication schedule \u0393, we may also have com\u2212",
        "page_index": 16,
        "bbox": [
            72.987,
            448.9181072,
            295.56422059519997,
            459.2474
        ],
        "match": 9
    },
    {
        "content": "munication steps (\ud835\udc63, \ud835\udc5d1, \ud835\udc5d2, \ud835\udc60) where \ud835\udc63 was computed before",
        "page_index": 16,
        "bbox": [
            82.425,
            437.9601072,
            294.04570892799995,
            448.27146719999996
        ],
        "match": null
    },
    {
        "content": "\ud835\udc460, it is only required on \ud835\udc5d2 after \ud835\udc460, but our \u0393 still just hap\u2212",
        "page_index": 16,
        "bbox": [
            82.156,
            427.0044546,
            295.556473984,
            437.3304
        ],
        "match": null
    },
    {
        "content": "pens to schedule it during the interval \ud835\udc460, even though \ud835\udc63 has",
        "page_index": 16,
        "bbox": [
            82.425,
            416.04545459999997,
            294.04509472,
            426.35346719999995
        ],
        "match": 9
    },
    {
        "content": "no direct successor in \ud835\udc490. These communication steps have",
        "page_index": 16,
        "bbox": [
            82.425,
            405.0864546,
            294.048833088,
            415.3944672
        ],
        "match": 9
    },
    {
        "content": "no direct connection to the assignment of the nodes \ud835\udc490, but",
        "page_index": 16,
        "bbox": [
            82.425,
            394.1274546,
            294.048155456,
            404.4354672
        ],
        "match": 9
    },
    {
        "content": "they still contribute to the communication costs in one of",
        "page_index": 16,
        "bbox": [
            82.425,
            384.51006720000004,
            294.0438039168,
            393.4764672
        ],
        "match": 9
    },
    {
        "content": "the supersteps of \ud835\udc460. The number of these communication",
        "page_index": 16,
        "bbox": [
            82.425,
            372.2094546,
            294.04120116480004,
            382.5174672
        ],
        "match": 9
    },
    {
        "content": "steps can theoretically be as high as \u0398(\ud835\udc5b); hence if we in\u2212",
        "page_index": 16,
        "bbox": [
            82.425,
            361.2471072,
            295.5573780096,
            371.57640000000004
        ],
        "match": 8
    },
    {
        "content": "clude them as optimizable options in our ILP formulation,",
        "page_index": 16,
        "bbox": [
            82.425,
            351.6330672,
            295.03107628800007,
            360.5994672
        ],
        "match": 9
    },
    {
        "content": "then we may lose the advantage of only scaling with |\ud835\udc490|.",
        "page_index": 16,
        "bbox": [
            82.425,
            339.3291072,
            295.425169728,
            349.6404672
        ],
        "match": 9
    },
    {
        "content": "As such, we consider these communication steps fixed: the",
        "page_index": 16,
        "bbox": [
            82.111,
            329.7150672,
            294.04434522880007,
            338.6814672
        ],
        "match": 9
    },
    {
        "content": "communication costs they incur appear as a pre\u2212computed",
        "page_index": 16,
        "bbox": [
            82.425,
            318.7570672,
            294.04891476480003,
            327.72346719999996
        ],
        "match": 9
    },
    {
        "content": "constant in the send and receive costs of the appropriate",
        "page_index": 16,
        "bbox": [
            82.425,
            307.7980672,
            294.048000192,
            316.76446719999996
        ],
        "match": 9
    },
    {
        "content": "processors in the given supersteps, unaffected by our choice",
        "page_index": 16,
        "bbox": [
            82.425,
            296.83906720000004,
            294.04405497600004,
            305.8054672
        ],
        "match": 9
    },
    {
        "content": "of the assignment for \ud835\udc490.",
        "page_index": 16,
        "bbox": [
            82.425,
            284.5384546,
            172.991608,
            294.8464672
        ],
        "match": 9
    },
    {
        "content": "we repeatedly contract a directed edge of the DAG into a single",
        "page_index": 16,
        "bbox": [
            317.623,
            621.6210672,
            558.2013750400001,
            630.5874672
        ],
        "match": 13
    },
    {
        "content": "node, combining all the incoming and outgoing edges of the two",
        "page_index": 16,
        "bbox": [
            317.955,
            610.6620671999999,
            558.2061462720001,
            619.6284671999999
        ],
        "match": 13
    },
    {
        "content": "nodes. Each such operation reduces the number of nodes by exactly",
        "page_index": 16,
        "bbox": [
            317.955,
            599.7030672,
            558.430799424,
            608.6694672
        ],
        "match": 13
    },
    {
        "content": "one, so a repeated execution of this procedure allows us to obtain a",
        "page_index": 16,
        "bbox": [
            317.955,
            588.7440671999999,
            558.202335552,
            597.7104671999999
        ],
        "match": 13
    },
    {
        "content": "coarsified DAG representation of any desired size.",
        "page_index": 16,
        "bbox": [
            317.955,
            577.7850672,
            500.81576160000003,
            586.7514672
        ],
        "match": 13
    },
    {
        "content": "In order to have a valid schedule that can be interpreted for",
        "page_index": 16,
        "bbox": [
            327.918,
            566.8260672,
            558.372054144,
            575.7924672
        ],
        "match": 24
    },
    {
        "content": "each intermediate step of the coarsening procedure, it is critical to",
        "page_index": 16,
        "bbox": [
            317.955,
            555.8670672,
            558.1977357888001,
            564.8334672
        ],
        "match": 24
    },
    {
        "content": "ensure that our graph indeed remains a DAG after each contraction",
        "page_index": 16,
        "bbox": [
            317.955,
            544.9090672,
            558.202335552,
            553.8754672
        ],
        "match": 24
    },
    {
        "content": "step. We ensure this by only selecting edges to contract in each",
        "page_index": 16,
        "bbox": [
            317.955,
            533.9500671999999,
            558.204128832,
            542.9164671999999
        ],
        "match": 24
    },
    {
        "content": "step that satisfy this property. In particular, an edge (\ud835\udc62, \ud835\udc63) \u2208 \ud835\udc38 can",
        "page_index": 16,
        "bbox": [
            317.955,
            521.6461072,
            558.2016181696,
            531.9574672
        ],
        "match": null
    },
    {
        "content": "be contracted into a single node (without creating a directed cycle)",
        "page_index": 16,
        "bbox": [
            317.955,
            512.0320671999999,
            558.7417900416001,
            520.9984671999999
        ],
        "match": 24
    },
    {
        "content": "if and only if there is no other directed path in the DAG from \ud835\udc62 to \ud835\udc63",
        "page_index": 16,
        "bbox": [
            317.955,
            500.9923696,
            557.4528624,
            510.0394672
        ],
        "match": 24
    },
    {
        "content": "apart from the edge (\ud835\udc62, \ud835\udc63). Note that there are always contractable",
        "page_index": 16,
        "bbox": [
            317.955,
            488.7691072,
            558.200660256,
            499.0804672
        ],
        "match": 24
    },
    {
        "content": "edges in a DAG: e.g. each non\u2212sink node \ud835\udc62 can be contracted with",
        "page_index": 16,
        "bbox": [
            317.955,
            479.0743696,
            558.20206832,
            488.1214672
        ],
        "match": 24
    },
    {
        "content": "its out\u2212neighbor \ud835\udc63 that appears earliest in a topological ordering,",
        "page_index": 16,
        "bbox": [
            317.955,
            468.1153696,
            559.185475328,
            477.1624672
        ],
        "match": 24
    },
    {
        "content": "since there can be no other directed path from \ud835\udc62 to \ud835\udc63.",
        "page_index": 16,
        "bbox": [
            317.955,
            457.1563696,
            512.058608,
            466.2034672
        ],
        "match": 24
    },
    {
        "content": "In our algorithm, we evaluate the contractable edges (\ud835\udc62, \ud835\udc63) based",
        "page_index": 16,
        "bbox": [
            327.918,
            444.9331072,
            558.2002656000001,
            455.2444672
        ],
        "match": 24
    },
    {
        "content": "on two properties: (i) the total work weight \ud835\udc64 (\ud835\udc62) + \ud835\udc64 (\ud835\udc63) that we",
        "page_index": 16,
        "bbox": [
            317.955,
            433.9741072,
            558.2026563200001,
            444.28546719999997
        ],
        "match": 24
    },
    {
        "content": "would obtain after contraction, which should be small to ensure",
        "page_index": 16,
        "bbox": [
            317.623,
            424.36106720000004,
            558.2013750400001,
            433.3274672
        ],
        "match": 24
    },
    {
        "content": "that no large cluster of nodes is forced onto the same processor",
        "page_index": 16,
        "bbox": [
            317.955,
            413.40206720000003,
            558.3687519360001,
            422.3684672
        ],
        "match": 24
    },
    {
        "content": "in the same superstep, and (ii) the communication weight \ud835\udc50 (\ud835\udc62)",
        "page_index": 16,
        "bbox": [
            317.955,
            401.0981072,
            557.7538112,
            411.4094672
        ],
        "match": 24
    },
    {
        "content": "of the source node, which should preferably be large, since the",
        "page_index": 16,
        "bbox": [
            317.955,
            391.4840672,
            558.2041288320002,
            400.4504672
        ],
        "match": 24
    },
    {
        "content": "contraction step implies that the output of \ud835\udc62 will not require a",
        "page_index": 16,
        "bbox": [
            317.955,
            380.4443696,
            558.201834496,
            389.4914672
        ],
        "match": 24
    },
    {
        "content": "communication step to be sent to \ud835\udf0b (\ud835\udc63), at least not due to this",
        "page_index": 16,
        "bbox": [
            317.955,
            368.2211072,
            558.2037925120001,
            378.5324672
        ],
        "match": 24
    },
    {
        "content": "edge. In our implementation, we consider the following simple",
        "page_index": 16,
        "bbox": [
            317.955,
            358.6070672,
            558.204128832,
            367.5734672
        ],
        "match": 24
    },
    {
        "content": "technique: we sort the list of contractable edges in an increasing",
        "page_index": 16,
        "bbox": [
            317.955,
            347.6480672,
            558.204128832,
            356.6144672
        ],
        "match": 24
    },
    {
        "content": "order according to \ud835\udc64 (\ud835\udc62) + \ud835\udc64 (\ud835\udc63), and we always select from the first",
        "page_index": 16,
        "bbox": [
            317.955,
            335.3441072,
            558.200935616,
            345.6554672
        ],
        "match": 24
    },
    {
        "content": "13 of this list to ensure that we do not merge nodes with large work",
        "page_index": 16,
        "bbox": [
            319.151,
            322.4784546,
            558.4356475520002,
            336.37715460000004
        ],
        "match": 24
    },
    {
        "content": "weight. From this first part of the list, we select the edge with the",
        "page_index": 16,
        "bbox": [
            317.623,
            314.6090672,
            558.2007115264003,
            323.5754672
        ],
        "match": 15
    },
    {
        "content": "largest \ud835\udc50 (\ud835\udc62) value.",
        "page_index": 16,
        "bbox": [
            317.955,
            302.3051072,
            384.2521583999999,
            312.6164672
        ],
        "match": null
    },
    {
        "content": "Note that after the contraction step, we sum up both the work",
        "page_index": 16,
        "bbox": [
            327.918,
            292.6910672,
            558.4339581696001,
            301.6574672
        ],
        "match": 24
    },
    {
        "content": "weights and the communication weights of \ud835\udc62 and \ud835\udc63 to obtain the",
        "page_index": 16,
        "bbox": [
            317.623,
            281.6513696,
            558.205368512,
            290.6984672
        ],
        "match": 24
    },
    {
        "content": "As mentioned before, we use the CBC open\u2212source solver [7]",
        "page_index": 16,
        "bbox": [
            63.761,
            270.9360672,
            294.04487916799997,
            279.9024672
        ],
        "match": null
    },
    {
        "content": "weights for the contracted node. This is entirely appropriate for",
        "page_index": 16,
        "bbox": [
            317.623,
            270.7730672,
            558.3751438720001,
            279.7394672
        ],
        "match": 24
    },
    {
        "content": "for solving the ILP problems described above. Since ILPfull tries",
        "page_index": 16,
        "bbox": [
            53.798,
            258.4348464,
            294.04465439999996,
            268.9434672
        ],
        "match": null
    },
    {
        "content": "to solve the entire problem, we allow a larger time limit of 1 hour",
        "page_index": 16,
        "bbox": [
            53.798,
            249.0180672,
            294.21484624,
            257.9844672
        ],
        "match": 13
    },
    {
        "content": "when running this method. ILPcs also looks for a global solution,",
        "page_index": 16,
        "bbox": [
            53.467,
            236.5168464,
            295.03085293439995,
            247.0254672
        ],
        "match": 13
    },
    {
        "content": "but in a much more restricted problem, so we set its time limit to",
        "page_index": 16,
        "bbox": [
            53.798,
            227.10006719999998,
            294.04237664000016,
            236.0664672
        ],
        "match": 13
    },
    {
        "content": "5 minutes, similarly to HC+HCcs. We select an even shorter time",
        "page_index": 16,
        "bbox": [
            53.798,
            214.59884639999999,
            294.040730176,
            225.1074672
        ],
        "match": null
    },
    {
        "content": "limit for ILPpart and ILPinit: 3 minutes for the former, 2 minutes",
        "page_index": 16,
        "bbox": [
            53.798,
            203.63984639999998,
            294.045105664,
            214.1484672
        ],
        "match": 13
    },
    {
        "content": "for the latter (since this is supposed to be an even faster heuristic",
        "page_index": 16,
        "bbox": [
            53.798,
            194.22406719999998,
            294.0463218560001,
            203.1904672
        ],
        "match": 13
    },
    {
        "content": "just for initialization). Even this way, ILPpart and ILPinit still",
        "page_index": 16,
        "bbox": [
            53.798,
            181.72284639999998,
            294.04532064,
            192.2314672
        ],
        "match": 13
    },
    {
        "content": "dominate the running time of the algorithms in our experiments,",
        "page_index": 16,
        "bbox": [
            53.798,
            172.3060672,
            295.0274970752001,
            181.27246720000002
        ],
        "match": 13
    },
    {
        "content": "work weights, since these are summed up on the same processor",
        "page_index": 16,
        "bbox": [
            317.623,
            259.8140672,
            558.37666816,
            268.7804672
        ],
        "match": 24
    },
    {
        "content": "and superstep anyway. For communication weights, this only gives",
        "page_index": 16,
        "bbox": [
            317.955,
            248.85606719999998,
            558.202335552,
            257.8224672
        ],
        "match": 24
    },
    {
        "content": "us an estimate (upper bound) on the actual communication require\u2212",
        "page_index": 16,
        "bbox": [
            317.955,
            237.89706719999998,
            559.7137119360001,
            246.8634672
        ],
        "match": 24
    },
    {
        "content": "ments: if there is an edge (\ud835\udc62, \ud835\udc63) in our coarsened DAG, then from",
        "page_index": 16,
        "bbox": [
            317.955,
            225.5931072,
            558.2025183487999,
            235.9044672
        ],
        "match": 24
    },
    {
        "content": "(possibly many) original nodes contracted into \ud835\udc62, maybe only a few",
        "page_index": 16,
        "bbox": [
            317.686,
            215.89836960000002,
            558.53484224,
            224.94546720000002
        ],
        "match": null
    },
    {
        "content": "had an actual edge to \ud835\udc63. This means that when a scheduling of the",
        "page_index": 16,
        "bbox": [
            317.955,
            204.93936960000002,
            558.2029889920001,
            213.98646720000002
        ],
        "match": 24
    },
    {
        "content": "coarse DAG sends the value of \ud835\udc62 to \ud835\udc63, and computes the cost of this",
        "page_index": 16,
        "bbox": [
            317.955,
            193.98036960000002,
            558.20095136,
            203.02746720000002
        ],
        "match": 24
    },
    {
        "content": "based on summed weights \ud835\udc50 (\ud835\udc62), then this is only an upper bound",
        "page_index": 16,
        "bbox": [
            317.955,
            181.7571072,
            558.204118912,
            192.06846720000001
        ],
        "match": null
    },
    {
        "content": "on the amount of data that actually has to be communicated.",
        "page_index": 16,
        "bbox": [
            317.955,
            172.1430672,
            540.2141232000001,
            181.1094672
        ],
        "match": 24
    },
    {
        "content": "since both of these are iterative methods that are repeatedly applied",
        "page_index": 16,
        "bbox": [
            53.798,
            161.3470672,
            294.045335552,
            170.31346720000002
        ],
        "match": 13
    },
    {
        "content": "In our implementation of this coarsening phase, we find the list of",
        "page_index": 16,
        "bbox": [
            327.918,
            161.1840672,
            558.2007959040001,
            170.1504672
        ],
        "match": 24
    },
    {
        "content": "on many different parts of the DAG or the schedule.",
        "page_index": 16,
        "bbox": [
            53.798,
            150.3880672,
            243.9484448000001,
            159.35446720000002
        ],
        "match": 13
    },
    {
        "content": "A.5 Multilevel approach",
        "page_index": 16,
        "bbox": [
            53.798,
            126.9149979,
            180.4744692,
            137.8240979
        ],
        "match": 12
    },
    {
        "content": "Our most novel algorithmic contribution is perhaps the application",
        "page_index": 16,
        "bbox": [
            53.798,
            115.71806720000001,
            294.045335552,
            124.6844672
        ],
        "match": 12
    },
    {
        "content": "of the multilevel coarsen\u2212solve\u2212refine technique, which is a state\u2212of\u2212",
        "page_index": 16,
        "bbox": [
            53.798,
            104.7590672,
            295.55671193600006,
            113.7254672
        ],
        "match": 12
    },
    {
        "content": "the\u2212art approach in hypergraph partitioning tools [15, 31, 33, 37],\nto the domain of scheduling problems. We develop and analyze a",
        "page_index": 16,
        "bbox": [
            53.798,
            84.9570672,
            295.031116096,
            102.7664672
        ],
        "match": 12
    },
    {
        "content": "all contractable edges in the DAG in the beginning, and we update",
        "page_index": 16,
        "bbox": [
            317.955,
            150.22506719999998,
            558.2015196095999,
            159.1914672
        ],
        "match": 24
    },
    {
        "content": "this list after each contraction step. Note that after contracting",
        "page_index": 16,
        "bbox": [
            317.955,
            139.26706719999999,
            558.2041288320002,
            148.2334672
        ],
        "match": 24
    },
    {
        "content": "(\ud835\udc62, \ud835\udc63), this does not only involve updating the edges incident to \ud835\udc62",
        "page_index": 16,
        "bbox": [
            318.403,
            126.9631072,
            557.6594944000001,
            137.2744672
        ],
        "match": 24
    },
    {
        "content": "and \ud835\udc63: there might be edges arbitrarily far in the DAG that become",
        "page_index": 16,
        "bbox": [
            317.955,
            117.2683696,
            558.202785248,
            126.3154672
        ],
        "match": 24
    },
    {
        "content": "uncontractable after this step. In particular, if there is another edge",
        "page_index": 16,
        "bbox": [
            317.955,
            106.3900672,
            558.202335552,
            115.3564672
        ],
        "match": 24
    },
    {
        "content": "(\ud835\udc62\u2032, \ud835\udc63 \u2032) such that there is a long directed path from \ud835\udc62 to \ud835\udc63 \u2032, and",
        "page_index": 16,
        "bbox": [
            318.403,
            94.0861072,
            558.2012650239999,
            104.8712496
        ],
        "match": null
    },
    {
        "content": "17",
        "page_index": 16,
        "bbox": [
            302.677,
            72.68305240000001,
            309.162634,
            79.6568524
        ],
        "match": 97
    },
    {
        "content": "another one from \ud835\udc62\u2032 to \ud835\udc63, then both edges are contractable originally;",
        "page_index": 17,
        "bbox": [
            53.798,
            698.2523696,
            294.68195385600006,
            707.7732496
        ],
        "match": 190
    },
    {
        "content": "however, after contracting (\ud835\udc62, \ud835\udc63), there will be a directed path from",
        "page_index": 17,
        "bbox": [
            53.798,
            686.0291072,
            294.047985152,
            696.3404672
        ],
        "match": 190
    },
    {
        "content": "\ud835\udc62\u2032 to \ud835\udc63 \u2032 via the contracted node, so this distant edge (\ud835\udc62\u2032, \ud835\udc63 \u2032) loses",
        "page_index": 17,
        "bbox": [
            53.26,
            675.0701071999999,
            294.045175488,
            685.8552496
        ],
        "match": 190
    },
    {
        "content": "its contractability.",
        "page_index": 17,
        "bbox": [
            53.798,
            665.4560672,
            119.59344319999998,
            674.4224672
        ],
        "match": 190
    },
    {
        "content": "In general, we note that in our implementation, each of the con\u2212",
        "page_index": 17,
        "bbox": [
            63.761,
            654.4980671999999,
            295.5597810176001,
            663.4644672
        ],
        "match": 191
    },
    {
        "content": "traction steps are rather time\u2212consuming, due to e.g. the need to",
        "page_index": 17,
        "bbox": [
            53.798,
            643.5390672,
            294.04712883200017,
            652.5054672
        ],
        "match": 191
    },
    {
        "content": "update the edges described above, and because we always iterate",
        "page_index": 17,
        "bbox": [
            53.798,
            632.5800671999999,
            294.04237664000004,
            641.5464671999999
        ],
        "match": 191
    },
    {
        "content": "through the list contractable edges to select the one with highest",
        "page_index": 17,
        "bbox": [
            53.798,
            621.6210672,
            294.0434526080001,
            630.5874672
        ],
        "match": 191
    },
    {
        "content": "\ud835\udc50 (\ud835\udc62); both of these operations can require \ud835\udc42 (|\ud835\udc38|) time for each",
        "page_index": 17,
        "bbox": [
            53.395,
            609.3171071999999,
            294.047936128,
            619.6284671999999
        ],
        "match": 191
    },
    {
        "content": "contraction step. This is not a problem in our work, since our more",
        "page_index": 17,
        "bbox": [
            53.798,
            599.7030672,
            294.0453355520001,
            608.6694672
        ],
        "match": 191
    },
    {
        "content": "complex scheduling methods require significantly more running",
        "page_index": 17,
        "bbox": [
            53.798,
            588.7440671999999,
            294.047128832,
            597.7104671999999
        ],
        "match": 191
    },
    {
        "content": "time anyway. However, it is an interesting question for future work",
        "page_index": 17,
        "bbox": [
            53.798,
            577.7850672,
            294.27379942400006,
            586.7514672
        ],
        "match": 191
    },
    {
        "content": "whether we can develop efficient coarsening techniques with sig\u2212",
        "page_index": 17,
        "bbox": [
            53.467,
            566.8260672,
            295.56123462400006,
            575.7924672
        ],
        "match": 191
    },
    {
        "content": "nificantly smaller time complexity.",
        "page_index": 17,
        "bbox": [
            53.798,
            555.8670672,
            180.68152640000002,
            564.8334672
        ],
        "match": 191
    },
    {
        "content": "Another crucial question regarding the coarsening phase is the",
        "page_index": 17,
        "bbox": [
            63.761,
            544.9090672,
            294.0450512000001,
            553.8754672
        ],
        "match": 192
    },
    {
        "content": "optimal amount of coarsening that provides the best schedule in",
        "page_index": 17,
        "bbox": [
            53.798,
            533.9500671999999,
            294.04712883200006,
            542.9164671999999
        ],
        "match": 192
    },
    {
        "content": "the end. A too coarse DAG might not capture the overall structure",
        "page_index": 17,
        "bbox": [
            53.798,
            522.9910672,
            294.0468598400002,
            531.9574672
        ],
        "match": 192
    },
    {
        "content": "well enough, whereas an insufficient amount of coarsening might",
        "page_index": 17,
        "bbox": [
            53.467,
            512.0320671999999,
            294.0494637184001,
            520.9984671999999
        ],
        "match": 192
    },
    {
        "content": "not provide the advantages of the multilevel approach; in particular,",
        "page_index": 17,
        "bbox": [
            53.798,
            501.0730672,
            295.0294876160001,
            510.0394672
        ],
        "match": 192
    },
    {
        "content": "in our setting, it might not remedy the problem of excessively",
        "page_index": 17,
        "bbox": [
            53.798,
            490.1140672,
            294.27577203200013,
            499.0804672
        ],
        "match": 192
    },
    {
        "content": "high communication costs (i.e. that it is only beneficial to reassign",
        "page_index": 17,
        "bbox": [
            53.798,
            479.1550672,
            294.043004288,
            488.1214672
        ],
        "match": 192
    },
    {
        "content": "larger clusters of nodes simultaneously). This task of finding the",
        "page_index": 17,
        "bbox": [
            53.798,
            468.1960672,
            294.04712883199994,
            477.1624672
        ],
        "match": 192
    },
    {
        "content": "most favorable coarsening ratio is a very challenging and complex",
        "page_index": 17,
        "bbox": [
            53.798,
            457.2370672,
            294.2599015040001,
            466.2034672
        ],
        "match": 192
    },
    {
        "content": "problem on its own; investigating this in detail is far beyond the",
        "page_index": 17,
        "bbox": [
            53.798,
            446.2780672,
            294.04712883199994,
            455.2444672
        ],
        "match": 192
    },
    {
        "content": "scope of our paper. For our preliminary experiments to validate the",
        "page_index": 17,
        "bbox": [
            53.798,
            435.3190672,
            294.04533555200004,
            444.28546719999997
        ],
        "match": 192
    },
    {
        "content": "multilevel approach, we simply select two specific rates: we coarsen",
        "page_index": 17,
        "bbox": [
            53.798,
            424.36106720000004,
            294.0453355520002,
            433.3274672
        ],
        "match": 192
    },
    {
        "content": "the DAG to 30% and 15% of its original size, run the multilevel",
        "page_index": 17,
        "bbox": [
            53.798,
            413.40206720000003,
            294.04467846400007,
            422.3684672
        ],
        "match": 192
    },
    {
        "content": "approach for both of these cases, and out of the two schedules",
        "page_index": 17,
        "bbox": [
            53.798,
            402.44306720000003,
            294.04712883200006,
            411.4094672
        ],
        "match": 192
    },
    {
        "content": "obtained this way, we select the one with lower cost as the final",
        "page_index": 17,
        "bbox": [
            53.798,
            391.4840672,
            294.04712883200006,
            400.4504672
        ],
        "match": 192
    },
    {
        "content": "output of our multilevel scheduler.",
        "page_index": 17,
        "bbox": [
            53.798,
            380.5250672,
            180.26907200000002,
            389.4914672
        ],
        "match": 192
    },
    {
        "content": "We also note that our main question in this coarsening phase",
        "page_index": 17,
        "bbox": [
            63.761,
            369.5660672,
            294.04128531199996,
            378.5324672
        ],
        "match": 193
    },
    {
        "content": "was to obtain a significantly coarsened version of the DAG that",
        "page_index": 17,
        "bbox": [
            53.467,
            358.6070672,
            294.0453750400001,
            367.5734672
        ],
        "match": 193
    },
    {
        "content": "maintains the acyclic property. This general question has been",
        "page_index": 17,
        "bbox": [
            53.798,
            347.6480672,
            294.04712883200017,
            356.6144672
        ],
        "match": 193
    },
    {
        "content": "studied by multiple works in recent years [10, 31], but was mostly",
        "page_index": 17,
        "bbox": [
            53.798,
            336.6890672,
            294.27789271039995,
            345.6554672
        ],
        "match": 193
    },
    {
        "content": "evaluated as a partitioning problem in itself, rather than analyzed as",
        "page_index": 17,
        "bbox": [
            53.798,
            325.7300672,
            294.04533555200015,
            334.6964672
        ],
        "match": 193
    },
    {
        "content": "a tool for scheduling. The work of [27], as mentioned before, is an",
        "page_index": 17,
        "bbox": [
            53.798,
            314.77206720000004,
            294.0450931968,
            323.7384672
        ],
        "match": 193
    },
    {
        "content": "exception to this, which has applied one of these acyclic partitioners",
        "page_index": 17,
        "bbox": [
            53.798,
            303.81306720000003,
            294.0453355520001,
            312.7794672
        ],
        "match": 193
    },
    {
        "content": "to further improve state\u2212of\u2212the\u2212art list schedulers. However, in",
        "page_index": 17,
        "bbox": [
            53.798,
            292.85406720000003,
            294.04712883200017,
            301.8204672
        ],
        "match": 193
    },
    {
        "content": "contrast to our iterative coarsening procedure, this approach applies",
        "page_index": 17,
        "bbox": [
            53.798,
            281.8950672,
            294.0453355520001,
            290.8614672
        ],
        "match": 193
    },
    {
        "content": "a final acyclic partitioning; as such, it offers no straightforward way",
        "page_index": 17,
        "bbox": [
            53.798,
            270.9360672,
            294.273799424,
            279.9024672
        ],
        "match": 193
    },
    {
        "content": "to uncoarsen the DAG gradually, and hence there is no opportunity",
        "page_index": 17,
        "bbox": [
            53.798,
            259.9770672,
            294.27379942399995,
            268.9434672
        ],
        "match": 193
    },
    {
        "content": "to execute further refinement steps in a multilevel fashion in this",
        "page_index": 17,
        "bbox": [
            53.798,
            249.0180672,
            294.04113927680015,
            257.9844672
        ],
        "match": 193
    },
    {
        "content": "case.",
        "page_index": 17,
        "bbox": [
            53.798,
            238.0590672,
            71.12108479999999,
            247.0254672
        ],
        "match": 193
    },
    {
        "content": "The solving phase is the simplest part of the multilevel approach:",
        "page_index": 17,
        "bbox": [
            63.761,
            227.10006719999998,
            295.10703161600014,
            236.0664672
        ],
        "match": 194
    },
    {
        "content": "here we apply the algorithmic pipeline of Figure 3 on the coars\u2212",
        "page_index": 17,
        "bbox": [
            53.798,
            216.14106719999998,
            295.55617395200005,
            225.1074672
        ],
        "match": 194
    },
    {
        "content": "ened DAG. In particular, recall that ILPfull is only applicable on",
        "page_index": 17,
        "bbox": [
            53.798,
            203.63984639999998,
            294.041337568,
            214.1484672
        ],
        "match": 194
    },
    {
        "content": "very small DAGs, and ILPpart is also significantly more useful on",
        "page_index": 17,
        "bbox": [
            53.574,
            192.68184639999998,
            294.0412288064,
            203.1904672
        ],
        "match": 194
    },
    {
        "content": "smaller DAGs; as such, the multilevel approach allows us to also",
        "page_index": 17,
        "bbox": [
            53.798,
            183.26506719999998,
            294.04712883200006,
            192.2314672
        ],
        "match": 194
    },
    {
        "content": "apply these methods more successfully on DAGs that are originally",
        "page_index": 17,
        "bbox": [
            53.798,
            172.3060672,
            294.2737994240001,
            181.27246720000002
        ],
        "match": 194
    },
    {
        "content": "larger.",
        "page_index": 17,
        "bbox": [
            53.798,
            161.3470672,
            76.8685472,
            170.31346720000002
        ],
        "match": 194
    },
    {
        "content": "In the uncoarsening and refinement phase, we gradually undo",
        "page_index": 17,
        "bbox": [
            63.761,
            150.3880672,
            294.040971488,
            159.35446720000002
        ],
        "match": 195
    },
    {
        "content": "the contraction steps in a reverse order, thus moving closer and",
        "page_index": 17,
        "bbox": [
            53.798,
            139.4290672,
            294.04712883200006,
            148.3954672
        ],
        "match": 195
    },
    {
        "content": "closer to our original DAG. Every time after we execute a given",
        "page_index": 17,
        "bbox": [
            53.798,
            128.4700672,
            294.0471288320003,
            137.4364672
        ],
        "match": 195
    },
    {
        "content": "number of uncontraction steps, we refine the current schedule. That",
        "page_index": 17,
        "bbox": [
            53.798,
            115.4308624,
            294.0446856319999,
            126.47746719999999
        ],
        "match": 195
    },
    {
        "content": "is, we first project our current schedule (obtained from the solving",
        "page_index": 17,
        "bbox": [
            53.798,
            106.5520672,
            294.04874278400007,
            115.51846719999999
        ],
        "match": 195
    },
    {
        "content": "phase or the previous refinement step) into our current, slightly",
        "page_index": 17,
        "bbox": [
            53.798,
            95.59306720000001,
            294.27577203200013,
            104.5594672
        ],
        "match": 195
    },
    {
        "content": "18",
        "page_index": 17,
        "bbox": [
            302.677,
            72.68305240000001,
            309.162634,
            79.6568524
        ],
        "match": 231
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 17,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": null
    },
    {
        "content": "more uncoarsened DAG: we assign each node to the same processor\nand same superstep as its contracted counterpart. Note that since",
        "page_index": 17,
        "bbox": [
            317.955,
            689.4900672,
            558.36928992,
            707.2994672
        ],
        "match": 195
    },
    {
        "content": "the contracted graph was still a DAG, this still produces a valid",
        "page_index": 17,
        "bbox": [
            317.955,
            678.5310671999999,
            558.204128832,
            687.4974672
        ],
        "match": 195
    },
    {
        "content": "BSP schedule. However, the newly executed uncontraction steps",
        "page_index": 17,
        "bbox": [
            317.955,
            667.5730672,
            558.204128832,
            676.5394672
        ],
        "match": 195
    },
    {
        "content": "reveal slightly more of the structure of the original DAG, so we",
        "page_index": 17,
        "bbox": [
            317.955,
            656.6140671999999,
            558.2041288320002,
            665.5804671999999
        ],
        "match": 195
    },
    {
        "content": "can now fine\u2212tune our schedule towards this. For this, we execute",
        "page_index": 17,
        "bbox": [
            317.955,
            645.6550672,
            558.2007216000002,
            654.6214672
        ],
        "match": 195
    },
    {
        "content": "several improvement steps with our local search method (HC) to",
        "page_index": 17,
        "bbox": [
            317.955,
            633.1538464,
            558.205164928,
            643.6624672
        ],
        "match": 195
    },
    {
        "content": "obtain a slightly more refined variant of our current schedule on",
        "page_index": 17,
        "bbox": [
            317.955,
            623.7370672,
            558.204128832,
            632.7034672
        ],
        "match": 195
    },
    {
        "content": "this slightly more coarsified version of the DAG.",
        "page_index": 17,
        "bbox": [
            317.955,
            612.7780672,
            494.93380320000006,
            621.7444672
        ],
        "match": 195
    },
    {
        "content": "In our experiments, we choose to refine the schedule after every",
        "page_index": 17,
        "bbox": [
            327.918,
            601.8190672,
            558.4380468480001,
            610.7854672
        ],
        "match": 196
    },
    {
        "content": "5 uncontraction steps, and we run HC for at most 100 steps (or until",
        "page_index": 17,
        "bbox": [
            317.955,
            589.3178464,
            558.200576576,
            599.8264672
        ],
        "match": 196
    },
    {
        "content": "a local minimum is reached). This makes the number of refinement",
        "page_index": 17,
        "bbox": [
            317.955,
            579.9010671999999,
            558.202335552,
            588.8674672
        ],
        "match": 196
    },
    {
        "content": "phases proportional to the number of contraction steps; alterna\u2212",
        "page_index": 17,
        "bbox": [
            317.955,
            568.9420672,
            559.7131739520001,
            577.9084672
        ],
        "match": 196
    },
    {
        "content": "tively, one could also opt to only have a fixed number of refinement",
        "page_index": 17,
        "bbox": [
            317.955,
            557.9830671999999,
            558.2023355520001,
            566.9494672
        ],
        "match": 196
    },
    {
        "content": "phases altogether.",
        "page_index": 17,
        "bbox": [
            317.955,
            547.0250672,
            383.52628319999997,
            555.9914672
        ],
        "match": 196
    },
    {
        "content": "We also note that this uncoarsening phase (and hence the whole",
        "page_index": 17,
        "bbox": [
            327.918,
            536.0660671999999,
            558.2007959040001,
            545.0324671999999
        ],
        "match": 197
    },
    {
        "content": "multilevel approach) can be adapted much more naturally to BSP",
        "page_index": 17,
        "bbox": [
            317.955,
            525.1070672,
            558.203321856,
            534.0734672
        ],
        "match": 197
    },
    {
        "content": "than to classical models: if nodes are assinged to concrete starting",
        "page_index": 17,
        "bbox": [
            317.955,
            514.1480672,
            558.2042364288,
            523.1144672
        ],
        "match": 197
    },
    {
        "content": "times instead of supersteps, then it is not immediately clear how",
        "page_index": 17,
        "bbox": [
            317.955,
            503.1890672,
            558.53337504,
            512.1554672
        ],
        "match": 197
    },
    {
        "content": "a schedule on a coarser DAG should be projected to a slightly",
        "page_index": 17,
        "bbox": [
            317.955,
            492.2300672,
            558.432772032,
            501.1964672
        ],
        "match": 197
    },
    {
        "content": "uncoarsened variant of the same DAG.",
        "page_index": 17,
        "bbox": [
            317.955,
            481.2710672,
            459.3730608,
            490.23746719999997
        ],
        "match": 197
    },
    {
        "content": "Recall that during the refinement steps, we only apply HC, but",
        "page_index": 17,
        "bbox": [
            327.918,
            468.7698464,
            558.198913408,
            479.27846719999997
        ],
        "match": 198
    },
    {
        "content": "not HCcs, since the (partially) coarsened DAG often overestimates",
        "page_index": 17,
        "bbox": [
            317.955,
            457.8108464,
            558.1978930560001,
            468.31946719999996
        ],
        "match": 198
    },
    {
        "content": "the required amount of communications (as it merges the weights",
        "page_index": 17,
        "bbox": [
            317.955,
            448.3940672,
            558.2042364288001,
            457.36046719999996
        ],
        "match": 198
    },
    {
        "content": "\ud835\udc50 (\ud835\udc63) in each cluster). Instead, HCcs and ILPcs are applied separately",
        "page_index": 17,
        "bbox": [
            317.552,
            435.89384640000003,
            558.43065184,
            446.4024672
        ],
        "match": 198
    },
    {
        "content": "on the original DAG after the uncoarsening has been finished.",
        "page_index": 17,
        "bbox": [
            317.955,
            426.4770672,
            545.1366768,
            435.4434672
        ],
        "match": 198
    },
    {
        "content": "Regarding the entire multilevel approach, we note that our im\u2212",
        "page_index": 17,
        "bbox": [
            327.918,
            415.5180672,
            559.7170141440001,
            424.4844672
        ],
        "match": 199
    },
    {
        "content": "plementation is only a preliminary exploration of this idea, and",
        "page_index": 17,
        "bbox": [
            317.955,
            404.5590672,
            558.204128832,
            413.5254672
        ],
        "match": 199
    },
    {
        "content": "each element of this approach can be further improved to obtain a",
        "page_index": 17,
        "bbox": [
            317.955,
            393.6000672,
            558.1977357888001,
            402.5664672
        ],
        "match": 199
    },
    {
        "content": "more advanced version of this algorithm. In particular, analyzing",
        "page_index": 17,
        "bbox": [
            317.955,
            382.6410672,
            558.19937664,
            391.6074672
        ],
        "match": 199
    },
    {
        "content": "more complex DAG contraction methods, or refinement with more",
        "page_index": 17,
        "bbox": [
            317.955,
            371.6820672,
            558.2011968192002,
            380.64846719999997
        ],
        "match": 199
    },
    {
        "content": "advanced algorithms, or clever methods to estimate the optimal",
        "page_index": 17,
        "bbox": [
            317.955,
            360.7230672,
            558.204128832,
            369.68946719999997
        ],
        "match": 199
    },
    {
        "content": "coarsification factor are all promising directions for further im\u2212",
        "page_index": 17,
        "bbox": [
            317.955,
            349.7640672,
            559.713173952,
            358.73046719999996
        ],
        "match": 199
    },
    {
        "content": "provement. We leave it to future work to investigate these more",
        "page_index": 17,
        "bbox": [
            317.955,
            338.8050672,
            558.2041288320002,
            347.77146719999996
        ],
        "match": 199
    },
    {
        "content": "sophisticated variants of the approach.",
        "page_index": 17,
        "bbox": [
            317.955,
            327.8460672,
            459.4716912,
            336.81246719999996
        ],
        "match": 199
    },
    {
        "content": "Finally, as a side note, we point at that the work of [27] also",
        "page_index": 17,
        "bbox": [
            327.918,
            316.8880672,
            558.2016970239999,
            325.8544672
        ],
        "match": 200
    },
    {
        "content": "applies the concept of Communication\u2212to\u2212Computation Ratio (CCR)",
        "page_index": 17,
        "bbox": [
            317.955,
            305.9290672,
            558.738346944,
            314.8954672
        ],
        "match": 200
    },
    {
        "content": "to capture the concept that a scheduling problem is dominated by",
        "page_index": 17,
        "bbox": [
            317.955,
            294.9700672,
            558.4386360576,
            303.9364672
        ],
        "match": 200
    },
    {
        "content": "communication costs, i.e. when our multilevel algorithm seems",
        "page_index": 17,
        "bbox": [
            317.955,
            284.0110672,
            558.2041288320002,
            292.9774672
        ],
        "match": 200
    },
    {
        "content": "superior to other methods. In the work of [27], CCR was simply",
        "page_index": 17,
        "bbox": [
            317.955,
            273.0520672,
            558.4305930879999,
            282.0184672
        ],
        "match": 200
    },
    {
        "content": "defined as the ratio of (cid:205)\ud835\udc63 \u2208\ud835\udc49 \ud835\udc50 (\ud835\udc63) and (cid:205)\ud835\udc63 \u2208\ud835\udc49 \ud835\udc64 (\ud835\udc63). This metric is",
        "page_index": 17,
        "bbox": [
            317.955,
            258.9745496,
            558.19748352,
            271.8659632
        ],
        "match": 200
    },
    {
        "content": "not straightforward to generalize to our model with significantly",
        "page_index": 17,
        "bbox": [
            317.955,
            251.13406719999998,
            558.437075904,
            260.10046719999997
        ],
        "match": 200
    },
    {
        "content": "more parameters: multiplying the numerator with \ud835\udc54 and also the",
        "page_index": 17,
        "bbox": [
            317.955,
            240.09436960000002,
            558.2020465024,
            249.14146720000002
        ],
        "match": 200
    },
    {
        "content": "average NUMA coefficient (cid:205) \ud835\udf06\ud835\udc5d1,\ud835\udc5d2\ud835\udc43 2 is a rather natural extension,",
        "page_index": 17,
        "bbox": [
            317.955,
            222.3460003,
            559.1887913600001,
            239.8668076
        ],
        "match": 200
    },
    {
        "content": "but it is not trivial to include e.g. the effect of the parameter \u2113 in",
        "page_index": 17,
        "bbox": [
            317.955,
            215.1313696,
            558.2014768639999,
            224.1784672
        ],
        "match": 200
    },
    {
        "content": "this formula.",
        "page_index": 17,
        "bbox": [
            317.955,
            204.25306719999998,
            364.69684319999993,
            213.2194672
        ],
        "match": 200
    },
    {
        "content": "B DETAILS ON THE DAG DATABASE",
        "page_index": 17,
        "bbox": [
            317.955,
            180.5799979,
            511.1660701,
            191.4890979
        ],
        "match": 201
    },
    {
        "content": "This section discusses the details on our computational DAG data\u2212",
        "page_index": 17,
        "bbox": [
            317.686,
            169.38406719999998,
            559.7213433088001,
            178.3504672
        ],
        "match": 202
    },
    {
        "content": "base. We note that the database itself (coarse grained instances, fine\u2212",
        "page_index": 17,
        "bbox": [
            317.955,
            158.4250672,
            559.7137119360001,
            167.39146720000002
        ],
        "match": 202
    },
    {
        "content": "grained generator, some examples files and tools) are available at",
        "page_index": 17,
        "bbox": [
            317.955,
            147.4660672,
            558.1981392768001,
            156.43246720000002
        ],
        "match": 202
    },
    {
        "content": "https://github.com/Algebraic\u2212Programming/HyperDAG_DB. The",
        "page_index": 17,
        "bbox": [
            317.955,
            136.5070672,
            558.200676768,
            145.47346720000002
        ],
        "match": 202
    },
    {
        "content": "test set of DAGs used in our experiments are available with the",
        "page_index": 17,
        "bbox": [
            317.955,
            125.5480672,
            558.204128832,
            134.5144672
        ],
        "match": 202
    },
    {
        "content": "remaining supplementary material in [1].",
        "page_index": 17,
        "bbox": [
            317.955,
            114.5890672,
            469.4154287999999,
            123.5554672
        ],
        "match": 202
    },
    {
        "content": "As noted before, the DAGs in our database are stored in a hy\u2212",
        "page_index": 17,
        "bbox": [
            327.918,
            103.6300672,
            559.7164761600001,
            112.59646719999999
        ],
        "match": 203
    },
    {
        "content": "perDAG format, to be in line with the recent works of [29, 31].",
        "page_index": 17,
        "bbox": [
            317.955,
            92.6710672,
            559.5829393280001,
            101.63746719999999
        ],
        "match": 203
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 18,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "However, this difference is only relevant from a theoretical mod\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            698.3330672,
            295.55617395200017,
            707.2994672
        ],
        "match": null
    },
    {
        "content": "elling perspective, to emphasize the fact that even if a node \ud835\udc63 has",
        "page_index": 18,
        "bbox": [
            53.798,
            687.2933696,
            294.044904032,
            696.3404672
        ],
        "match": null
    },
    {
        "content": "multiple out\u2212neighbors on another processor \ud835\udc5d, its output only",
        "page_index": 18,
        "bbox": [
            53.798,
            676.3343696,
            294.28112128,
            685.3814672
        ],
        "match": 8
    },
    {
        "content": "DAG, where indeg(\ud835\udc63) is the indegree of \ud835\udc63: since the operation \ud835\udc63",
        "page_index": 18,
        "bbox": [
            317.955,
            696.9881072,
            557.4528624,
            707.2994672
        ],
        "match": 5
    },
    {
        "content": "represents combining indeg(\ud835\udc63) distinct values, indeg(\ud835\udc63) \u2212 1 is a",
        "page_index": 18,
        "bbox": [
            317.955,
            686.0291072,
            558.205536768,
            696.3404672
        ],
        "match": null
    },
    {
        "content": "reasonable estimation for the workload this requires (consider e.g.",
        "page_index": 18,
        "bbox": [
            317.955,
            676.4150672,
            559.5817713600001,
            685.3814672
        ],
        "match": 5
    },
    {
        "content": "needs to be sent to \ud835\udc5d once; due to this, for partitioning problems, it",
        "page_index": 18,
        "bbox": [
            53.798,
            665.3753696,
            294.04079014399997,
            674.4224672
        ],
        "match": null
    },
    {
        "content": "a summation or a multiplication). The only exception to this is",
        "page_index": 18,
        "bbox": [
            317.955,
            665.4560672,
            558.204128832,
            674.4224672
        ],
        "match": 5
    },
    {
        "content": "is more adequate to represent the output data of \ud835\udc63 as a hyperedge,",
        "page_index": 18,
        "bbox": [
            53.798,
            654.4173695999999,
            295.03527831680003,
            663.4644672
        ],
        "match": 8
    },
    {
        "content": "containing \ud835\udc63 and all its out\u2212neighbors. For our work, this is simply",
        "page_index": 18,
        "bbox": [
            53.798,
            643.4583696,
            294.275021888,
            652.5054672
        ],
        "match": null
    },
    {
        "content": "an alternative representation of the precedence constraints in the",
        "page_index": 18,
        "bbox": [
            53.798,
            632.5800671999999,
            294.0419641856,
            641.5464671999999
        ],
        "match": 8
    },
    {
        "content": "the source nodes of the DAG, where instead of setting \ud835\udc64 (\ud835\udc63) = 0,",
        "page_index": 18,
        "bbox": [
            317.955,
            652.9289471999999,
            559.1880601600001,
            663.4644672
        ],
        "match": 5
    },
    {
        "content": "we still assign a work cost of \ud835\udc64 (\ud835\udc63) = 1: while they correspond to",
        "page_index": 18,
        "bbox": [
            317.623,
            641.9699472,
            558.197329792,
            652.5054672
        ],
        "match": 5
    },
    {
        "content": "inputs of the computation, loading or initializing these values might",
        "page_index": 18,
        "bbox": [
            317.955,
            632.5800671999999,
            558.202335552,
            641.5464671999999
        ],
        "match": 5
    },
    {
        "content": "DAG, and hence it has no effect. In fact, all of our algorithms begin",
        "page_index": 18,
        "bbox": [
            53.798,
            621.6210672,
            294.04533555200015,
            630.5874672
        ],
        "match": null
    },
    {
        "content": "still require some computational resources. As for communication",
        "page_index": 18,
        "bbox": [
            317.955,
            621.6210672,
            558.2030887296,
            630.5874672
        ],
        "match": 5
    },
    {
        "content": "with the simple step of transforming these hyperDAGs back into a",
        "page_index": 18,
        "bbox": [
            53.467,
            610.6620671999999,
            294.04551850240006,
            619.6284671999999
        ],
        "match": 8
    },
    {
        "content": "regular DAG representation.",
        "page_index": 18,
        "bbox": [
            53.798,
            599.7030672,
            157.79927360000002,
            608.6694672
        ],
        "match": 9
    },
    {
        "content": "weights, we uniformly assign a weight of \ud835\udc50 (\ud835\udc63) = 1 to all nodes in",
        "page_index": 18,
        "bbox": [
            317.623,
            609.0929471999999,
            558.2036646399999,
            619.6284671999999
        ],
        "match": 5
    },
    {
        "content": "the coarse\u2212grained DAG. We leave it to potential future work to",
        "page_index": 18,
        "bbox": [
            317.955,
            599.7030672,
            558.204128832,
            608.6694672
        ],
        "match": 5
    },
    {
        "content": "develop a way to assign more accurate weights to the nodes in",
        "page_index": 18,
        "bbox": [
            317.955,
            588.7440671999999,
            558.204128832,
            597.7104671999999
        ],
        "match": 5
    },
    {
        "content": "B.1 Coarse\u2212grained DAGs",
        "page_index": 18,
        "bbox": [
            53.798,
            576.2299979,
            186.31083769999998,
            587.1390979
        ],
        "match": null
    },
    {
        "content": "these extracted DAGs.",
        "page_index": 18,
        "bbox": [
            317.955,
            577.7850672,
            399.05608799999993,
            586.7514672
        ],
        "match": 5
    },
    {
        "content": "In order to obtain the coarse\u2212grained representation of a variety of",
        "page_index": 18,
        "bbox": [
            53.798,
            565.0330672,
            294.0434526080001,
            573.9994672
        ],
        "match": 9
    },
    {
        "content": "computations, we considered the GraphBLAS implementation of",
        "page_index": 18,
        "bbox": [
            53.798,
            554.0740672,
            294.04156966400006,
            563.0404672
        ],
        "match": 9
    },
    {
        "content": "B.2 Fine\u2212grained DAGs",
        "page_index": 18,
        "bbox": [
            317.955,
            554.1129979,
            438.0860092,
            565.0220979000001
        ],
        "match": 13
    },
    {
        "content": "[45], and extended this with a so\u2212called HyperDAG backend. The",
        "page_index": 18,
        "bbox": [
            53.798,
            543.1150672,
            294.04472812800003,
            552.0814672
        ],
        "match": null
    },
    {
        "content": "In order to obtain fine\u2212grained DAG representation of algebraic",
        "page_index": 18,
        "bbox": [
            317.955,
            542.9160671999999,
            558.2041288320002,
            551.8824672
        ],
        "match": 13
    },
    {
        "content": "goal of this backend is to run simultaneously to a regular Graph\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            532.1560671999999,
            295.55617395200005,
            541.1224672
        ],
        "match": 9
    },
    {
        "content": "computations, we have implemented a simple generator tool that",
        "page_index": 18,
        "bbox": [
            317.955,
            531.9570672,
            558.200676768,
            540.9234672
        ],
        "match": 13
    },
    {
        "content": "BLAS algorithm and gather meta\u2212data during this run, which is then",
        "page_index": 18,
        "bbox": [
            53.798,
            521.1970672,
            294.045335552,
            530.1634672
        ],
        "match": null
    },
    {
        "content": "synthetically creates and outputs the computational DAG corre\u2212",
        "page_index": 18,
        "bbox": [
            317.955,
            520.9980671999999,
            559.7131739520001,
            529.9644672
        ],
        "match": 13
    },
    {
        "content": "used to generate the representation of the executed computation.",
        "page_index": 18,
        "bbox": [
            53.798,
            510.2390672,
            295.42678880000005,
            519.2054672
        ],
        "match": 9
    },
    {
        "content": "sponding to a few specific algebraic computations. Each of the four",
        "page_index": 18,
        "bbox": [
            317.955,
            510.03906720000003,
            558.36928992,
            519.0054672
        ],
        "match": 13
    },
    {
        "content": "For this, the backend considers the various operation primitives",
        "page_index": 18,
        "bbox": [
            53.798,
            499.2800672,
            294.0471288320001,
            508.2464672
        ],
        "match": 9
    },
    {
        "content": "computations depend on a square matrix \ud835\udc34. In our experiments,",
        "page_index": 18,
        "bbox": [
            317.955,
            498.9993696,
            559.19134624,
            508.0464672
        ],
        "match": 13
    },
    {
        "content": "that are used as building blocks for the computations in Graph\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            488.3210672,
            295.55617395200005,
            497.2874672
        ],
        "match": 9
    },
    {
        "content": "\ud835\udc34 is always defined by a size \ud835\udc41 (number of rows/columns), and",
        "page_index": 18,
        "bbox": [
            317.686,
            488.0403696,
            558.200675072,
            497.0874672
        ],
        "match": 13
    },
    {
        "content": "BLAS, and ensures that each of these primitives identifies the inputs",
        "page_index": 18,
        "bbox": [
            53.798,
            477.3620672,
            294.04533555200004,
            486.3284672
        ],
        "match": 9
    },
    {
        "content": "a probability parameter \ud835\udc5e, such that each entry in the matrix is",
        "page_index": 18,
        "bbox": [
            317.955,
            477.0823696,
            558.198819008,
            486.12946719999997
        ],
        "match": 13
    },
    {
        "content": "and outputs of the given operation, allowing us to reconstruct the",
        "page_index": 18,
        "bbox": [
            53.798,
            466.4030672,
            294.04708400000004,
            475.3694672
        ],
        "match": 9
    },
    {
        "content": "nonzero independently with probability \ud835\udc5e. To construct computa\u2212",
        "page_index": 18,
        "bbox": [
            317.955,
            466.1233696,
            559.7144118912,
            475.17046719999996
        ],
        "match": 13
    },
    {
        "content": "structure of the computational DAG.",
        "page_index": 18,
        "bbox": [
            53.798,
            455.4440672,
            187.8187808,
            464.41046719999997
        ],
        "match": 9
    },
    {
        "content": "tions from real\u2212world matrices, the generator also has the option",
        "page_index": 18,
        "bbox": [
            317.955,
            455.2450672,
            558.2002912128002,
            464.21146719999996
        ],
        "match": 13
    },
    {
        "content": "This backend automatically allows us to extract the DAG repre\u2212",
        "page_index": 18,
        "bbox": [
            63.761,
            444.4850672,
            295.56117977600013,
            453.45146719999997
        ],
        "match": 5
    },
    {
        "content": "to load input matrices (i.e. nonzero patterns) from a file, but this is",
        "page_index": 18,
        "bbox": [
            317.955,
            444.2860672,
            558.2006140032,
            453.25246719999996
        ],
        "match": 13
    },
    {
        "content": "sentation of a wide variety of algebraic computations implemented",
        "page_index": 18,
        "bbox": [
            53.798,
            433.5260672,
            294.04533555200004,
            442.49246719999996
        ],
        "match": 5
    },
    {
        "content": "not used in our experiments.",
        "page_index": 18,
        "bbox": [
            317.955,
            433.32706720000004,
            422.9874096,
            442.2934672
        ],
        "match": 13
    },
    {
        "content": "in GraphBLAS. This involves common iterative methods for linear",
        "page_index": 18,
        "bbox": [
            53.798,
            422.5670672,
            294.215517824,
            431.53346719999996
        ],
        "match": 5
    },
    {
        "content": "Given this input matrix, our tool artificially creates the fine\u2212",
        "page_index": 18,
        "bbox": [
            327.918,
            422.36806720000004,
            559.7164761600002,
            431.3344672
        ],
        "match": 5
    },
    {
        "content": "solvers (e.g. Conjugate Gradient for positive definite systems, or",
        "page_index": 18,
        "bbox": [
            53.798,
            411.6080672,
            294.21175193600004,
            420.57446719999996
        ],
        "match": null
    },
    {
        "content": "grained computational DAG corresponding to this matrix, with each",
        "page_index": 18,
        "bbox": [
            317.955,
            411.40906720000004,
            558.202335552,
            420.3754672
        ],
        "match": 5
    },
    {
        "content": "BiCGStab for general systems), graph algorithms that are naturally",
        "page_index": 18,
        "bbox": [
            53.798,
            400.6490672,
            294.2816898560001,
            409.61546719999996
        ],
        "match": 5
    },
    {
        "content": "node describing a simple operation with a few nonzero values (e.g.",
        "page_index": 18,
        "bbox": [
            317.955,
            400.45006720000003,
            559.57975392,
            409.4164672
        ],
        "match": 5
    },
    {
        "content": "expressible in an algebraic form (such as \ud835\udc58\u2212hop reachability, con\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            389.6103696,
            295.56180313600004,
            398.6574672
        ],
        "match": 5
    },
    {
        "content": "addition or multiplication of scalars). In particular, the generator",
        "page_index": 18,
        "bbox": [
            317.955,
            389.49106720000003,
            558.3687519360001,
            398.4574672
        ],
        "match": 5
    },
    {
        "content": "nected components, or the PageRank algorithm), classical or more",
        "page_index": 18,
        "bbox": [
            53.798,
            378.7320672,
            294.0430042880001,
            387.6984672
        ],
        "match": 5
    },
    {
        "content": "outputs DAGs corresponding to the following algorithms:",
        "page_index": 18,
        "bbox": [
            317.955,
            378.53206720000003,
            529.2840816000001,
            387.4984672
        ],
        "match": 5
    },
    {
        "content": "advanced methods from machine learning (such as \ud835\udc58\u2212means, label",
        "page_index": 18,
        "bbox": [
            53.798,
            367.6923696,
            294.048268864,
            376.7394672
        ],
        "match": 5
    },
    {
        "content": "propagation or sparse neural network inference), and more. For",
        "page_index": 18,
        "bbox": [
            53.798,
            356.8140672,
            294.21175193600016,
            365.7804672
        ],
        "match": 5
    },
    {
        "content": "more details on the concrete GraphBLAS computations, we refer",
        "page_index": 18,
        "bbox": [
            53.798,
            345.8550672,
            294.2136079808001,
            354.8214672
        ],
        "match": 5
    },
    {
        "content": "the reader to [45]. We note that several of the algorithms above are",
        "page_index": 18,
        "bbox": [
            53.798,
            334.8960672,
            294.0463029760001,
            343.86246719999997
        ],
        "match": 5
    },
    {
        "content": "iterative methods; for these, we extract the corresponding compu\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            323.9370672,
            295.5590432000001,
            332.90346719999997
        ],
        "match": 5
    },
    {
        "content": "tational DAGs both for a predefined small number of iterations (we",
        "page_index": 18,
        "bbox": [
            53.798,
            312.9780672,
            294.0453355520001,
            321.94446719999996
        ],
        "match": 5
    },
    {
        "content": "set this to 3), and for the case when the algorithm is running until",
        "page_index": 18,
        "bbox": [
            53.798,
            302.0190672,
            294.047162528,
            310.98546719999996
        ],
        "match": 5
    },
    {
        "content": "the iterative method converges.",
        "page_index": 18,
        "bbox": [
            53.798,
            291.0600672,
            169.32109760000003,
            300.02646719999996
        ],
        "match": 5
    },
    {
        "content": "We note that while larger containers (matrices, vectors) are easy",
        "page_index": 18,
        "bbox": [
            63.761,
            280.1020672,
            294.28104684800013,
            289.0684672
        ],
        "match": null
    },
    {
        "content": "to track within a GraphBLAS algorithm, some simpler data struc\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            269.1430672,
            295.562360768,
            278.1094672
        ],
        "match": 5
    },
    {
        "content": "tures, such as scalars, are not trivial to track without introducing",
        "page_index": 18,
        "bbox": [
            53.798,
            258.1840672,
            294.04314775040007,
            267.1504672
        ],
        "match": 5
    },
    {
        "content": "extensive changes to the algorithm implementations. Due to this,",
        "page_index": 18,
        "bbox": [
            53.798,
            247.22506719999998,
            295.0324196288001,
            256.1914672
        ],
        "match": 5
    },
    {
        "content": "our extraction from GraphBLAS sometimes provides an incomplete",
        "page_index": 18,
        "bbox": [
            53.798,
            236.26606719999998,
            294.04533555200004,
            245.2324672
        ],
        "match": 5
    },
    {
        "content": "DAG representation, leading to some isolated nodes or smaller iso\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            225.30706719999998,
            295.5635981312001,
            234.2734672
        ],
        "match": 5
    },
    {
        "content": "lated components in the resulting DAG. To obtain the test DAGs",
        "page_index": 18,
        "bbox": [
            53.798,
            214.3480672,
            294.0471288320001,
            223.31446720000002
        ],
        "match": 5
    },
    {
        "content": "for our experiments, we simply consider the largest connected com\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            203.3890672,
            295.556711936,
            212.35546720000002
        ],
        "match": 5
    },
    {
        "content": "ponent in each of the extracted DAGs; while this does not always",
        "page_index": 18,
        "bbox": [
            53.798,
            192.4300672,
            294.04645635200006,
            201.39646720000002
        ],
        "match": 5
    },
    {
        "content": "cover the entire GraphBLAS algorithm in question, it still repre\u2212",
        "page_index": 18,
        "bbox": [
            53.798,
            181.4710672,
            295.55617395200005,
            190.43746720000001
        ],
        "match": 5
    },
    {
        "content": "sents a subDAG that corresponds to a valid (sub)computation, and",
        "page_index": 18,
        "bbox": [
            53.798,
            170.5120672,
            294.0430042880001,
            179.4784672
        ],
        "match": 5
    },
    {
        "content": "anyway captures most of the structure of the whole computation",
        "page_index": 18,
        "bbox": [
            53.798,
            159.5540672,
            294.04632185600013,
            168.5204672
        ],
        "match": 5
    },
    {
        "content": "in the majority of cases.",
        "page_index": 18,
        "bbox": [
            53.798,
            148.5950672,
            141.28316480000004,
            157.5614672
        ],
        "match": 5
    },
    {
        "content": "Note that assigning work weights \ud835\udc64 (\ud835\udc63) and communication",
        "page_index": 18,
        "bbox": [
            63.761,
            136.2911072,
            294.04452736,
            146.6024672
        ],
        "match": 24
    },
    {
        "content": "weights \ud835\udc50 (\ud835\udc63) to the nodes of the extracted DAG is a non\u2212trivial",
        "page_index": 18,
        "bbox": [
            53.467,
            125.3321072,
            294.043348416,
            135.6434672
        ],
        "match": 24
    },
    {
        "content": "task: while the DAG structure of the computation is fixed for an",
        "page_index": 18,
        "bbox": [
            53.798,
            115.71806720000001,
            294.04712883200017,
            124.6844672
        ],
        "match": 24
    },
    {
        "content": "algorithm, the sizes of the matrices and vectors involved can be",
        "page_index": 18,
        "bbox": [
            53.798,
            104.7590672,
            294.04712883200006,
            113.7254672
        ],
        "match": 24
    },
    {
        "content": "arbitrary, based on the inputs in the concrete run. As such, for",
        "page_index": 18,
        "bbox": [
            53.798,
            93.8000672,
            294.21175193600016,
            102.7664672
        ],
        "match": 24
    },
    {
        "content": "simplicity, we assign \ud835\udc64 (\ud835\udc63) = indeg(\ud835\udc63) \u2212 1 to each node \ud835\udc63 of the",
        "page_index": 18,
        "bbox": [
            53.798,
            83.3879472,
            294.043787392,
            93.92346719999999
        ],
        "match": 24
    },
    {
        "content": "\u2022 spmv: multiplication of a sparse matrix \ud835\udc34 with a dense vec\u2212",
        "page_index": 18,
        "bbox": [
            337.144,
            362.0458464,
            559.7177242112,
            372.5544672
        ],
        "match": 5
    },
    {
        "content": "tor \ud835\udc62. An example for this operation is also shown in Figure",
        "page_index": 18,
        "bbox": [
            346.582,
            352.54936960000003,
            558.202625792,
            361.5964672
        ],
        "match": 5
    },
    {
        "content": "2.",
        "page_index": 18,
        "bbox": [
            346.582,
            341.67106720000004,
            352.723984,
            350.6374672
        ],
        "match": 5
    },
    {
        "content": "\u2022 exp: an iterative version of spmv, i.e. given a sparse matrix",
        "page_index": 18,
        "bbox": [
            337.144,
            322.1958464,
            558.4166349440001,
            332.70446719999995
        ],
        "match": 13
    },
    {
        "content": "\ud835\udc34 with a dense vector \ud835\udc62, the naive computation of the vector",
        "page_index": 18,
        "bbox": [
            346.313,
            312.69836960000004,
            558.369209344,
            321.7454672
        ],
        "match": 13
    },
    {
        "content": "\ud835\udc34\ud835\udc58 \u00b7\ud835\udc62, by executing \ud835\udc58 distinct spmv operations. This compu\u2212",
        "page_index": 18,
        "bbox": [
            346.313,
            299.7428464,
            559.72094816,
            311.74970030000003
        ],
        "match": null
    },
    {
        "content": "tation is an important building block of many applications.",
        "page_index": 18,
        "bbox": [
            346.582,
            290.3260672,
            559.5830641407999,
            299.2924672
        ],
        "match": 13
    },
    {
        "content": "\u2022 CG: the well\u2212known conjugate gradient method for finding a",
        "page_index": 18,
        "bbox": [
            337.144,
            270.8508464,
            558.204241536,
            281.3594672
        ],
        "match": null
    },
    {
        "content": "numerical solution to a system of linear equations, executed",
        "page_index": 18,
        "bbox": [
            346.582,
            261.4340672,
            558.2010549760001,
            270.4004672
        ],
        "match": 12
    },
    {
        "content": "for \ud835\udc58 iterations.",
        "page_index": 18,
        "bbox": [
            346.582,
            250.3943696,
            403.19103839999997,
            259.4414672
        ],
        "match": 12
    },
    {
        "content": "\u2022 kNN: in GraphBLAS, this method refers to finding the nodes",
        "page_index": 18,
        "bbox": [
            337.144,
            230.9998464,
            558.205834816,
            241.5084672
        ],
        "match": 12
    },
    {
        "content": "in a graph that are at most \ud835\udc58 hops away from a specific node",
        "page_index": 18,
        "bbox": [
            346.582,
            221.5023696,
            558.2038486399999,
            230.5494672
        ],
        "match": 11
    },
    {
        "content": "(in contrast to machine learning, where \ud835\udc58\u2212NN usually covers",
        "page_index": 18,
        "bbox": [
            346.313,
            210.5443696,
            558.205610304,
            219.5914672
        ],
        "match": 12
    },
    {
        "content": "a different concept). In terms of algebraic computations,",
        "page_index": 18,
        "bbox": [
            346.582,
            199.6660672,
            559.1835930880001,
            208.6324672
        ],
        "match": 12
    },
    {
        "content": "this can be represented as to the multiplication of sparse",
        "page_index": 18,
        "bbox": [
            346.582,
            188.70706719999998,
            558.2050001919999,
            197.6734672
        ],
        "match": 12
    },
    {
        "content": "matrix \ud835\udc34 and a vector \ud835\udc62 with a single non\u2212zero entry, for \ud835\udc58",
        "page_index": 18,
        "bbox": [
            346.582,
            177.6673696,
            557.5246704,
            186.7144672
        ],
        "match": 12
    },
    {
        "content": "iterations.",
        "page_index": 18,
        "bbox": [
            346.582,
            166.78906719999998,
            383.39803839999996,
            175.7554672
        ],
        "match": null
    },
    {
        "content": "Besides \ud835\udc41 and \ud835\udc5e, another defining parameter for the last three",
        "page_index": 18,
        "bbox": [
            317.955,
            151.7643696,
            558.197434752,
            160.8114672
        ],
        "match": 13
    },
    {
        "content": "algorithms is the number of iterations \ud835\udc58.",
        "page_index": 18,
        "bbox": [
            317.955,
            140.8053696,
            465.81460799999996,
            149.8524672
        ],
        "match": 13
    },
    {
        "content": "As before, the work weight is set to 1 for source nodes, and to",
        "page_index": 18,
        "bbox": [
            327.918,
            129.92706719999998,
            558.201199744,
            138.8934672
        ],
        "match": 24
    },
    {
        "content": "the indegree of the node minus 1 for all other nodes; this is indeed",
        "page_index": 18,
        "bbox": [
            317.955,
            118.96806720000001,
            558.2029745024,
            127.9344672
        ],
        "match": 24
    },
    {
        "content": "realistic for our fine\u2212grained DAGs, since e.g. the addition of 4",
        "page_index": 18,
        "bbox": [
            317.955,
            108.0090672,
            558.40776352,
            116.9754672
        ],
        "match": 24
    },
    {
        "content": "scalars indeed requires 3 addition operations. The communication",
        "page_index": 18,
        "bbox": [
            317.955,
            97.0500672,
            558.203126816,
            106.0164672
        ],
        "match": 24
    },
    {
        "content": "weights \ud835\udc50 (\ud835\udc63) are again set to 1 for all nodes.",
        "page_index": 18,
        "bbox": [
            317.623,
            84.7471072,
            477.59235679999995,
            95.0584672
        ],
        "match": 24
    },
    {
        "content": "19",
        "page_index": 18,
        "bbox": [
            302.67699999999996,
            72.68305240000001,
            309.16263399999997,
            79.6568524
        ],
        "match": 15
    },
    {
        "content": "Table 4: Number of times each initialization method is the",
        "page_index": 19,
        "bbox": [
            53.502,
            698.5717616000001,
            294.04379212800006,
            707.5381616000001
        ],
        "match": 226
    },
    {
        "content": "each of the remaining algorithms. We then extend this with 3 coarse\u2212",
        "page_index": 19,
        "bbox": [
            317.955,
            698.3330672,
            559.7168433920001,
            707.2994672
        ],
        "match": 220
    },
    {
        "content": "best, on spmv computations in the training set, separated for",
        "page_index": 19,
        "bbox": [
            53.798,
            687.6127616,
            294.232457728,
            697.08128
        ],
        "match": 226
    },
    {
        "content": "different values of \ud835\udc43.",
        "page_index": 19,
        "bbox": [
            53.798,
            676.6537616,
            137.7188016,
            687.5927696
        ],
        "match": 226
    },
    {
        "content": "grained instances where \ud835\udc5b is in a similar magnitude (one of the",
        "page_index": 19,
        "bbox": [
            317.955,
            687.2933696,
            558.198698816,
            696.3404672
        ],
        "match": 220
    },
    {
        "content": "instances only has \ud835\udc5b = 47023, the other two are within the interval).",
        "page_index": 19,
        "bbox": [
            317.955,
            674.8459472,
            559.584825024,
            685.3814672
        ],
        "match": 220
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 19,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 4 \ud835\udc43 = 8 \ud835\udc43 = 16",
        "page_index": 19,
        "bbox": [
            112.573,
            649.2369471999999,
            234.97875200000001,
            659.7724671999999
        ],
        "match": 227
    },
    {
        "content": "Source: 5",
        "page_index": 19,
        "bbox": [
            104.817,
            631.4558463999999,
            140.2430464,
            641.9644672
        ],
        "match": 225
    },
    {
        "content": "BSPg: 3",
        "page_index": 19,
        "bbox": [
            109.30000000000001,
            620.4968464,
            135.7600464,
            631.0054672
        ],
        "match": 225
    },
    {
        "content": "Source: 7",
        "page_index": 19,
        "bbox": [
            155.088,
            631.4558463999999,
            190.51404639999998,
            641.9644672
        ],
        "match": 225
    },
    {
        "content": "BSPg: 2",
        "page_index": 19,
        "bbox": [
            159.571,
            620.4968464,
            186.03104639999998,
            631.0054672
        ],
        "match": 225
    },
    {
        "content": "Source: 7",
        "page_index": 19,
        "bbox": [
            205.358,
            631.4558463999999,
            240.7840464,
            641.9644672
        ],
        "match": 225
    },
    {
        "content": "BSPg: 2",
        "page_index": 19,
        "bbox": [
            209.841,
            620.4968464,
            236.3010464,
            631.0054672
        ],
        "match": 225
    },
    {
        "content": "ILPinit: 1",
        "page_index": 19,
        "bbox": [
            102.57600000000001,
            609.5378464,
            142.4850464,
            620.0464672
        ],
        "match": null
    },
    {
        "content": "ILPinit: 0",
        "page_index": 19,
        "bbox": [
            152.846,
            609.5378464,
            192.7550464,
            620.0464672
        ],
        "match": null
    },
    {
        "content": "ILPinit: 0",
        "page_index": 19,
        "bbox": [
            203.117,
            609.5378464,
            243.02604639999998,
            620.0464672
        ],
        "match": null
    },
    {
        "content": "Table 5: Number of times each initialization method is the",
        "page_index": 19,
        "bbox": [
            53.502,
            588.4197616,
            294.04379212800006,
            597.3861616
        ],
        "match": 226
    },
    {
        "content": "best, on exp, cg and kNN computations in the training set,",
        "page_index": 19,
        "bbox": [
            53.798,
            577.4607616000001,
            295.13770880000004,
            586.9292800000001
        ],
        "match": 226
    },
    {
        "content": "separated for different values of \ud835\udc43 and different DAG sizes.",
        "page_index": 19,
        "bbox": [
            53.798,
            566.5017616,
            291.3664912,
            577.4407696
        ],
        "match": 226
    },
    {
        "content": "\ud835\udc5b \u2208",
        "page_index": 19,
        "bbox": [
            89.514,
            513.8301071999999,
            101.9479904,
            524.0607696
        ],
        "match": 227
    },
    {
        "content": "[15, 120]",
        "page_index": 19,
        "bbox": [
            80.81299999999999,
            502.8711072,
            111.1878112,
            513.1824672
        ],
        "match": 227
    },
    {
        "content": "\ud835\udc5b \u2208",
        "page_index": 19,
        "bbox": [
            89.514,
            480.5551072,
            101.9479904,
            490.7857696
        ],
        "match": 227
    },
    {
        "content": "[200, 350]",
        "page_index": 19,
        "bbox": [
            78.728,
            469.5961072,
            113.27281119999999,
            479.9074672
        ],
        "match": 227
    },
    {
        "content": "\ud835\udc5b \u2208",
        "page_index": 19,
        "bbox": [
            89.514,
            447.2801072,
            101.9479904,
            457.51076959999995
        ],
        "match": 227
    },
    {
        "content": "[1000, 2000]",
        "page_index": 19,
        "bbox": [
            73.064,
            436.3211072,
            115.94781119999999,
            446.63246719999995
        ],
        "match": 227
    },
    {
        "content": "\ud835\udc43 = 4 \ud835\udc43 = 8 \ud835\udc43 = 16",
        "page_index": 19,
        "bbox": [
            137.74,
            537.5519472,
            260.14675200000005,
            548.0874672
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 6",
        "page_index": 19,
        "bbox": [
            127.743,
            519.1128464,
            167.6520464,
            529.6214672
        ],
        "match": 227
    },
    {
        "content": "Source: 0",
        "page_index": 19,
        "bbox": [
            129.985,
            508.1538464,
            165.4110464,
            518.6624672
        ],
        "match": 227
    },
    {
        "content": "BSPg: 0",
        "page_index": 19,
        "bbox": [
            134.46800000000002,
            497.1948464,
            160.9280464,
            507.7034672
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 6",
        "page_index": 19,
        "bbox": [
            127.743,
            485.8368464,
            167.6520464,
            496.3454672
        ],
        "match": 227
    },
    {
        "content": "Source: 0",
        "page_index": 19,
        "bbox": [
            129.985,
            474.8778464,
            165.4110464,
            485.38646719999997
        ],
        "match": 227
    },
    {
        "content": "BSPg: 0",
        "page_index": 19,
        "bbox": [
            134.46800000000002,
            463.9198464,
            160.9280464,
            474.42846719999994
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 6",
        "page_index": 19,
        "bbox": [
            127.743,
            452.56184640000004,
            167.6520464,
            463.0704672
        ],
        "match": 227
    },
    {
        "content": "BSPg: 3",
        "page_index": 19,
        "bbox": [
            134.468,
            441.60284640000003,
            160.92804639999997,
            452.1114672
        ],
        "match": 227
    },
    {
        "content": "Source: 0",
        "page_index": 19,
        "bbox": [
            129.98499999999999,
            430.64384640000003,
            165.41104639999998,
            441.1524672
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 6",
        "page_index": 19,
        "bbox": [
            178.014,
            519.1128464,
            217.9230464,
            529.6214672
        ],
        "match": 227
    },
    {
        "content": "Source: 0",
        "page_index": 19,
        "bbox": [
            180.25500000000002,
            508.1538464,
            215.6810464,
            518.6624672
        ],
        "match": 227
    },
    {
        "content": "BSPg: 0",
        "page_index": 19,
        "bbox": [
            184.73800000000003,
            497.1948464,
            211.1980464,
            507.7034672
        ],
        "match": 227
    },
    {
        "content": "BSPg: 6",
        "page_index": 19,
        "bbox": [
            184.738,
            485.8368464,
            211.19804639999998,
            496.3454672
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 0",
        "page_index": 19,
        "bbox": [
            178.01399999999998,
            474.8778464,
            217.92304639999998,
            485.38646719999997
        ],
        "match": 227
    },
    {
        "content": "Source: 0",
        "page_index": 19,
        "bbox": [
            180.255,
            463.9198464,
            215.68104639999999,
            474.42846719999994
        ],
        "match": 227
    },
    {
        "content": "BSPg: 9",
        "page_index": 19,
        "bbox": [
            184.738,
            452.56184640000004,
            211.19804639999998,
            463.0704672
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 0",
        "page_index": 19,
        "bbox": [
            178.01399999999998,
            441.60284640000003,
            217.92304639999998,
            452.1114672
        ],
        "match": 227
    },
    {
        "content": "Source: 0",
        "page_index": 19,
        "bbox": [
            180.255,
            430.64384640000003,
            215.68104639999999,
            441.1524672
        ],
        "match": 227
    },
    {
        "content": "BSPg: 4",
        "page_index": 19,
        "bbox": [
            235.009,
            519.1128464,
            261.46904639999997,
            529.6214672
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 1",
        "page_index": 19,
        "bbox": [
            228.284,
            508.1538464,
            268.1940464,
            518.6624672
        ],
        "match": 227
    },
    {
        "content": "Source: 1",
        "page_index": 19,
        "bbox": [
            230.52599999999998,
            497.1948464,
            265.9520464,
            507.7034672
        ],
        "match": 227
    },
    {
        "content": "BSPg: 6",
        "page_index": 19,
        "bbox": [
            235.009,
            485.8368464,
            261.46904639999997,
            496.3454672
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 0",
        "page_index": 19,
        "bbox": [
            228.284,
            474.8778464,
            268.1940464,
            485.38646719999997
        ],
        "match": 227
    },
    {
        "content": "Source: 0",
        "page_index": 19,
        "bbox": [
            230.52599999999998,
            463.9198464,
            265.9520464,
            474.42846719999994
        ],
        "match": 227
    },
    {
        "content": "BSPg: 9",
        "page_index": 19,
        "bbox": [
            235.009,
            452.56184640000004,
            261.46904639999997,
            463.0704672
        ],
        "match": 227
    },
    {
        "content": "ILPinit: 0",
        "page_index": 19,
        "bbox": [
            228.284,
            441.60284640000003,
            268.1940464,
            452.1114672
        ],
        "match": 227
    },
    {
        "content": "Source: 0",
        "page_index": 19,
        "bbox": [
            230.52599999999998,
            430.64384640000003,
            265.9520464,
            441.1524672
        ],
        "match": 227
    },
    {
        "content": "B.3 Datasets for our experiments",
        "page_index": 19,
        "bbox": [
            53.798,
            404.47399790000003,
            223.75086890000006,
            415.38309790000005
        ],
        "match": 215
    },
    {
        "content": "To form our datasets, we generate fine\u2212grained DAGs for different",
        "page_index": 19,
        "bbox": [
            53.529,
            393.27706720000003,
            294.045551712,
            402.2434672
        ],
        "match": 216
    },
    {
        "content": "\ud835\udc5b values, and we also strive to produce DAGs of different shape: e.g.",
        "page_index": 19,
        "bbox": [
            53.44,
            382.2373696,
            295.42187942400005,
            391.2844672
        ],
        "match": 216
    },
    {
        "content": "a higher number of iterations \ud835\udc58 results in a deeper DAG (where the",
        "page_index": 19,
        "bbox": [
            53.798,
            371.2783696,
            294.045102976,
            380.3254672
        ],
        "match": 216
    },
    {
        "content": "longest path is longer), in contrast to a smaller \ud835\udc58, or in contrast to",
        "page_index": 19,
        "bbox": [
            53.798,
            360.3193696,
            294.04756634879993,
            369.3664672
        ],
        "match": 216
    },
    {
        "content": "spmv DAGs where no iterations happen at all, and the longest path",
        "page_index": 19,
        "bbox": [
            53.798,
            347.8998464,
            294.0414311680001,
            358.40846719999996
        ],
        "match": 216
    },
    {
        "content": "always has size only 3.",
        "page_index": 19,
        "bbox": [
            53.798,
            338.4830672,
            136.79960800000003,
            347.44946719999996
        ],
        "match": 216
    },
    {
        "content": "For the dataset used for the initial training, we create 10 fine\u2212",
        "page_index": 19,
        "bbox": [
            63.761,
            327.5240672,
            295.55998873600004,
            336.49046719999996
        ],
        "match": 217
    },
    {
        "content": "grained instances, with \ud835\udc5b ranging from 15 to 1950.",
        "page_index": 19,
        "bbox": [
            53.798,
            316.48436960000004,
            237.35760799999997,
            325.5314672
        ],
        "match": 217
    },
    {
        "content": "For the actual test datasets, we always specified an interval",
        "page_index": 19,
        "bbox": [
            63.761,
            305.60606720000004,
            294.04128531200007,
            314.5724672
        ],
        "match": 218
    },
    {
        "content": "for \ud835\udc5b first ([40, 80] for tiny, [250, 500] for small, [1000, 2000] for",
        "page_index": 19,
        "bbox": [
            53.798,
            293.10484640000004,
            294.2149309568,
            303.6134672
        ],
        "match": 218
    },
    {
        "content": "medium and [5000, 10000] for large), and we specifically created",
        "page_index": 19,
        "bbox": [
            53.798,
            282.14584640000004,
            294.04913312,
            292.6544672
        ],
        "match": 218
    },
    {
        "content": "a fine\u2212grained DAG with each of the 4 methods in our generator",
        "page_index": 19,
        "bbox": [
            53.798,
            272.72906720000003,
            294.21112896,
            281.6954672
        ],
        "match": 218
    },
    {
        "content": "that is approximately in the beginning, middle, and end of this",
        "page_index": 19,
        "bbox": [
            53.798,
            261.7700672,
            294.047128832,
            270.7364672
        ],
        "match": 218
    },
    {
        "content": "interval. This results in 12 fine\u2212grained DAGs for the tiny set. For",
        "page_index": 19,
        "bbox": [
            53.798,
            249.2688464,
            294.21859306880003,
            259.7774672
        ],
        "match": 218
    },
    {
        "content": "the remaining sets, there is a higher number of possible parameter",
        "page_index": 19,
        "bbox": [
            53.798,
            239.8530672,
            294.21706004480006,
            248.81946720000002
        ],
        "match": 218
    },
    {
        "content": "combinations to create DAGs in the interval; as such, with all the",
        "page_index": 19,
        "bbox": [
            53.798,
            228.8940672,
            294.04367676800007,
            237.86046720000002
        ],
        "match": 218
    },
    {
        "content": "iterative methods that allow more freedom to influence the depth",
        "page_index": 19,
        "bbox": [
            53.798,
            217.9350672,
            294.04645635200006,
            226.9014672
        ],
        "match": 218
    },
    {
        "content": "of the DAG (i.e. exp, cg and kNN), we create two different DAGs, a",
        "page_index": 19,
        "bbox": [
            53.798,
            205.4338464,
            294.0476718848,
            215.9424672
        ],
        "match": 218
    },
    {
        "content": "deeper and a wider one, for the beginning, middle, and end of each",
        "page_index": 19,
        "bbox": [
            53.798,
            196.01706719999999,
            294.04419681919995,
            204.9834672
        ],
        "match": 218
    },
    {
        "content": "node interval. This results in 6 fine\u2212grained DAGs with exp, cg and",
        "page_index": 19,
        "bbox": [
            53.798,
            183.5158464,
            294.04454336,
            194.0244672
        ],
        "match": 218
    },
    {
        "content": "kNN, and 3 fine\u2212grained DAGs with spmv. Hence altogether, we have",
        "page_index": 19,
        "bbox": [
            53.798,
            172.55684639999998,
            294.047609472,
            183.0654672
        ],
        "match": 218
    },
    {
        "content": "21 fine\u2212grained DAGs in the small, medium and large datasets.",
        "page_index": 19,
        "bbox": [
            53.798,
            161.59784639999998,
            286.1614336,
            172.1064672
        ],
        "match": 218
    },
    {
        "content": "Besides this, we also add to each dataset the coarse\u2212grained",
        "page_index": 19,
        "bbox": [
            63.761,
            152.1810672,
            294.0412853120001,
            161.14746720000002
        ],
        "match": 219
    },
    {
        "content": "instances in our database where the number of nodes fits into the",
        "page_index": 19,
        "bbox": [
            53.798,
            141.2220672,
            294.04499482880004,
            150.18846720000002
        ],
        "match": 219
    },
    {
        "content": "defined interval. This adds 4 coarse\u2212grained DAGs to the tiny",
        "page_index": 19,
        "bbox": [
            53.798,
            128.7208464,
            294.2688,
            139.22946720000002
        ],
        "match": 219
    },
    {
        "content": "dataset, and 3 coarse\u2212grained DAGs to the small dataset.",
        "page_index": 19,
        "bbox": [
            53.798,
            117.7628464,
            262.3115376,
            128.27146720000002
        ],
        "match": 219
    },
    {
        "content": "In order to create the huge dataset, we generate 7 fine\u2212grained",
        "page_index": 19,
        "bbox": [
            63.761,
            106.8038464,
            294.0456367744,
            117.3124672
        ],
        "match": 220
    },
    {
        "content": "instances with \ud835\udc5b \u2208 [50000, 100000]: one with spmv, and two with",
        "page_index": 19,
        "bbox": [
            53.798,
            95.8448464,
            294.04035296,
            106.3534672
        ],
        "match": 220
    },
    {
        "content": "20",
        "page_index": 19,
        "bbox": [
            302.757,
            72.68305240000001,
            309.242634,
            79.6568524
        ],
        "match": 218
    },
    {
        "content": "C DETAILS ON THE EXPERIMENTS",
        "page_index": 19,
        "bbox": [
            317.955,
            652.7429979,
            505.7224292,
            663.6520979000001
        ],
        "match": 221
    },
    {
        "content": "C.1 Comparison of initializers",
        "page_index": 19,
        "bbox": [
            317.955,
            637.0519979,
            474.9151308,
            647.9610979
        ],
        "match": 222
    },
    {
        "content": "We begin by discussing our preliminary runs on the training set",
        "page_index": 19,
        "bbox": [
            317.525,
            625.8550672,
            558.2039780480001,
            634.8214672
        ],
        "match": 223
    },
    {
        "content": "to evaluate the performance of the different initialization methods.",
        "page_index": 19,
        "bbox": [
            317.955,
            614.8960672,
            559.57975392,
            623.8624672
        ],
        "match": 223
    },
    {
        "content": "With the 10 training set DAGs and 9 parameter combinations from",
        "page_index": 19,
        "bbox": [
            317.525,
            603.9370672,
            558.2025177344,
            612.9034672
        ],
        "match": 223
    },
    {
        "content": "\ud835\udc43 \u2208 {4, 8, 16} and \ud835\udc54 \u2208 {1, 3, 5}, this amounts to 90 runs altogether.",
        "page_index": 19,
        "bbox": [
            317.821,
            591.6331071999999,
            556.0417248,
            601.9444672
        ],
        "match": 223
    },
    {
        "content": "During these runs, we found that each of our initialization meth\u2212",
        "page_index": 19,
        "bbox": [
            327.918,
            582.0190672,
            559.72095936,
            590.9854672
        ],
        "match": 224
    },
    {
        "content": "ods can outperform the others. In particular, the best schedule",
        "page_index": 19,
        "bbox": [
            317.955,
            571.0600671999999,
            558.2041288319999,
            580.0264672
        ],
        "match": 224
    },
    {
        "content": "was returned by BSPg in 44 cases, by Source in 20 cases and by",
        "page_index": 19,
        "bbox": [
            317.623,
            558.5598464,
            558.4321172479999,
            569.0684672
        ],
        "match": 224
    },
    {
        "content": "ILPinit in 26 cases. Furthermore, we can observe that the relative",
        "page_index": 19,
        "bbox": [
            317.955,
            547.6008463999999,
            558.2048556160001,
            558.1094671999999
        ],
        "match": 224
    },
    {
        "content": "performance of the heuristics show a strong dependence on the",
        "page_index": 19,
        "bbox": [
            317.955,
            538.1840672,
            558.204128832,
            547.1504672
        ],
        "match": 224
    },
    {
        "content": "properties of the scheduling problem itself; in particular, on the",
        "page_index": 19,
        "bbox": [
            317.955,
            527.2250672,
            558.2041288319999,
            536.1914672
        ],
        "match": 224
    },
    {
        "content": "size of the DAG, the number of processors \ud835\udc43, and besides these,",
        "page_index": 19,
        "bbox": [
            317.955,
            516.1853696,
            559.1884572160001,
            525.2324672
        ],
        "match": 224
    },
    {
        "content": "also on the \u201cshape\u201d of the DAG: the shallow DAGs produced by",
        "page_index": 19,
        "bbox": [
            317.955,
            505.3070672,
            558.4327720320001,
            514.2734672
        ],
        "match": 224
    },
    {
        "content": "spmv computations behave rather differently from the rest of the",
        "page_index": 19,
        "bbox": [
            317.955,
            494.3480672,
            558.1991271232001,
            503.31446719999997
        ],
        "match": 224
    },
    {
        "content": "fine\u2212grained DAGs.",
        "page_index": 19,
        "bbox": [
            317.955,
            483.3890672,
            388.49366879999997,
            492.35546719999996
        ],
        "match": 224
    },
    {
        "content": "In particular, Tables 4 and 5 show the number of times each",
        "page_index": 19,
        "bbox": [
            327.918,
            472.4300672,
            558.198285312,
            481.39646719999996
        ],
        "match": 226
    },
    {
        "content": "heuristic turned out to be the most successful, Table 4 for spmv",
        "page_index": 19,
        "bbox": [
            317.955,
            461.4710672,
            558.4262144,
            470.43746719999996
        ],
        "match": 226
    },
    {
        "content": "computations, and Table 5 for all other fine\u2212grained instances com\u2212",
        "page_index": 19,
        "bbox": [
            317.955,
            450.5120672,
            559.7134160448,
            459.47846719999995
        ],
        "match": 226
    },
    {
        "content": "bined. Table 4 is separated according to \ud835\udc43, while Table 5 is separated",
        "page_index": 19,
        "bbox": [
            317.955,
            439.4733696,
            558.199681792,
            448.5204672
        ],
        "match": 226
    },
    {
        "content": "according to \ud835\udc43 and \ud835\udc5b. There are several straightforward observa\u2212",
        "page_index": 19,
        "bbox": [
            317.955,
            428.5143696,
            559.7142296320002,
            437.5614672
        ],
        "match": 226
    },
    {
        "content": "tions from these tables. On the one hand, it is clear that Source is",
        "page_index": 19,
        "bbox": [
            317.955,
            416.0938464,
            558.2017171904,
            426.6024672
        ],
        "match": 226
    },
    {
        "content": "rather effective for the shallow spmv DAGs, but not very useful",
        "page_index": 19,
        "bbox": [
            317.955,
            406.6770672,
            558.2058624,
            415.6434672
        ],
        "match": 226
    },
    {
        "content": "otherwise. ILPinit performs well either for very small DAGs, or",
        "page_index": 19,
        "bbox": [
            317.955,
            396.2918464,
            558.372795904,
            406.80046719999996
        ],
        "match": 226
    },
    {
        "content": "for very small \ud835\udc43. Finally, BSPg consistently delivers good results for",
        "page_index": 19,
        "bbox": [
            317.955,
            385.3328464,
            558.372384192,
            395.84146719999995
        ],
        "match": 226
    },
    {
        "content": "most of the parameter combinations.",
        "page_index": 19,
        "bbox": [
            317.955,
            375.91606720000004,
            452.630328,
            384.8824672
        ],
        "match": 226
    },
    {
        "content": "Since ILPinit is a very time\u2212consuming initialization methods,",
        "page_index": 19,
        "bbox": [
            327.918,
            363.41484640000004,
            559.1925788095999,
            373.9234672
        ],
        "match": 228
    },
    {
        "content": "based on these observations, we decide to only run ILPinit for",
        "page_index": 19,
        "bbox": [
            317.955,
            352.45584640000004,
            558.3718334079999,
            362.9644672
        ],
        "match": 228
    },
    {
        "content": "problems with \ud835\udc43 = 4 processors in the experiments; this significantly",
        "page_index": 19,
        "bbox": [
            317.955,
            341.4709472,
            558.432253888,
            352.0064672
        ],
        "match": 228
    },
    {
        "content": "reduces the running time required for the experiments. Although",
        "page_index": 19,
        "bbox": [
            317.955,
            332.0810672,
            558.2030169984001,
            341.04746719999997
        ],
        "match": 228
    },
    {
        "content": "ILPinit is also often superior when \ud835\udc5b is small, we do not apply it",
        "page_index": 19,
        "bbox": [
            317.955,
            319.5798464,
            558.2001317248,
            330.08846719999997
        ],
        "match": 228
    },
    {
        "content": "in this case, since ILPfull and ILPiter can essentially fulfill the",
        "page_index": 19,
        "bbox": [
            317.955,
            308.6208464,
            558.2028112512,
            319.12946719999997
        ],
        "match": 228
    },
    {
        "content": "same role for these problems. Since both BSPg and Source are very",
        "page_index": 19,
        "bbox": [
            317.955,
            297.6618464,
            558.433542912,
            308.17046719999996
        ],
        "match": 228
    },
    {
        "content": "fast heuristics with negligible running time compared to the other",
        "page_index": 19,
        "bbox": [
            317.955,
            288.2450672,
            558.3709576704,
            297.21146719999996
        ],
        "match": 228
    },
    {
        "content": "elements in our framework, we apply both of them on every input",
        "page_index": 19,
        "bbox": [
            317.955,
            277.2860672,
            558.2006140032,
            286.25246719999996
        ],
        "match": 228
    },
    {
        "content": "problem, regardless of the parameters.",
        "page_index": 19,
        "bbox": [
            317.955,
            266.32706720000004,
            458.1177648,
            275.2934672
        ],
        "match": 228
    },
    {
        "content": "C.2 Experiments without NUMA",
        "page_index": 19,
        "bbox": [
            317.955,
            242.6549979,
            486.7624134,
            253.5640979
        ],
        "match": 230
    },
    {
        "content": "The results of our experiments without NUMA effects have already",
        "page_index": 19,
        "bbox": [
            317.686,
            231.4580672,
            558.434198656,
            240.4244672
        ],
        "match": 230
    },
    {
        "content": "been outlined in Section 7. For completeness, here we provide a",
        "page_index": 19,
        "bbox": [
            317.955,
            220.49906719999998,
            558.2041288320002,
            229.4654672
        ],
        "match": 230
    },
    {
        "content": "table with the respective improvements for each combination of",
        "page_index": 19,
        "bbox": [
            317.955,
            209.54006719999998,
            558.2041288320002,
            218.5064672
        ],
        "match": 230
    },
    {
        "content": "\ud835\udc43, \ud835\udc54 and dataset, shown in Table 6. Note that each number in the",
        "page_index": 19,
        "bbox": [
            317.821,
            198.5003696,
            558.204124928,
            207.5474672
        ],
        "match": 230
    },
    {
        "content": "tiny, small, medium and large rows is still the average of 16, 24,",
        "page_index": 19,
        "bbox": [
            317.955,
            186.07984639999998,
            559.18819712,
            196.5884672
        ],
        "match": 230
    },
    {
        "content": "21 and 21 runs on different DAGs, respectively. This more detailed",
        "page_index": 19,
        "bbox": [
            317.955,
            176.6630672,
            558.2039540480001,
            185.62946720000002
        ],
        "match": 230
    },
    {
        "content": "table reveals some further details compared to Table 1; for instance,",
        "page_index": 19,
        "bbox": [
            317.955,
            165.7050672,
            559.1864876160001,
            174.67146720000002
        ],
        "match": 230
    },
    {
        "content": "while the cost reduction generally increases with larger \ud835\udc43, this in",
        "page_index": 19,
        "bbox": [
            317.623,
            154.66536960000002,
            558.2038224768002,
            163.71246720000002
        ],
        "match": 230
    },
    {
        "content": "fact only holds for the larger datasets, and the effect is in fact the",
        "page_index": 19,
        "bbox": [
            317.955,
            143.7870672,
            558.1981392768,
            152.75346720000002
        ],
        "match": 230
    },
    {
        "content": "opposite for the tiny DAGs. It also shows that for the most extreme",
        "page_index": 19,
        "bbox": [
            317.955,
            131.2858464,
            558.203044928,
            141.7944672
        ],
        "match": 230
    },
    {
        "content": "subcase, our scheduler achieves almost a factor 2\u00d7 improvement",
        "page_index": 19,
        "bbox": [
            317.955,
            120.5241072,
            558.197423616,
            130.8354672
        ],
        "match": 230
    },
    {
        "content": "with respect to HDagg, and well over a factor 2\u00d7 improvement with",
        "page_index": 19,
        "bbox": [
            317.623,
            109.36784639999999,
            558.2037281920001,
            119.8764672
        ],
        "match": 230
    },
    {
        "content": "respect to Cilk, even in this non\u2212NUMA setting.",
        "page_index": 19,
        "bbox": [
            317.955,
            98.40884639999999,
            495.5523168,
            108.91746719999999
        ],
        "match": 230
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 20,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "Table 6: Improvement achieved by our scheduler (without NUMA) for each combination of \ud835\udc54, \ud835\udc43 and dataset, with respect to Cilk",
        "page_index": 20,
        "bbox": [
            53.502,
            698.5717616000001,
            558.4258000000001,
            709.5107696
        ],
        "match": null
    },
    {
        "content": "(first number in cell) and HDagg (second number in cell).",
        "page_index": 20,
        "bbox": [
            53.52000000000004,
            687.6127616000001,
            278.8277760000001,
            697.0812800000001
        ],
        "match": 12
    },
    {
        "content": "\ud835\udc43 = 4 \ud835\udc43 = 8 \ud835\udc43 = 16 \ud835\udc43 = 4 \ud835\udc43 = 8 \ud835\udc43 = 16 \ud835\udc43 = 4 \ud835\udc43 = 8 \ud835\udc43 = 16",
        "page_index": 20,
        "bbox": [
            154.789,
            642.0539471999999,
            488.699752,
            652.5894672
        ],
        "match": null
    },
    {
        "content": "\ud835\udc54 = 1",
        "page_index": 20,
        "bbox": [
            194.171,
            660.9629471999999,
            213.283376,
            671.4984671999999
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc54 = 3",
        "page_index": 20,
        "bbox": [
            311.189,
            660.9629471999999,
            330.301376,
            671.4984671999999
        ],
        "match": 45
    },
    {
        "content": "\ud835\udc54 = 5",
        "page_index": 20,
        "bbox": [
            428.206,
            660.9629471999999,
            447.318376,
            671.4984671999999
        ],
        "match": 33
    },
    {
        "content": "tiny 41%/34% 33%/28% 20%/16% 49%/43% 40%/36% 28%/26% 54%/49% 30%/36% 33%/32%",
        "page_index": 20,
        "bbox": [
            118.245,
            620.3818464,
            491.11514669999997,
            629.8961598
        ],
        "match": null
    },
    {
        "content": "small 33%/23% 41%/25% 39%/20% 40%/28% 46%/31% 46%/30% 43%/30% 46%/32% 49%/35%",
        "page_index": 20,
        "bbox": [
            116.004,
            602.9968464,
            491.11514669999997,
            612.5111598
        ],
        "match": null
    },
    {
        "content": "medium 31%/14% 43%/17% 53%/20% 38%/16% 47%/20% 56%/27% 42%/18% 47%/20% 58%/31%",
        "page_index": 20,
        "bbox": [
            114.509,
            585.6118464,
            491.11514669999997,
            595.1261598
        ],
        "match": null
    },
    {
        "content": "large 27%/ 9% 41%/13% 53%/16% 34%/ 8% 46%/12% 56%/21% 38%/ 7% 46%/12% 58%/13%",
        "page_index": 20,
        "bbox": [
            116.004,
            568.2268464,
            491.11514669999997,
            577.7411598
        ],
        "match": null
    },
    {
        "content": "Table 7: Ratio of costs achieved by our algorithms (similarly to Figure 5), for \ud835\udc54 = 5, on the different datasets.",
        "page_index": 20,
        "bbox": [
            88.756,
            542.5947616000001,
            522.9480735999999,
            553.6144672
        ],
        "match": 13
    },
    {
        "content": "BL\u2212EST ETF Cilk HDagg Init HCcs ILPpart ILPcs",
        "page_index": 20,
        "bbox": [
            198.926,
            515.9728464,
            449.338,
            524.9392464
        ],
        "match": null
    },
    {
        "content": "tiny 1.126 0.883 1 0.943 0.728 0.619 0.57 0.569",
        "page_index": 20,
        "bbox": [
            163.758,
            494.2738464,
            447.60312799999997,
            504.7824672
        ],
        "match": null
    },
    {
        "content": "small 1.54 1.073 1 0.791 0.66 0.579 0.556 0.539",
        "page_index": 20,
        "bbox": [
            161.516,
            476.88884640000003,
            447.60312799999997,
            487.3974672
        ],
        "match": null
    },
    {
        "content": "medium 1.896 1.254 1 0.658 0.592 0.542 0.529 0.506",
        "page_index": 20,
        "bbox": [
            159.275,
            459.50384640000004,
            447.60312799999997,
            470.0124672
        ],
        "match": null
    },
    {
        "content": "large 2.142 1.517 1 0.609 0.591 0.547 0.542 0.521",
        "page_index": 20,
        "bbox": [
            161.516,
            442.11984640000003,
            447.60312799999997,
            452.6284672
        ],
        "match": null
    },
    {
        "content": "Table 8: Cost reduction achieved by our scheduler compared",
        "page_index": 20,
        "bbox": [
            53.502,
            413.49876159999997,
            294.0444018431999,
            422.4651616
        ],
        "match": 5
    },
    {
        "content": "to ETF on the tiny dataset, for each combination of \ud835\udc54 and \ud835\udc43,",
        "page_index": 20,
        "bbox": [
            53.798,
            402.53976159999996,
            295.1389942272,
            413.47876959999996
        ],
        "match": 5
    },
    {
        "content": "without NUMA.",
        "page_index": 20,
        "bbox": [
            53.449,
            391.58076159999996,
            118.1146768,
            400.5471616
        ],
        "match": 5
    },
    {
        "content": "\ud835\udc54 = 1 \ud835\udc54 = 3 \ud835\udc54 = 5",
        "page_index": 20,
        "bbox": [
            152.08,
            364.16494720000003,
            229.242376,
            374.7004672
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc43 = 4 38% 43% 46%",
        "page_index": 20,
        "bbox": [
            117.911,
            341.3699472,
            226.93534879999999,
            351.9054672
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc43 = 8 33% 31% 32%",
        "page_index": 20,
        "bbox": [
            117.911,
            322.8889472,
            226.93534879999999,
            333.4244672
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 16 22% 27% 28%",
        "page_index": 20,
        "bbox": [
            115.826,
            304.4089472,
            226.93534879999999,
            314.94446719999996
        ],
        "match": null
    },
    {
        "content": "Table 9: Cost reduction achieved by our scheduler for dif\u2212",
        "page_index": 20,
        "bbox": [
            53.502,
            280.7627616,
            295.653440256,
            289.7291616
        ],
        "match": 5
    },
    {
        "content": "ferent values of \u2113, on the medium dataset for \ud835\udc54 = 1 and \ud835\udc43 = 8",
        "page_index": 20,
        "bbox": [
            53.798,
            269.8037616,
            294.04476351999995,
            280.8234672
        ],
        "match": 5
    },
    {
        "content": "(compared to Cilk/HDagg).",
        "page_index": 20,
        "bbox": [
            53.52,
            258.84476159999997,
            157.1712176,
            268.31328
        ],
        "match": 5
    },
    {
        "content": "achieved by these methods becomes less significant. In contrast to",
        "page_index": 20,
        "bbox": [
            317.955,
            413.2610672,
            558.2017886016,
            422.2274672
        ],
        "match": 5
    },
    {
        "content": "this, ILPcs only achieves a minimal improvement on the smaller",
        "page_index": 20,
        "bbox": [
            317.955,
            400.7598464,
            558.368405056,
            411.2684672
        ],
        "match": 5
    },
    {
        "content": "dataset, but it is more impressive when \ud835\udc5b is larger: it decreases the",
        "page_index": 20,
        "bbox": [
            317.955,
            391.2623696,
            558.1993985728,
            400.3094672
        ],
        "match": 5
    },
    {
        "content": "ratio from 0.529 to 0.506 on medium and from 0.542 to 0.521 on",
        "page_index": 20,
        "bbox": [
            317.955,
            378.8418464,
            558.2014314879999,
            389.35046719999997
        ],
        "match": 5
    },
    {
        "content": "large (4% improvement in both cases). This suggests that ILPpart",
        "page_index": 20,
        "bbox": [
            317.955,
            367.8828464,
            558.2013999999999,
            378.39146719999997
        ],
        "match": 5
    },
    {
        "content": "and ILPcs excel in different situations, and hence they are both",
        "page_index": 20,
        "bbox": [
            317.955,
            356.9238464,
            558.1989608960001,
            367.43246719999996
        ],
        "match": 5
    },
    {
        "content": "valuable ingredients in our scheduler.",
        "page_index": 20,
        "bbox": [
            317.731,
            347.5070672,
            455.1321136,
            356.47346719999996
        ],
        "match": 5
    },
    {
        "content": "The table also contains our other academic baselines, ETF and",
        "page_index": 20,
        "bbox": [
            327.918,
            335.0058464,
            558.2013206400001,
            345.51446719999996
        ],
        "match": 5
    },
    {
        "content": "BL\u2212EST. The data shows that as \ud835\udc5b grows, even Cilk becomes more",
        "page_index": 20,
        "bbox": [
            317.955,
            324.04684640000005,
            558.1987584,
            334.5554672
        ],
        "match": 5
    },
    {
        "content": "superior to both ETF and BL\u2212EST. Also, both ETF and BL\u2212EST are",
        "page_index": 20,
        "bbox": [
            317.955,
            313.08784640000005,
            558.200783104,
            323.5964672
        ],
        "match": 5
    },
    {
        "content": "significantly outperformed by HDagg, except for a single case: ETF",
        "page_index": 20,
        "bbox": [
            317.955,
            302.1298464,
            558.4256,
            312.6384672
        ],
        "match": 5
    },
    {
        "content": "performs better than HDagg on the tiny dataset. Since ETF is the",
        "page_index": 20,
        "bbox": [
            317.955,
            291.1708464,
            558.1983704319999,
            301.6794672
        ],
        "match": 5
    },
    {
        "content": "strongest baseline altogether for this specific dataset, for complete\u2212",
        "page_index": 20,
        "bbox": [
            317.955,
            281.7540672,
            559.7195400960001,
            290.7204672
        ],
        "match": 5
    },
    {
        "content": "ness, we also show the cost improvement of our scheduler on the",
        "page_index": 20,
        "bbox": [
            317.955,
            270.7950672,
            558.2030169984001,
            279.76146719999997
        ],
        "match": 5
    },
    {
        "content": "tiny dataset compared to ETF in Table 8. The table shows that",
        "page_index": 20,
        "bbox": [
            317.955,
            258.2938464,
            558.197604416,
            268.80246719999997
        ],
        "match": 5
    },
    {
        "content": "our scheduler is also consistently superior to ETF by a significant",
        "page_index": 20,
        "bbox": [
            317.955,
            247.3348464,
            558.1991096255999,
            257.8434672
        ],
        "match": 5
    },
    {
        "content": "\u2113 = 2 \u2113 = 5 \u2113 = 10 \u2113 = 20",
        "page_index": 20,
        "bbox": [
            93.813,
            231.42894719999998,
            253.83675200000002,
            241.9644672
        ],
        "match": null
    },
    {
        "content": "margin.",
        "page_index": 20,
        "bbox": [
            317.955,
            237.9180672,
            346.2170928,
            246.88446720000002
        ],
        "match": null
    },
    {
        "content": "38% / 16% 43% / 17% 50% / 19% 58% / 21%",
        "page_index": 20,
        "bbox": [
            84.839,
            208.8581072,
            260.7633488,
            219.1694672
        ],
        "match": null
    },
    {
        "content": "In order to better understand the different ILP methods, we show",
        "page_index": 20,
        "bbox": [
            63.761,
            182.33206719999998,
            294.37770464000016,
            191.2984672
        ],
        "match": 5
    },
    {
        "content": "the performance of each algorithm on the datasets for \ud835\udc54 = 5 (and all",
        "page_index": 20,
        "bbox": [
            53.798,
            169.80394719999998,
            294.046235008,
            180.3394672
        ],
        "match": 5
    },
    {
        "content": "of \ud835\udc43 \u2208 {4, 8, 16}) in Table 7, with the ratios normalized to Cilk as in",
        "page_index": 20,
        "bbox": [
            53.798,
            158.87184639999998,
            294.046223872,
            169.3804672
        ],
        "match": 5
    },
    {
        "content": "our figures before. The ILPpart column shows the relative cost of",
        "page_index": 20,
        "bbox": [
            53.798,
            147.91384639999998,
            294.043776256,
            158.4224672
        ],
        "match": 5
    },
    {
        "content": "the schedule after running ILPfull and ILPpart, whereas ILPcs",
        "page_index": 20,
        "bbox": [
            53.798,
            136.95484639999998,
            294.045,
            147.4634672
        ],
        "match": 5
    },
    {
        "content": "shows the final schedule after also running ILPcs. The table shows",
        "page_index": 20,
        "bbox": [
            53.798,
            125.99584639999999,
            294.041367104,
            136.5044672
        ],
        "match": 5
    },
    {
        "content": "that in the tiny dataset, ILPfull/ILPpart has a significant effect,",
        "page_index": 20,
        "bbox": [
            53.798,
            115.03684639999999,
            295.034170624,
            125.54546719999999
        ],
        "match": 5
    },
    {
        "content": "decreasing the mean ratio from 0.619 to 0.569, which amounts to a",
        "page_index": 20,
        "bbox": [
            53.798,
            105.5393696,
            294.0443732352,
            114.5864672
        ],
        "match": 5
    },
    {
        "content": "8% cost decrease from 0.619. As \ud835\udc5b grows larger, the improvement",
        "page_index": 20,
        "bbox": [
            53.798,
            94.5803696,
            294.0440259456,
            103.6274672
        ],
        "match": 5
    },
    {
        "content": "C.3 The role of latency",
        "page_index": 20,
        "bbox": [
            317.955,
            214.24499790000002,
            438.05328189999994,
            225.1540979
        ],
        "match": 5
    },
    {
        "content": "So far, we always had a fixed choice of \u2113 = 5 in our scheduling",
        "page_index": 20,
        "bbox": [
            317.955,
            201.4799472,
            558.1979651839999,
            212.01546720000002
        ],
        "match": 5
    },
    {
        "content": "problems. As such, we also run a small experiment to investigate",
        "page_index": 20,
        "bbox": [
            317.955,
            192.0900672,
            558.2004526080001,
            201.05646720000001
        ],
        "match": 5
    },
    {
        "content": "the effect of the parameter \u2113 on our schedules. For this, we consider",
        "page_index": 20,
        "bbox": [
            317.955,
            183.1663696,
            558.368726208,
            192.2134672
        ],
        "match": 5
    },
    {
        "content": "the medium dataset, with a choice of \ud835\udc54 = 1 (to ensure that communi\u2212",
        "page_index": 20,
        "bbox": [
            317.955,
            170.7189472,
            559.715465152,
            181.25446720000002
        ],
        "match": 5
    },
    {
        "content": "cation costs are dominated by \u2113) and \ud835\udc43 = 8. We investigate different",
        "page_index": 20,
        "bbox": [
            317.955,
            159.7599472,
            558.2002826879999,
            170.29546720000002
        ],
        "match": 5
    },
    {
        "content": "values for the latency in this setting: \u2113 \u2208 {2, 5, 10, 20}.",
        "page_index": 20,
        "bbox": [
            317.731,
            149.0251072,
            509.96360799999997,
            159.33646720000002
        ],
        "match": 5
    },
    {
        "content": "We show the improvement achieved by our scheduler for each",
        "page_index": 20,
        "bbox": [
            327.918,
            139.4110672,
            558.2005448448,
            148.3774672
        ],
        "match": 5
    },
    {
        "content": "of these cases in Table 9. The table shows that similarly to \ud835\udc54, the",
        "page_index": 20,
        "bbox": [
            317.955,
            128.3723696,
            558.202250112,
            137.4194672
        ],
        "match": 5
    },
    {
        "content": "improvement increases for larger values of \u2113. However, in contrast",
        "page_index": 20,
        "bbox": [
            317.955,
            117.4133696,
            558.1974321792,
            126.4604672
        ],
        "match": 5
    },
    {
        "content": "to \ud835\udc54, the latency needs to be set to much larger numerical values in",
        "page_index": 20,
        "bbox": [
            317.955,
            106.45436959999999,
            558.1983739520001,
            115.5014672
        ],
        "match": 5
    },
    {
        "content": "order for this tendency to become clearly noticeable.",
        "page_index": 20,
        "bbox": [
            317.955,
            95.5760672,
            510.36497760000003,
            104.54246719999999
        ],
        "match": 5
    },
    {
        "content": "21",
        "page_index": 20,
        "bbox": [
            302.757,
            72.68305240000001,
            309.242634,
            79.6568524
        ],
        "match": 86
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 21,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": 4
    },
    {
        "content": "1",
        "page_index": 21,
        "bbox": [
            86.11753048,
            692.116661056192,
            89.75681201536,
            699.943072960192
        ],
        "match": 2
    },
    {
        "content": "0.5",
        "page_index": 21,
        "bbox": [
            80.49805780000001,
            642.387472229056,
            89.75681201536001,
            650.2843218401921
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 21,
        "bbox": [
            86.11753048,
            592.765990136192,
            89.75681201536,
            600.592402040192
        ],
        "match": 2
    },
    {
        "content": "1",
        "page_index": 21,
        "bbox": [
            252.01353048,
            692.163795496192,
            255.65281201535998,
            699.990207400192
        ],
        "match": 2
    },
    {
        "content": "0.5",
        "page_index": 21,
        "bbox": [
            246.39405779999998,
            642.434606669056,
            255.65281201535996,
            650.3314562801921
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 21,
        "bbox": [
            252.01353048,
            592.8131245761921,
            255.65281201535998,
            600.6395364801921
        ],
        "match": 2
    },
    {
        "content": "1",
        "page_index": 21,
        "bbox": [
            417.90953048,
            692.163795496192,
            421.54881201536,
            699.990207400192
        ],
        "match": 2
    },
    {
        "content": "0.5",
        "page_index": 21,
        "bbox": [
            412.2900578,
            642.434606669056,
            421.54881201536,
            650.3314562801921
        ],
        "match": 33
    },
    {
        "content": "0",
        "page_index": 21,
        "bbox": [
            417.90953048,
            592.8131245761921,
            421.54881201536,
            600.6395364801921
        ],
        "match": 2
    },
    {
        "content": "Cilk HDagg Init HCcs",
        "page_index": 21,
        "bbox": [
            102.10483424,
            582.139599768704,
            192.296410608,
            590.189463832704
        ],
        "match": null
    },
    {
        "content": "Cilk HDagg Init HCcs",
        "page_index": 21,
        "bbox": [
            268.00083424,
            582.186734208704,
            358.192410608,
            590.236598272704
        ],
        "match": null
    },
    {
        "content": "Cilk HDagg Init HCcs",
        "page_index": 21,
        "bbox": [
            433.89683424,
            582.186734208704,
            524.088410608,
            590.236598272704
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 4",
        "page_index": 21,
        "bbox": [
            138.50920626,
            570.449473772992,
            155.77470525536,
            579.645507760192
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc43 = 8",
        "page_index": 21,
        "bbox": [
            304.40520626,
            570.495735352992,
            321.67070525535996,
            579.6917693401921
        ],
        "match": 45
    },
    {
        "content": "\ud835\udc43 = 16",
        "page_index": 21,
        "bbox": [
            468.48216601999997,
            570.495735352992,
            489.3869465507199,
            579.6917693401921
        ],
        "match": 45
    },
    {
        "content": "Figure 7: Improvement achieved by the initialization methods and the local search algorithm on the huge dataset, separated",
        "page_index": 21,
        "bbox": [
            53.798,
            547.4857616,
            558.2015262464,
            556.95428
        ],
        "match": 10
    },
    {
        "content": "according to the value of \ud835\udc43.",
        "page_index": 21,
        "bbox": [
            53.798,
            536.5267616,
            163.5958016,
            547.4657695999999
        ],
        "match": 10
    },
    {
        "content": "C.4 Experiments with NUMA",
        "page_index": 21,
        "bbox": [
            53.79799999999999,
            512.3319978999999,
            206.1653997,
            523.2410979
        ],
        "match": null
    },
    {
        "content": "In our experiments with NUMA effects, we only considered \ud835\udc43 = 8",
        "page_index": 21,
        "bbox": [
            53.798,
            499.5669472,
            294.04523913599996,
            510.1024672
        ],
        "match": 12
    },
    {
        "content": "and \ud835\udc43 = 16 for the number of processors, since even as a binary",
        "page_index": 21,
        "bbox": [
            53.798,
            488.6079472,
            294.2760162560001,
            499.1434672
        ],
        "match": 12
    },
    {
        "content": "tree, \ud835\udc43 = 4 gives a very shallow hierarchy with only two levels.",
        "page_index": 21,
        "bbox": [
            53.798,
            477.6489472,
            295.427895552,
            488.1844672
        ],
        "match": null
    },
    {
        "content": "Similarly, we only considered \ud835\udc54 = 1, since with \ud835\udc43 = 16 and \u0394 = 4,",
        "page_index": 21,
        "bbox": [
            53.798,
            466.6899472,
            295.03106016,
            477.2434
        ],
        "match": null
    },
    {
        "content": "this already gives a coefficient as high as \u03943 = 64 between pairs",
        "page_index": 21,
        "bbox": [
            53.798,
            455.7309472,
            294.04575008000006,
            467.8311546
        ],
        "match": 12
    },
    {
        "content": "of processors that are only connected over the highest level of the",
        "page_index": 21,
        "bbox": [
            53.798,
            446.3410672,
            294.04723642880015,
            455.30746719999996
        ],
        "match": 13
    },
    {
        "content": "hierarchy. As before, we set \u2113 = 5. For the NUMA multiplier, we",
        "page_index": 21,
        "bbox": [
            53.798,
            433.8129472,
            294.047524544,
            444.34846719999996
        ],
        "match": 12
    },
    {
        "content": "consider the values \u0394 \u2208 {2, 3, 4}. Generally, as \ud835\udc5b grows larger, the",
        "page_index": 21,
        "bbox": [
            53.798,
            423.0781072,
            294.044714176,
            433.4074
        ],
        "match": 12
    },
    {
        "content": "improvement with respect to HDagg typically get smaller, whereas",
        "page_index": 21,
        "bbox": [
            53.798,
            411.92184640000005,
            294.04856675839994,
            422.4304672
        ],
        "match": 13
    },
    {
        "content": "the improvement with respect to Cilk does not show such a clear",
        "page_index": 21,
        "bbox": [
            53.798,
            400.96284640000005,
            294.2149404864,
            411.4714672
        ],
        "match": 12
    },
    {
        "content": "pattern in terms of \ud835\udc5b.",
        "page_index": 21,
        "bbox": [
            53.798,
            391.4663696,
            131.30360800000003,
            400.5134672
        ],
        "match": 12
    },
    {
        "content": "The improvements achieved by our scheduler, separated accord\u2212",
        "page_index": 21,
        "bbox": [
            63.761,
            380.5880672,
            295.56315238400015,
            389.5544672
        ],
        "match": 5
    },
    {
        "content": "ing to \ud835\udc43, \u0394 and the dataset, are shown in Table 10. The table con\u2212",
        "page_index": 21,
        "bbox": [
            53.798,
            369.5483696,
            295.559131648,
            378.6134
        ],
        "match": 5
    },
    {
        "content": "firms that the improvement achieved by our scheduler grows with a",
        "page_index": 21,
        "bbox": [
            53.798,
            358.6700672,
            294.04533555200004,
            367.63646719999997
        ],
        "match": 5
    },
    {
        "content": "larger \ud835\udc43 and \u0394, and this general rule holds consistently for all cases",
        "page_index": 21,
        "bbox": [
            53.798,
            347.6303696,
            294.04154611200005,
            356.6954
        ],
        "match": 5
    },
    {
        "content": "in all of the datasets, i.e. regardless of \ud835\udc5b. Compared to Cilk, the",
        "page_index": 21,
        "bbox": [
            53.798,
            335.2098464,
            294.047204864,
            345.71846719999996
        ],
        "match": 5
    },
    {
        "content": "difference between the parameter combinations is most significant",
        "page_index": 21,
        "bbox": [
            53.798,
            325.7930672,
            294.04865312,
            334.75946719999996
        ],
        "match": 5
    },
    {
        "content": "in the tiny dataset: the smallest and largest improvement is both",
        "page_index": 21,
        "bbox": [
            53.798,
            313.2918464,
            294.0448656768001,
            323.80046719999996
        ],
        "match": 5
    },
    {
        "content": "achieved in this dataset.",
        "page_index": 21,
        "bbox": [
            53.798,
            303.8750672,
            141.399728,
            312.84146719999995
        ],
        "match": 5
    },
    {
        "content": "Recall that the same results are aggregated over the different",
        "page_index": 21,
        "bbox": [
            63.761,
            292.91606720000004,
            294.0412853120001,
            301.8824672
        ],
        "match": 12
    },
    {
        "content": "dataset (for each \ud835\udc43 and \u0394) in Table 2. Finally, combined over all",
        "page_index": 21,
        "bbox": [
            53.798,
            281.8773696,
            294.04814560000005,
            290.9424
        ],
        "match": 12
    },
    {
        "content": "datasets and all values of \ud835\udc43 and \u0394, the mean improvement is 60%",
        "page_index": 21,
        "bbox": [
            53.798,
            270.9183696,
            294.332355776,
            279.9834
        ],
        "match": 13
    },
    {
        "content": "and 43% compared to Cilk and HDagg, respectively. We note that",
        "page_index": 21,
        "bbox": [
            53.798,
            258.4978464,
            294.04568166399997,
            269.0064672
        ],
        "match": 12
    },
    {
        "content": "ETF and BL\u2212EST are also clearly inferior in this setting with NUMA",
        "page_index": 21,
        "bbox": [
            53.798,
            247.53884639999998,
            294.35647788800003,
            258.04746719999997
        ],
        "match": 12
    },
    {
        "content": "effects: on all datasets combined, they returns a schedule that is on",
        "page_index": 21,
        "bbox": [
            53.798,
            238.12206719999998,
            294.04255596800004,
            247.0884672
        ],
        "match": 12
    },
    {
        "content": "average 4% and 41% worse, respectively, than even Cilk.",
        "page_index": 21,
        "bbox": [
            53.798,
            225.6208464,
            260.634608,
            236.12946720000002
        ],
        "match": 12
    },
    {
        "content": "C.5 The huge dataset",
        "page_index": 21,
        "bbox": [
            53.79800000000003,
            203.6899979,
            162.11466550000003,
            215.21000750000002
        ],
        "match": 13
    },
    {
        "content": "Our results on the huge dataset without NUMA effects are shown",
        "page_index": 21,
        "bbox": [
            53.798,
            190.9508464,
            294.04338190079994,
            201.4594672
        ],
        "match": 13
    },
    {
        "content": "in Table 11, for separate values of \ud835\udc43 and \ud835\udc54. As mentioned before in",
        "page_index": 21,
        "bbox": [
            53.798,
            181.4533696,
            294.04447110399997,
            190.5004672
        ],
        "match": 13
    },
    {
        "content": "Section 7, the improvement compared to Cilk ranges from 15% to",
        "page_index": 21,
        "bbox": [
            53.798,
            169.03284639999998,
            294.045390656,
            179.5414672
        ],
        "match": 13
    },
    {
        "content": "41%, and the improvement to HDagg ranges from 6% to 13%.",
        "page_index": 21,
        "bbox": [
            53.592,
            158.07384639999998,
            271.205608,
            168.5824672
        ],
        "match": 13
    },
    {
        "content": "To also see the amount of improvement we can attribute to the",
        "page_index": 21,
        "bbox": [
            63.760999999999996,
            148.65706719999997,
            294.0450512000001,
            157.6234672
        ],
        "match": 24
    },
    {
        "content": "initializers and to HC+HCcs, we illustrate the improvement in Figure",
        "page_index": 21,
        "bbox": [
            53.798,
            136.1568464,
            294.043372416,
            146.66546720000002
        ],
        "match": 24
    },
    {
        "content": "7. This shows that the initializers achieve a 15%, 22% and 32% cost",
        "page_index": 21,
        "bbox": [
            53.592,
            126.7400672,
            294.04458927359997,
            135.7064672
        ],
        "match": 24
    },
    {
        "content": "reduction compared to Cilk (for \ud835\udc43 = 4, 8, 16, respectively). The",
        "page_index": 21,
        "bbox": [
            53.798,
            114.21194720000001,
            294.04653267199996,
            124.7474672
        ],
        "match": null
    },
    {
        "content": "local search methods then further improve this by 7%, 8% and 10%",
        "page_index": 21,
        "bbox": [
            53.798,
            104.8220672,
            294.3321474048,
            113.7884672
        ],
        "match": null
    },
    {
        "content": "(for \ud835\udc43 = 4, 8, 16, respectively) compared to Init. Hence even for",
        "page_index": 21,
        "bbox": [
            53.529,
            92.2939472,
            294.21962886399996,
            102.8294672
        ],
        "match": 24
    },
    {
        "content": "these much larger DAGs, without applying our ILP\u2212based methods,",
        "page_index": 21,
        "bbox": [
            53.798,
            85.0200672,
            295.0294876159999,
            93.98646719999999
        ],
        "match": null
    },
    {
        "content": "22",
        "page_index": 21,
        "bbox": [
            302.757,
            72.68305240000001,
            309.242634,
            79.6568524
        ],
        "match": 97
    },
    {
        "content": "our schedulers achieve a rather significant improvement to Cilk,",
        "page_index": 21,
        "bbox": [
            317.955,
            513.2918463999999,
            559.1881697279999,
            523.8004672
        ],
        "match": 24
    },
    {
        "content": "especially for higher \ud835\udc43 values. When compared to HDagg, we see",
        "page_index": 21,
        "bbox": [
            317.955,
            502.3328464,
            558.201641152,
            512.8414672
        ],
        "match": 24
    },
    {
        "content": "that Init is approximately on par with this baseline, and altogether,",
        "page_index": 21,
        "bbox": [
            317.955,
            491.37384640000005,
            559.1875114240001,
            501.8824672
        ],
        "match": 24
    },
    {
        "content": "Init+HC+HCcs provides an improvement of 11%, 7% and 11% (for",
        "page_index": 21,
        "bbox": [
            317.955,
            480.4158464,
            558.3721173888,
            490.9244672
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 4, 8, 16, respectively). We leave it to future work to improve",
        "page_index": 21,
        "bbox": [
            317.821,
            469.4299472,
            558.2024735360001,
            479.9654672
        ],
        "match": 24
    },
    {
        "content": "the scaling of our algorithms, to ensure that they are also superior",
        "page_index": 21,
        "bbox": [
            317.955,
            460.0400672,
            558.3690029952002,
            469.0064672
        ],
        "match": 24
    },
    {
        "content": "to HDagg by a more significant margin for DAGs of this size.",
        "page_index": 21,
        "bbox": [
            317.955,
            447.5388464,
            537.7576816000001,
            458.04746719999997
        ],
        "match": 24
    },
    {
        "content": "The results on the huge dataset with NUMA effects are mostly",
        "page_index": 21,
        "bbox": [
            327.918,
            436.5798464,
            558.4322386624,
            447.08846719999997
        ],
        "match": 13
    },
    {
        "content": "similar; these are shown in Table 12, separated according to \ud835\udc43 and",
        "page_index": 21,
        "bbox": [
            317.955,
            427.0823696,
            558.20195984,
            436.12946719999997
        ],
        "match": 13
    },
    {
        "content": "\u0394. The improvement here ranges from 30% to 48% compared to",
        "page_index": 21,
        "bbox": [
            318.045,
            416.2040672,
            558.1994992,
            425.1884
        ],
        "match": 13
    },
    {
        "content": "Cilk, and 7% to 21% compared to HDagg. As such, similarly to the",
        "page_index": 21,
        "bbox": [
            317.955,
            403.7028464,
            558.2022756224001,
            414.21146719999996
        ],
        "match": 13
    },
    {
        "content": "smaller dataset, the improvements become larger when we have",
        "page_index": 21,
        "bbox": [
            317.955,
            394.2860672,
            558.2041288320002,
            403.25246719999996
        ],
        "match": 13
    },
    {
        "content": "NUMA effects; however, the difference between our scheduler and",
        "page_index": 21,
        "bbox": [
            317.955,
            383.32706720000004,
            558.2006140032,
            392.2934672
        ],
        "match": 13
    },
    {
        "content": "HDagg still remains relatively small in several of the cases.",
        "page_index": 21,
        "bbox": [
            317.955,
            370.8268464,
            529.8672976,
            381.3354672
        ],
        "match": 13
    },
    {
        "content": "C.6 Multilevel scheduling",
        "page_index": 21,
        "bbox": [
            317.955,
            348.6959979,
            452.1260209,
            359.60509790000003
        ],
        "match": 5
    },
    {
        "content": "We primarily experiment with our multilevel scheduler in the set\u2212",
        "page_index": 21,
        "bbox": [
            317.525,
            337.4990672,
            559.7145474560001,
            346.4654672
        ],
        "match": 5
    },
    {
        "content": "tings where the communication costs are high; in our case, this",
        "page_index": 21,
        "bbox": [
            317.955,
            326.5400672,
            558.2041288320002,
            335.5064672
        ],
        "match": 5
    },
    {
        "content": "mostly means the setting with NUMA effects. In our experiments,",
        "page_index": 21,
        "bbox": [
            317.955,
            315.5810672,
            559.18433568,
            324.54746719999997
        ],
        "match": 5
    },
    {
        "content": "we only consider the multilevel scheduler on the small, medium",
        "page_index": 21,
        "bbox": [
            317.624,
            303.08084640000004,
            558.2022000000001,
            313.5894672
        ],
        "match": 5
    },
    {
        "content": "and large datasets, since coarsening the DAGs in tiny would lead",
        "page_index": 21,
        "bbox": [
            317.955,
            292.12184640000004,
            558.1982764800001,
            302.6304672
        ],
        "match": 5
    },
    {
        "content": "to an absurdly small DAG representation with as few as 6 nodes in",
        "page_index": 21,
        "bbox": [
            317.955,
            282.70506720000003,
            558.2018329088,
            291.6714672
        ],
        "match": 5
    },
    {
        "content": "the most extreme case.",
        "page_index": 21,
        "bbox": [
            317.955,
            271.7460672,
            401.1362928,
            280.7124672
        ],
        "match": 5
    },
    {
        "content": "Note that if the communication costs are very high in general",
        "page_index": 21,
        "bbox": [
            327.918,
            260.7870672,
            558.198285312,
            269.7534672
        ],
        "match": 5
    },
    {
        "content": "(such as with NUMA), then finding a good schedule becomes a",
        "page_index": 21,
        "bbox": [
            317.686,
            249.8280672,
            558.2003549440001,
            258.7944672
        ],
        "match": 5
    },
    {
        "content": "very challenging task: intuitively, it is only beneficial to assign two",
        "page_index": 21,
        "bbox": [
            317.731,
            238.8690672,
            558.198012352,
            247.8354672
        ],
        "match": 5
    },
    {
        "content": "parts of the DAG to separate processors if the relative size of these",
        "page_index": 21,
        "bbox": [
            317.955,
            227.9100672,
            558.2004526080001,
            236.8764672
        ],
        "match": 5
    },
    {
        "content": "parts is much larger than the number of edges going between them,",
        "page_index": 21,
        "bbox": [
            317.955,
            216.95106719999998,
            559.1864876160001,
            225.9174672
        ],
        "match": 5
    },
    {
        "content": "otherwise the corresponding communication steps result in more",
        "page_index": 21,
        "bbox": [
            317.955,
            205.99206719999998,
            558.2034563520001,
            214.9584672
        ],
        "match": 5
    },
    {
        "content": "extra cost than what we gain from the parallel execution of the",
        "page_index": 21,
        "bbox": [
            317.955,
            195.03406719999998,
            558.2041288320002,
            204.0004672
        ],
        "match": 5
    },
    {
        "content": "subtasks. In particular, when we have high NUMA costs in our",
        "page_index": 21,
        "bbox": [
            317.955,
            184.07506719999998,
            558.368751936,
            193.0414672
        ],
        "match": 5
    },
    {
        "content": "model, it can happen in our experiments that the best solution",
        "page_index": 21,
        "bbox": [
            317.955,
            173.11606719999997,
            558.204128832,
            182.0824672
        ],
        "match": 5
    },
    {
        "content": "found by both the baseline methods and our scheduler is in fact",
        "page_index": 21,
        "bbox": [
            317.955,
            162.1570672,
            558.204128832,
            171.12346720000002
        ],
        "match": 5
    },
    {
        "content": "more costly than the trivial solution of assigning the entire DAG to",
        "page_index": 21,
        "bbox": [
            317.955,
            151.1980672,
            558.202335552,
            160.16446720000002
        ],
        "match": 5
    },
    {
        "content": "a single processor and single superstep. This clearly shows that the",
        "page_index": 21,
        "bbox": [
            317.955,
            140.2390672,
            558.202335552,
            149.20546720000002
        ],
        "match": 5
    },
    {
        "content": "schedulers (both the baselines and ours) fail to find any reasonable",
        "page_index": 21,
        "bbox": [
            317.955,
            129.2800672,
            558.2062269695999,
            138.2464672
        ],
        "match": 5
    },
    {
        "content": "schedule in this case. In particular, with very high communication",
        "page_index": 21,
        "bbox": [
            317.955,
            118.3210672,
            558.2000042880001,
            127.2874672
        ],
        "match": 5
    },
    {
        "content": "cost parameters, it is not even clear at first whether a solution",
        "page_index": 21,
        "bbox": [
            317.955,
            107.3620672,
            558.204128832,
            116.32846719999999
        ],
        "match": 5
    },
    {
        "content": "of lower cost even exists (just not found by our schedulers), or",
        "page_index": 21,
        "bbox": [
            317.955,
            96.40306720000001,
            558.368751936,
            105.3694672
        ],
        "match": 5
    },
    {
        "content": "Efficient Multi\u2212Processor Scheduling in Increasingly Realistic Models",
        "page_index": 22,
        "bbox": [
            53.798,
            723.8962094,
            251.23325179999992,
            730.8700094
        ],
        "match": 0
    },
    {
        "content": "Table 10: Improvement achieved by our scheduler (with NUMA) for each combination of \ud835\udc43, \u0394 and dataset, with respect to Cilk",
        "page_index": 22,
        "bbox": [
            53.502,
            698.5717616000001,
            558.4258000000001,
            709.6094
        ],
        "match": 11
    },
    {
        "content": "(first number) and HDagg (second number), for a fixed choice of \ud835\udc54 = 1 (and \u2113 = 5).",
        "page_index": 22,
        "bbox": [
            53.52000000000004,
            687.6127616000001,
            373.1992176,
            698.6324672000001
        ],
        "match": 11
    },
    {
        "content": "\u0394 = 2 \u0394 = 3 \u0394 = 4 \u0394 = 2 \u0394 = 3 \u0394 = 4",
        "page_index": 22,
        "bbox": [
            197.997,
            642.0539471999999,
            451.104376,
            652.6074
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 8",
        "page_index": 22,
        "bbox": [
            244.89,
            660.9629471999999,
            264.670376,
            671.4984671999999
        ],
        "match": 45
    },
    {
        "content": "\ud835\udc43 = 16",
        "page_index": 22,
        "bbox": [
            382.52,
            660.9629471999999,
            406.46975199999997,
            671.4984671999999
        ],
        "match": 45
    },
    {
        "content": "tiny 43% / 39% 57% / 54% 66% / 64% 45% / 45% 68% / 68% 77% / 78%",
        "page_index": 22,
        "bbox": [
            155.178,
            620.3818464,
            459.0393488,
            630.8904672
        ],
        "match": null
    },
    {
        "content": "small 48% / 31% 55% / 40% 60% / 47% 55% / 38% 66% / 52% 71% / 59%",
        "page_index": 22,
        "bbox": [
            152.936,
            602.9968464,
            459.0393488,
            613.5054672
        ],
        "match": null
    },
    {
        "content": "medium 50% / 23% 55% / 30% 58% / 35% 61% / 34% 67% / 44% 69% / 49%",
        "page_index": 22,
        "bbox": [
            149.574,
            585.6118464,
            459.0393488,
            596.1204672
        ],
        "match": null
    },
    {
        "content": "large 49% / 14% 54% / 18% 57% / 20% 61% / 28% 67% / 38% 69% / 42%",
        "page_index": 22,
        "bbox": [
            152.936,
            568.2268464,
            459.0393488,
            578.7354672
        ],
        "match": null
    },
    {
        "content": "Table 11: Cost reduction achieved by Init+HC+HCcs on the",
        "page_index": 22,
        "bbox": [
            53.502,
            539.6067616,
            294.04144032,
            549.07528
        ],
        "match": 13
    },
    {
        "content": "huge dataset without NUMA, compared to Cilk/HDagg.",
        "page_index": 22,
        "bbox": [
            53.798,
            528.6477616000001,
            270.0128016,
            538.1162800000001
        ],
        "match": 13
    },
    {
        "content": "\ud835\udc54 = 1 \ud835\udc54 = 3 \ud835\udc54 = 5",
        "page_index": 22,
        "bbox": [
            134.534,
            501.2309472,
            244.70337600000002,
            511.76646719999997
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc43 = 4 15% / 9% 22% / 12% 26% / 13%",
        "page_index": 22,
        "bbox": [
            93.676,
            478.4369472,
            253.4773488,
            488.9724672
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 8 24% / 7% 30% / 6 % 30% / 7%",
        "page_index": 22,
        "bbox": [
            93.676,
            459.9559472,
            251.1429728,
            470.4914672
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 16 35% / 9% 39% / 11% 41% / 13%",
        "page_index": 22,
        "bbox": [
            91.592,
            441.47494720000003,
            253.4773488,
            452.0104672
        ],
        "match": null
    },
    {
        "content": "Table 12: Cost reduction achieved by Init+HC+HCcs on the",
        "page_index": 22,
        "bbox": [
            53.502,
            417.5077616,
            294.04144032,
            426.97628000000003
        ],
        "match": 13
    },
    {
        "content": "huge dataset with NUMA, compared to Cilk/HDagg.",
        "page_index": 22,
        "bbox": [
            53.798,
            406.5487616,
            256.5008016,
            416.01728
        ],
        "match": 13
    },
    {
        "content": "\u0394 = 2 \u0394 = 3 \u0394 = 4",
        "page_index": 22,
        "bbox": [
            134.233,
            379.13294720000005,
            247.626376,
            389.68640000000005
        ],
        "match": 33
    },
    {
        "content": "\ud835\udc43 = 8 30% / 7% 34% / 7% 37% / 7%",
        "page_index": 22,
        "bbox": [
            91.592,
            356.33794720000003,
            253.2279728,
            366.8734672
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 16 41% / 12% 45% / 16% 48% / 21%",
        "page_index": 22,
        "bbox": [
            89.507,
            337.8579472,
            255.5613488,
            348.3934672
        ],
        "match": null
    },
    {
        "content": "whether the trivial solution mentioned above is in fact the optimal",
        "page_index": 22,
        "bbox": [
            53.467,
            311.1550672,
            294.0409635712001,
            320.1214672
        ],
        "match": 8
    },
    {
        "content": "schedule in these problems.",
        "page_index": 22,
        "bbox": [
            53.798,
            300.1960672,
            154.67000000000002,
            309.1624672
        ],
        "match": 8
    },
    {
        "content": "that compared to the baselines, the multilevel approach can achieve\na cost reduction of up to 87% and 79% in the most extreme case",
        "page_index": 22,
        "bbox": [
            317.955,
            530.5250672,
            558.203144128,
            548.3344672
        ],
        "match": 5
    },
    {
        "content": "(with respect to Cilk/HDagg), which is more than a factor 7.7\u00d7",
        "page_index": 22,
        "bbox": [
            317.686,
            518.0238463999999,
            558.2016304,
            528.5324671999999
        ],
        "match": 5
    },
    {
        "content": "improvement from Cilk and more than a factor 4.7\u00d7 from HDagg.",
        "page_index": 22,
        "bbox": [
            317.955,
            507.0658464,
            559.58233408,
            517.5744672
        ],
        "match": 5
    },
    {
        "content": "When compared to our base scheduling framework, the multilevel",
        "page_index": 22,
        "bbox": [
            317.525,
            497.6490672,
            558.2058430592001,
            506.61546719999996
        ],
        "match": 5
    },
    {
        "content": "approach clearly remains inferior when \u0394 = 2, it is approximately",
        "page_index": 22,
        "bbox": [
            317.955,
            485.12094720000005,
            558.4304728192,
            495.67440000000005
        ],
        "match": null
    },
    {
        "content": "equally strong when \u0394 = 2 and \ud835\udc43 = 8, and is clearly superior when",
        "page_index": 22,
        "bbox": [
            317.955,
            474.16194720000004,
            558.197795616,
            484.71540000000005
        ],
        "match": null
    },
    {
        "content": "we have \u0394 = 3 and \ud835\udc43 = 16, or \u0394 = 4. For the most extreme case of",
        "page_index": 22,
        "bbox": [
            317.623,
            463.20294720000004,
            558.201374016,
            473.75640000000004
        ],
        "match": 5
    },
    {
        "content": "\u0394 = 4 and \ud835\udc43 = 16, it provides another more than 2\u00d7 improvement",
        "page_index": 22,
        "bbox": [
            318.045,
            452.24394720000004,
            558.197423616,
            462.79740000000004
        ],
        "match": 5
    },
    {
        "content": "compared to the base scheduling framework.",
        "page_index": 22,
        "bbox": [
            317.955,
            442.85406720000003,
            482.219448,
            451.8204672
        ],
        "match": 5
    },
    {
        "content": "Note that the tables are split into multiple rows based on whether",
        "page_index": 22,
        "bbox": [
            327.918,
            431.8950672,
            558.3765373440001,
            440.8614672
        ],
        "match": 5
    },
    {
        "content": "we use the approach with a coarsification factor of 0.15 or 0.3, or",
        "page_index": 22,
        "bbox": [
            317.623,
            420.8553696,
            558.3745452031999,
            429.9024672
        ],
        "match": 5
    },
    {
        "content": "whether we run both and select the better out of the two schedules.",
        "page_index": 22,
        "bbox": [
            317.623,
            409.9770672,
            559.5838145920001,
            418.9434672
        ],
        "match": 5
    },
    {
        "content": "The table shows that applying and comparing both coarsifications",
        "page_index": 22,
        "bbox": [
            317.686,
            399.0190672,
            558.2014667776,
            407.98546719999996
        ],
        "match": 5
    },
    {
        "content": "indeed leads to some further improvement over the single\u2212ratio",
        "page_index": 22,
        "bbox": [
            317.955,
            388.0600672,
            558.204128832,
            397.02646719999996
        ],
        "match": 5
    },
    {
        "content": "approach. In case if we prefer running the multilevel approach with",
        "page_index": 22,
        "bbox": [
            317.955,
            377.10106720000005,
            558.2023355520001,
            386.0674672
        ],
        "match": 5
    },
    {
        "content": "only a single ratio, 0.3 seems to be the clearly superior choice from",
        "page_index": 22,
        "bbox": [
            317.955,
            366.06136960000003,
            558.20152032,
            375.1084672
        ],
        "match": 5
    },
    {
        "content": "the two.",
        "page_index": 22,
        "bbox": [
            317.955,
            355.18306720000004,
            347.72344799999996,
            364.1494672
        ],
        "match": 5
    },
    {
        "content": "In contrast to these cases, when we apply the multilevel scheduler",
        "page_index": 22,
        "bbox": [
            327.918,
            344.22406720000004,
            558.376537344,
            353.1904672
        ],
        "match": 5
    },
    {
        "content": "to settings with lower communication costs, it typically provides",
        "page_index": 22,
        "bbox": [
            317.955,
            333.26506720000003,
            558.200452608,
            342.2314672
        ],
        "match": 5
    },
    {
        "content": "weaker schedules than our base scheduling approach. This was",
        "page_index": 22,
        "bbox": [
            317.623,
            322.30606720000003,
            558.20137504,
            331.2724672
        ],
        "match": 5
    },
    {
        "content": "already indicated before by the case of \u0394 = 2 in Table 14. In our",
        "page_index": 22,
        "bbox": [
            317.955,
            309.7779472,
            558.368995136,
            320.33140000000003
        ],
        "match": 5
    },
    {
        "content": "setting without NUMA, the difference is even larger: for instance,",
        "page_index": 22,
        "bbox": [
            317.955,
            300.3880672,
            559.1871959616001,
            309.3544672
        ],
        "match": 5
    },
    {
        "content": "Our multilevel algorithm answers this question, demonstrating",
        "page_index": 22,
        "bbox": [
            63.761,
            289.2370672,
            294.0408549248,
            298.2034672
        ],
        "match": null
    },
    {
        "content": "the mean ratio of the multilevel algorithm to our base scheduler is",
        "page_index": 22,
        "bbox": [
            317.955,
            289.4290672,
            558.1977357888,
            298.3954672
        ],
        "match": 5
    },
    {
        "content": "that an approach designed especially for this communication\u2212heavy",
        "page_index": 22,
        "bbox": [
            53.798,
            278.2780672,
            294.273799424,
            287.2444672
        ],
        "match": 9
    },
    {
        "content": "case can find a solution with lower than the trivial cost even in",
        "page_index": 22,
        "bbox": [
            53.798,
            267.3190672,
            294.04712883200006,
            276.28546719999997
        ],
        "match": 9
    },
    {
        "content": "this very challenging setting. In particular, over all experiments",
        "page_index": 22,
        "bbox": [
            53.798,
            256.3600672,
            294.0471288320001,
            265.32646719999997
        ],
        "match": 9
    },
    {
        "content": "with NUMA costs (\ud835\udc43 \u2208 {8, 16}, \u0394 \u2208 {2, 3, 4}), there were as many as",
        "page_index": 22,
        "bbox": [
            53.467,
            244.0561072,
            294.04628883199996,
            254.3854
        ],
        "match": null
    },
    {
        "content": "114 out of 396 cases where our base scheduler (and the baselines)",
        "page_index": 22,
        "bbox": [
            53.592,
            234.4420672,
            294.5844611776,
            243.40846720000002
        ],
        "match": 9
    },
    {
        "content": "could not find a solution with lower than trivial cost; however, with",
        "page_index": 22,
        "bbox": [
            53.798,
            223.4840672,
            294.04533555200015,
            232.45046720000002
        ],
        "match": null
    },
    {
        "content": "1.246 for a choice of \ud835\udc43 = 8 and \ud835\udc54 = 3, and 1.515 for a choice of \ud835\udc43 = 16",
        "page_index": 22,
        "bbox": [
            317.749,
            276.9019472,
            558.2019769599999,
            287.43746719999996
        ],
        "match": 5
    },
    {
        "content": "and \ud835\udc54 = 1 (still understood over all datasets except tiny). While",
        "page_index": 22,
        "bbox": [
            317.955,
            265.9429472,
            558.1986963840001,
            276.47846719999995
        ],
        "match": null
    },
    {
        "content": "these ratios imply that the multilevel approach is still somewhat",
        "page_index": 22,
        "bbox": [
            317.955,
            256.55306720000004,
            558.204128832,
            265.5194672
        ],
        "match": 5
    },
    {
        "content": "better than Cilk (and even marginally better than HDagg in the",
        "page_index": 22,
        "bbox": [
            317.955,
            244.0518464,
            558.198098944,
            254.5604672
        ],
        "match": 5
    },
    {
        "content": "\ud835\udc43 = 8, \ud835\udc54 = 3 case), altogether, it is clearly inferior to our base",
        "page_index": 22,
        "bbox": [
            317.821,
            233.06594719999998,
            558.205047104,
            243.6014672
        ],
        "match": 5
    },
    {
        "content": "scheduler. This suggests that our current implementation of the",
        "page_index": 22,
        "bbox": [
            317.955,
            223.67606719999998,
            558.2041288320002,
            232.6424672
        ],
        "match": 5
    },
    {
        "content": "the application of the multilevel algorithm, the number of such",
        "page_index": 22,
        "bbox": [
            53.798,
            212.5250672,
            294.04712883200006,
            221.49146720000002
        ],
        "match": 9
    },
    {
        "content": "multilevel method can indeed be understood as a specialized tool",
        "page_index": 22,
        "bbox": [
            317.955,
            212.7170672,
            558.2055006912,
            221.68346720000002
        ],
        "match": 5
    },
    {
        "content": "cases was only 8 out of 396. These numbers are understood over all",
        "page_index": 22,
        "bbox": [
            53.798,
            201.5660672,
            294.0409047680001,
            210.5324672
        ],
        "match": null
    },
    {
        "content": "for the case when communication costs are really dominant in the",
        "page_index": 22,
        "bbox": [
            317.955,
            201.7580672,
            558.1977357888001,
            210.72446720000002
        ],
        "match": 5
    },
    {
        "content": "datasets except tiny (where multilevel scheduling was not applied,",
        "page_index": 22,
        "bbox": [
            53.798,
            189.0648464,
            295.031303424,
            199.5734672
        ],
        "match": null
    },
    {
        "content": "and hence it cannot be included in this comparison). This shows",
        "page_index": 22,
        "bbox": [
            53.798,
            179.64806719999999,
            294.047128832,
            188.6144672
        ],
        "match": 10
    },
    {
        "content": "scheduling problem.",
        "page_index": 22,
        "bbox": [
            317.955,
            190.7990672,
            392.15196,
            199.76546720000002
        ],
        "match": 5
    },
    {
        "content": "However, we believe that with further polishing, the multilevel",
        "page_index": 22,
        "bbox": [
            327.918,
            179.8400672,
            558.2046604224001,
            188.80646720000001
        ],
        "match": 5
    },
    {
        "content": "that even our relatively simple implementation of this multilevel",
        "page_index": 22,
        "bbox": [
            53.798,
            168.68906719999998,
            294.0415696640001,
            177.6554672
        ],
        "match": 9
    },
    {
        "content": "approach can be improved to find a favorable coarsification ratio by",
        "page_index": 22,
        "bbox": [
            317.955,
            168.8820672,
            558.430799424,
            177.84846720000002
        ],
        "match": 5
    },
    {
        "content": "idea can indeed very nicely fill the specialist role of scheduling",
        "page_index": 22,
        "bbox": [
            53.798,
            157.73006719999998,
            294.047128832,
            166.6964672
        ],
        "match": 9
    },
    {
        "content": "itself (intuitively, to decide if coarsification is even necessary, or in",
        "page_index": 22,
        "bbox": [
            317.955,
            157.9230672,
            558.2056531200001,
            166.8894672
        ],
        "match": null
    },
    {
        "content": "these kind of problems.",
        "page_index": 22,
        "bbox": [
            53.798,
            146.77106719999998,
            139.19399360000003,
            155.7374672
        ],
        "match": 9
    },
    {
        "content": "a more advanced case, on which parts of the DAG it is necessary),",
        "page_index": 22,
        "bbox": [
            317.955,
            146.9640672,
            559.18433568,
            155.9304672
        ],
        "match": 5
    },
    {
        "content": "The concrete improvement factors achieved by our multilevel",
        "page_index": 22,
        "bbox": [
            63.761,
            135.8120672,
            294.0412853120002,
            144.77846720000002
        ],
        "match": 5
    },
    {
        "content": "and hence it can become a technique that provides high\u2212quality",
        "page_index": 22,
        "bbox": [
            317.955,
            136.00506719999998,
            558.4327720320001,
            144.9714672
        ],
        "match": 5
    },
    {
        "content": "algorithm (separately for \ud835\udc43 \u2208 {8, 16}, \u0394 \u2208 {2, 3, 4}) are shown in",
        "page_index": 22,
        "bbox": [
            53.798,
            123.5081072,
            294.04563936000005,
            133.8374
        ],
        "match": null
    },
    {
        "content": "Table 13 with respect to the baselines, and in Table 14 with respect",
        "page_index": 22,
        "bbox": [
            53.529,
            113.8950672,
            294.0446461056,
            122.86146719999999
        ],
        "match": 5
    },
    {
        "content": "schedules on all problems, regardless of input parameters. We be\u2212",
        "page_index": 22,
        "bbox": [
            317.955,
            125.0460672,
            559.7205891648,
            134.0124672
        ],
        "match": 5
    },
    {
        "content": "lieve that this is one of the most promising directions for future",
        "page_index": 22,
        "bbox": [
            317.955,
            114.0870672,
            558.204128832,
            123.0534672
        ],
        "match": 5
    },
    {
        "content": "to our (non\u2212multilevel) scheduling framework. The tables show",
        "page_index": 22,
        "bbox": [
            53.798,
            102.9360672,
            294.3763750400001,
            111.90246719999999
        ],
        "match": 5
    },
    {
        "content": "work in this topic.",
        "page_index": 22,
        "bbox": [
            317.623,
            103.1280672,
            384.5392432,
            112.0944672
        ],
        "match": 5
    },
    {
        "content": "23",
        "page_index": 22,
        "bbox": [
            302.757,
            72.68305240000001,
            309.242634,
            79.6568524
        ],
        "match": 97
    },
    {
        "content": "P\u00e1l Andr\u00e1s Papp, Georg Anegg, Aikaterini Karanasiou, and Albert\u2212Jan N. Yzelman",
        "page_index": 23,
        "bbox": [
            324.327,
            723.8962094,
            558.2003567999998,
            730.8700094
        ],
        "match": null
    },
    {
        "content": "Table 13: Cost reduction achieved by the multilevel scheduler in case of NUMA with respect to Cilk/HDagg, for each combination",
        "page_index": 23,
        "bbox": [
            53.502,
            698.5717616000001,
            558.197853056,
            708.04028
        ],
        "match": 262
    },
    {
        "content": "of \ud835\udc43 and \u0394, on the combination of all datasets except tiny, for a fixed choice of \ud835\udc54 = 1 (and \u2113 = 5). The rows C15 and C30 show the",
        "page_index": 23,
        "bbox": [
            53.798,
            687.6127616,
            558.198722048,
            698.6504
        ],
        "match": 262
    },
    {
        "content": "result obtained when running the multilevel algorithm with a coarsification factor of 15% and 30%, respectively, while the C\ud835\udc5c\ud835\udc5d\ud835\udc61",
        "page_index": 23,
        "bbox": [
            53.798,
            676.6537616,
            556.9655055,
            687.6734672
        ],
        "match": 262
    },
    {
        "content": "row denotes the variant when we run both of these algorithms, and select the schedule of lower cost from the two outputs.",
        "page_index": 23,
        "bbox": [
            53.797999999999945,
            665.6947616,
            549.729584,
            674.6611616
        ],
        "match": 262
    },
    {
        "content": "\u0394 = 2 \u0394 = 3 \u0394 = 4 \u0394 = 2 \u0394 = 3 \u0394 = 4",
        "page_index": 23,
        "bbox": [
            192.197,
            620.1359471999999,
            445.822376,
            630.6894
        ],
        "match": null
    },
    {
        "content": "\ud835\udc43 = 8",
        "page_index": 23,
        "bbox": [
            239.091,
            639.0459472,
            258.87137600000005,
            649.5814672
        ],
        "match": 266
    },
    {
        "content": "\ud835\udc43 = 16",
        "page_index": 23,
        "bbox": [
            377.23800000000006,
            639.0459472,
            401.18775200000005,
            649.5814672
        ],
        "match": 245
    },
    {
        "content": "C15 31% / \u22123% 48% / 21% 63% / 41% 47% / 14% 73% / 56% 85% / 75%",
        "page_index": 23,
        "bbox": [
            157.754,
            598.4638464,
            453.75734880000005,
            608.9724672
        ],
        "match": 261
    },
    {
        "content": "C30 39% / 9% 54% / 29% 64% / 44% 53% / 24% 74% / 58% 85% / 75%",
        "page_index": 23,
        "bbox": [
            157.754,
            581.0788464,
            453.75734880000005,
            591.5874672
        ],
        "match": 261
    },
    {
        "content": "C\ud835\udc5c\ud835\udc5d\ud835\udc61 40% / 10% 56% / 32% 67% / 48% 54% / 26% 76% / 61% 87% / 79%",
        "page_index": 23,
        "bbox": [
            154.856,
            563.6938464,
            453.75734880000005,
            574.2024672
        ],
        "match": 261
    },
    {
        "content": "Table 14: Improvement factor achieved by the multilevel scheduler with respect to our base scheduler (the framework of Figure",
        "page_index": 23,
        "bbox": [
            53.502,
            542.0477616000001,
            558.205054464,
            551.0141616000001
        ],
        "match": 264
    },
    {
        "content": "3), in the same setting as described in Table 13.",
        "page_index": 23,
        "bbox": [
            53.798,
            531.0887616,
            242.49588800000004,
            540.0551616
        ],
        "match": 264
    },
    {
        "content": "\ud835\udc43 = 8 \ud835\udc43 = 16",
        "page_index": 23,
        "bbox": [
            262.895,
            504.43894720000003,
            376.86575199999993,
            514.9744672
        ],
        "match": 266
    },
    {
        "content": "\u0394 = 2 \u0394 = 3 \u0394 = 4 \u0394 = 2 \u0394 = 3 \u0394 = 4",
        "page_index": 23,
        "bbox": [
            231.87,
            485.52994720000004,
            405.630376,
            496.08340000000004
        ],
        "match": null
    },
    {
        "content": "C15 1.353 1.136 0.912 1.291 0.813 0.506",
        "page_index": 23,
        "bbox": [
            205.88,
            463.8578464,
            404.933128,
            474.3664672
        ],
        "match": null
    },
    {
        "content": "C30 1.195 1.014 0.871 1.141 0.774 0.502",
        "page_index": 23,
        "bbox": [
            205.88,
            446.47284640000004,
            404.933128,
            456.9814672
        ],
        "match": null
    },
    {
        "content": "C\ud835\udc5c\ud835\udc5d\ud835\udc61 1.179 0.979 0.812 1.122 0.711 0.429",
        "page_index": 23,
        "bbox": [
            202.982,
            429.08784640000005,
            404.933128,
            439.5964672
        ],
        "match": null
    },
    {
        "content": "24",
        "page_index": 23,
        "bbox": [
            302.757,
            72.68305240000001,
            309.242634,
            79.6568524
        ],
        "match": 261
    }
]